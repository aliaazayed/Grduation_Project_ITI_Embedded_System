
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000029a  00800060  000031f4  00003288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008002fa  008002fa  00003522  2**0
                  ALLOC
  3 .stab         000088f8  00000000  00000000  00003524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001997  00000000  00000000  0000be1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  0000d7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000103  00000000  00000000  0000d893  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000149f  00000000  00000000  0000d996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b4a  00000000  00000000  0000ee35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000984  00000000  00000000  0000f97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00010304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e5  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000434  00000000  00000000  000105c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000109fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <main>
      8a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__mulsf3>:
      92:	a0 e2       	ldi	r26, 0x20	; 32
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__>
      9e:	69 83       	std	Y+1, r22	; 0x01
      a0:	7a 83       	std	Y+2, r23	; 0x02
      a2:	8b 83       	std	Y+3, r24	; 0x03
      a4:	9c 83       	std	Y+4, r25	; 0x04
      a6:	2d 83       	std	Y+5, r18	; 0x05
      a8:	3e 83       	std	Y+6, r19	; 0x06
      aa:	4f 83       	std	Y+7, r20	; 0x07
      ac:	58 87       	std	Y+8, r21	; 0x08
      ae:	ce 01       	movw	r24, r28
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	be 01       	movw	r22, r28
      b4:	67 5f       	subi	r22, 0xF7	; 247
      b6:	7f 4f       	sbci	r23, 0xFF	; 255
      b8:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
      bc:	ce 01       	movw	r24, r28
      be:	05 96       	adiw	r24, 0x05	; 5
      c0:	be 01       	movw	r22, r28
      c2:	6f 5e       	subi	r22, 0xEF	; 239
      c4:	7f 4f       	sbci	r23, 0xFF	; 255
      c6:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
      ca:	99 85       	ldd	r25, Y+9	; 0x09
      cc:	92 30       	cpi	r25, 0x02	; 2
      ce:	88 f0       	brcs	.+34     	; 0xf2 <__mulsf3+0x60>
      d0:	89 89       	ldd	r24, Y+17	; 0x11
      d2:	82 30       	cpi	r24, 0x02	; 2
      d4:	c8 f0       	brcs	.+50     	; 0x108 <__mulsf3+0x76>
      d6:	94 30       	cpi	r25, 0x04	; 4
      d8:	19 f4       	brne	.+6      	; 0xe0 <__mulsf3+0x4e>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	51 f4       	brne	.+20     	; 0xf2 <__mulsf3+0x60>
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__mulsf3+0x56>
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	29 f4       	brne	.+10     	; 0xee <__mulsf3+0x5c>
      e4:	92 30       	cpi	r25, 0x02	; 2
      e6:	81 f4       	brne	.+32     	; 0x108 <__mulsf3+0x76>
      e8:	82 ee       	ldi	r24, 0xE2	; 226
      ea:	92 e0       	ldi	r25, 0x02	; 2
      ec:	c6 c0       	rjmp	.+396    	; 0x27a <__mulsf3+0x1e8>
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	49 f4       	brne	.+18     	; 0x104 <__mulsf3+0x72>
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	9a 85       	ldd	r25, Y+10	; 0x0a
      f6:	8a 89       	ldd	r24, Y+18	; 0x12
      f8:	98 13       	cpse	r25, r24
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	2a 87       	std	Y+10, r18	; 0x0a
      fe:	ce 01       	movw	r24, r28
     100:	09 96       	adiw	r24, 0x09	; 9
     102:	bb c0       	rjmp	.+374    	; 0x27a <__mulsf3+0x1e8>
     104:	82 30       	cpi	r24, 0x02	; 2
     106:	49 f4       	brne	.+18     	; 0x11a <__mulsf3+0x88>
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	9a 85       	ldd	r25, Y+10	; 0x0a
     10c:	8a 89       	ldd	r24, Y+18	; 0x12
     10e:	98 13       	cpse	r25, r24
     110:	21 e0       	ldi	r18, 0x01	; 1
     112:	2a 8b       	std	Y+18, r18	; 0x12
     114:	ce 01       	movw	r24, r28
     116:	41 96       	adiw	r24, 0x11	; 17
     118:	b0 c0       	rjmp	.+352    	; 0x27a <__mulsf3+0x1e8>
     11a:	2d 84       	ldd	r2, Y+13	; 0x0d
     11c:	3e 84       	ldd	r3, Y+14	; 0x0e
     11e:	4f 84       	ldd	r4, Y+15	; 0x0f
     120:	58 88       	ldd	r5, Y+16	; 0x10
     122:	6d 88       	ldd	r6, Y+21	; 0x15
     124:	7e 88       	ldd	r7, Y+22	; 0x16
     126:	8f 88       	ldd	r8, Y+23	; 0x17
     128:	98 8c       	ldd	r9, Y+24	; 0x18
     12a:	ee 24       	eor	r14, r14
     12c:	ff 24       	eor	r15, r15
     12e:	87 01       	movw	r16, r14
     130:	aa 24       	eor	r10, r10
     132:	bb 24       	eor	r11, r11
     134:	65 01       	movw	r12, r10
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	c1 01       	movw	r24, r2
     144:	81 70       	andi	r24, 0x01	; 1
     146:	90 70       	andi	r25, 0x00	; 0
     148:	89 2b       	or	r24, r25
     14a:	e9 f0       	breq	.+58     	; 0x186 <__mulsf3+0xf4>
     14c:	e6 0c       	add	r14, r6
     14e:	f7 1c       	adc	r15, r7
     150:	08 1d       	adc	r16, r8
     152:	19 1d       	adc	r17, r9
     154:	9a 01       	movw	r18, r20
     156:	ab 01       	movw	r20, r22
     158:	2a 0d       	add	r18, r10
     15a:	3b 1d       	adc	r19, r11
     15c:	4c 1d       	adc	r20, r12
     15e:	5d 1d       	adc	r21, r13
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e6 14       	cp	r14, r6
     16a:	f7 04       	cpc	r15, r7
     16c:	08 05       	cpc	r16, r8
     16e:	19 05       	cpc	r17, r9
     170:	20 f4       	brcc	.+8      	; 0x17a <__mulsf3+0xe8>
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	ba 01       	movw	r22, r20
     17c:	a9 01       	movw	r20, r18
     17e:	48 0f       	add	r20, r24
     180:	59 1f       	adc	r21, r25
     182:	6a 1f       	adc	r22, r26
     184:	7b 1f       	adc	r23, r27
     186:	aa 0c       	add	r10, r10
     188:	bb 1c       	adc	r11, r11
     18a:	cc 1c       	adc	r12, r12
     18c:	dd 1c       	adc	r13, r13
     18e:	97 fe       	sbrs	r9, 7
     190:	08 c0       	rjmp	.+16     	; 0x1a2 <__mulsf3+0x110>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	a8 2a       	or	r10, r24
     19c:	b9 2a       	or	r11, r25
     19e:	ca 2a       	or	r12, r26
     1a0:	db 2a       	or	r13, r27
     1a2:	31 96       	adiw	r30, 0x01	; 1
     1a4:	e0 32       	cpi	r30, 0x20	; 32
     1a6:	f1 05       	cpc	r31, r1
     1a8:	49 f0       	breq	.+18     	; 0x1bc <__mulsf3+0x12a>
     1aa:	66 0c       	add	r6, r6
     1ac:	77 1c       	adc	r7, r7
     1ae:	88 1c       	adc	r8, r8
     1b0:	99 1c       	adc	r9, r9
     1b2:	56 94       	lsr	r5
     1b4:	47 94       	ror	r4
     1b6:	37 94       	ror	r3
     1b8:	27 94       	ror	r2
     1ba:	c3 cf       	rjmp	.-122    	; 0x142 <__mulsf3+0xb0>
     1bc:	fa 85       	ldd	r31, Y+10	; 0x0a
     1be:	ea 89       	ldd	r30, Y+18	; 0x12
     1c0:	2b 89       	ldd	r18, Y+19	; 0x13
     1c2:	3c 89       	ldd	r19, Y+20	; 0x14
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	28 0f       	add	r18, r24
     1ca:	39 1f       	adc	r19, r25
     1cc:	2e 5f       	subi	r18, 0xFE	; 254
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	17 c0       	rjmp	.+46     	; 0x200 <__mulsf3+0x16e>
     1d2:	ca 01       	movw	r24, r20
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	90 70       	andi	r25, 0x00	; 0
     1d8:	89 2b       	or	r24, r25
     1da:	61 f0       	breq	.+24     	; 0x1f4 <__mulsf3+0x162>
     1dc:	16 95       	lsr	r17
     1de:	07 95       	ror	r16
     1e0:	f7 94       	ror	r15
     1e2:	e7 94       	ror	r14
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e8       	ldi	r27, 0x80	; 128
     1ec:	e8 2a       	or	r14, r24
     1ee:	f9 2a       	or	r15, r25
     1f0:	0a 2b       	or	r16, r26
     1f2:	1b 2b       	or	r17, r27
     1f4:	76 95       	lsr	r23
     1f6:	67 95       	ror	r22
     1f8:	57 95       	ror	r21
     1fa:	47 95       	ror	r20
     1fc:	2f 5f       	subi	r18, 0xFF	; 255
     1fe:	3f 4f       	sbci	r19, 0xFF	; 255
     200:	77 fd       	sbrc	r23, 7
     202:	e7 cf       	rjmp	.-50     	; 0x1d2 <__mulsf3+0x140>
     204:	0c c0       	rjmp	.+24     	; 0x21e <__mulsf3+0x18c>
     206:	44 0f       	add	r20, r20
     208:	55 1f       	adc	r21, r21
     20a:	66 1f       	adc	r22, r22
     20c:	77 1f       	adc	r23, r23
     20e:	17 fd       	sbrc	r17, 7
     210:	41 60       	ori	r20, 0x01	; 1
     212:	ee 0c       	add	r14, r14
     214:	ff 1c       	adc	r15, r15
     216:	00 1f       	adc	r16, r16
     218:	11 1f       	adc	r17, r17
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	30 40       	sbci	r19, 0x00	; 0
     21e:	40 30       	cpi	r20, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	59 07       	cpc	r21, r25
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	69 07       	cpc	r22, r25
     228:	90 e4       	ldi	r25, 0x40	; 64
     22a:	79 07       	cpc	r23, r25
     22c:	60 f3       	brcs	.-40     	; 0x206 <__mulsf3+0x174>
     22e:	2b 8f       	std	Y+27, r18	; 0x1b
     230:	3c 8f       	std	Y+28, r19	; 0x1c
     232:	db 01       	movw	r26, r22
     234:	ca 01       	movw	r24, r20
     236:	8f 77       	andi	r24, 0x7F	; 127
     238:	90 70       	andi	r25, 0x00	; 0
     23a:	a0 70       	andi	r26, 0x00	; 0
     23c:	b0 70       	andi	r27, 0x00	; 0
     23e:	80 34       	cpi	r24, 0x40	; 64
     240:	91 05       	cpc	r25, r1
     242:	a1 05       	cpc	r26, r1
     244:	b1 05       	cpc	r27, r1
     246:	61 f4       	brne	.+24     	; 0x260 <__mulsf3+0x1ce>
     248:	47 fd       	sbrc	r20, 7
     24a:	0a c0       	rjmp	.+20     	; 0x260 <__mulsf3+0x1ce>
     24c:	e1 14       	cp	r14, r1
     24e:	f1 04       	cpc	r15, r1
     250:	01 05       	cpc	r16, r1
     252:	11 05       	cpc	r17, r1
     254:	29 f0       	breq	.+10     	; 0x260 <__mulsf3+0x1ce>
     256:	40 5c       	subi	r20, 0xC0	; 192
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	6f 4f       	sbci	r22, 0xFF	; 255
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	40 78       	andi	r20, 0x80	; 128
     260:	1a 8e       	std	Y+26, r1	; 0x1a
     262:	fe 17       	cp	r31, r30
     264:	11 f0       	breq	.+4      	; 0x26a <__mulsf3+0x1d8>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	8a 8f       	std	Y+26, r24	; 0x1a
     26a:	4d 8f       	std	Y+29, r20	; 0x1d
     26c:	5e 8f       	std	Y+30, r21	; 0x1e
     26e:	6f 8f       	std	Y+31, r22	; 0x1f
     270:	78 a3       	std	Y+32, r23	; 0x20
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	89 8f       	std	Y+25, r24	; 0x19
     276:	ce 01       	movw	r24, r28
     278:	49 96       	adiw	r24, 0x19	; 25
     27a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__pack_f>
     27e:	a0 96       	adiw	r28, 0x20	; 32
     280:	e2 e1       	ldi	r30, 0x12	; 18
     282:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__>

00000286 <__eqsf2>:
     286:	a8 e1       	ldi	r26, 0x18	; 24
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e9 e4       	ldi	r30, 0x49	; 73
     28c:	f1 e0       	ldi	r31, 0x01	; 1
     28e:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     292:	69 83       	std	Y+1, r22	; 0x01
     294:	7a 83       	std	Y+2, r23	; 0x02
     296:	8b 83       	std	Y+3, r24	; 0x03
     298:	9c 83       	std	Y+4, r25	; 0x04
     29a:	2d 83       	std	Y+5, r18	; 0x05
     29c:	3e 83       	std	Y+6, r19	; 0x06
     29e:	4f 83       	std	Y+7, r20	; 0x07
     2a0:	58 87       	std	Y+8, r21	; 0x08
     2a2:	89 e0       	ldi	r24, 0x09	; 9
     2a4:	e8 2e       	mov	r14, r24
     2a6:	f1 2c       	mov	r15, r1
     2a8:	ec 0e       	add	r14, r28
     2aa:	fd 1e       	adc	r15, r29
     2ac:	ce 01       	movw	r24, r28
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	b7 01       	movw	r22, r14
     2b2:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
     2b6:	8e 01       	movw	r16, r28
     2b8:	0f 5e       	subi	r16, 0xEF	; 239
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
     2bc:	ce 01       	movw	r24, r28
     2be:	05 96       	adiw	r24, 0x05	; 5
     2c0:	b8 01       	movw	r22, r16
     2c2:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
     2c6:	89 85       	ldd	r24, Y+9	; 0x09
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	40 f0       	brcs	.+16     	; 0x2dc <__eqsf2+0x56>
     2cc:	89 89       	ldd	r24, Y+17	; 0x11
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	28 f0       	brcs	.+10     	; 0x2dc <__eqsf2+0x56>
     2d2:	c7 01       	movw	r24, r14
     2d4:	b8 01       	movw	r22, r16
     2d6:	0e 94 44 03 	call	0x688	; 0x688 <__fpcmp_parts_f>
     2da:	01 c0       	rjmp	.+2      	; 0x2de <__eqsf2+0x58>
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	68 96       	adiw	r28, 0x18	; 24
     2e0:	e6 e0       	ldi	r30, 0x06	; 6
     2e2:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

000002e6 <__ltsf2>:
     2e6:	a8 e1       	ldi	r26, 0x18	; 24
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     2f2:	69 83       	std	Y+1, r22	; 0x01
     2f4:	7a 83       	std	Y+2, r23	; 0x02
     2f6:	8b 83       	std	Y+3, r24	; 0x03
     2f8:	9c 83       	std	Y+4, r25	; 0x04
     2fa:	2d 83       	std	Y+5, r18	; 0x05
     2fc:	3e 83       	std	Y+6, r19	; 0x06
     2fe:	4f 83       	std	Y+7, r20	; 0x07
     300:	58 87       	std	Y+8, r21	; 0x08
     302:	89 e0       	ldi	r24, 0x09	; 9
     304:	e8 2e       	mov	r14, r24
     306:	f1 2c       	mov	r15, r1
     308:	ec 0e       	add	r14, r28
     30a:	fd 1e       	adc	r15, r29
     30c:	ce 01       	movw	r24, r28
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	b7 01       	movw	r22, r14
     312:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
     316:	8e 01       	movw	r16, r28
     318:	0f 5e       	subi	r16, 0xEF	; 239
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	ce 01       	movw	r24, r28
     31e:	05 96       	adiw	r24, 0x05	; 5
     320:	b8 01       	movw	r22, r16
     322:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
     326:	89 85       	ldd	r24, Y+9	; 0x09
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	40 f0       	brcs	.+16     	; 0x33c <__ltsf2+0x56>
     32c:	89 89       	ldd	r24, Y+17	; 0x11
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	28 f0       	brcs	.+10     	; 0x33c <__ltsf2+0x56>
     332:	c7 01       	movw	r24, r14
     334:	b8 01       	movw	r22, r16
     336:	0e 94 44 03 	call	0x688	; 0x688 <__fpcmp_parts_f>
     33a:	01 c0       	rjmp	.+2      	; 0x33e <__ltsf2+0x58>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	68 96       	adiw	r28, 0x18	; 24
     340:	e6 e0       	ldi	r30, 0x06	; 6
     342:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

00000346 <__fixsfsi>:
     346:	ac e0       	ldi	r26, 0x0C	; 12
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e9 ea       	ldi	r30, 0xA9	; 169
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__prologue_saves__+0x20>
     352:	69 83       	std	Y+1, r22	; 0x01
     354:	7a 83       	std	Y+2, r23	; 0x02
     356:	8b 83       	std	Y+3, r24	; 0x03
     358:	9c 83       	std	Y+4, r25	; 0x04
     35a:	ce 01       	movw	r24, r28
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	be 01       	movw	r22, r28
     360:	6b 5f       	subi	r22, 0xFB	; 251
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	0e 94 cc 02 	call	0x598	; 0x598 <__unpack_f>
     368:	8d 81       	ldd	r24, Y+5	; 0x05
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	61 f1       	breq	.+88     	; 0x3c6 <__fixsfsi+0x80>
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	50 f1       	brcs	.+84     	; 0x3c6 <__fixsfsi+0x80>
     372:	84 30       	cpi	r24, 0x04	; 4
     374:	21 f4       	brne	.+8      	; 0x37e <__fixsfsi+0x38>
     376:	8e 81       	ldd	r24, Y+6	; 0x06
     378:	88 23       	and	r24, r24
     37a:	51 f1       	breq	.+84     	; 0x3d0 <__fixsfsi+0x8a>
     37c:	2e c0       	rjmp	.+92     	; 0x3da <__fixsfsi+0x94>
     37e:	2f 81       	ldd	r18, Y+7	; 0x07
     380:	38 85       	ldd	r19, Y+8	; 0x08
     382:	37 fd       	sbrc	r19, 7
     384:	20 c0       	rjmp	.+64     	; 0x3c6 <__fixsfsi+0x80>
     386:	6e 81       	ldd	r22, Y+6	; 0x06
     388:	2f 31       	cpi	r18, 0x1F	; 31
     38a:	31 05       	cpc	r19, r1
     38c:	1c f0       	brlt	.+6      	; 0x394 <__fixsfsi+0x4e>
     38e:	66 23       	and	r22, r22
     390:	f9 f0       	breq	.+62     	; 0x3d0 <__fixsfsi+0x8a>
     392:	23 c0       	rjmp	.+70     	; 0x3da <__fixsfsi+0x94>
     394:	8e e1       	ldi	r24, 0x1E	; 30
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	82 1b       	sub	r24, r18
     39a:	93 0b       	sbc	r25, r19
     39c:	29 85       	ldd	r18, Y+9	; 0x09
     39e:	3a 85       	ldd	r19, Y+10	; 0x0a
     3a0:	4b 85       	ldd	r20, Y+11	; 0x0b
     3a2:	5c 85       	ldd	r21, Y+12	; 0x0c
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <__fixsfsi+0x68>
     3a6:	56 95       	lsr	r21
     3a8:	47 95       	ror	r20
     3aa:	37 95       	ror	r19
     3ac:	27 95       	ror	r18
     3ae:	8a 95       	dec	r24
     3b0:	d2 f7       	brpl	.-12     	; 0x3a6 <__fixsfsi+0x60>
     3b2:	66 23       	and	r22, r22
     3b4:	b1 f0       	breq	.+44     	; 0x3e2 <__fixsfsi+0x9c>
     3b6:	50 95       	com	r21
     3b8:	40 95       	com	r20
     3ba:	30 95       	com	r19
     3bc:	21 95       	neg	r18
     3be:	3f 4f       	sbci	r19, 0xFF	; 255
     3c0:	4f 4f       	sbci	r20, 0xFF	; 255
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <__fixsfsi+0x9c>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <__fixsfsi+0x9c>
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	3f ef       	ldi	r19, 0xFF	; 255
     3d4:	4f ef       	ldi	r20, 0xFF	; 255
     3d6:	5f e7       	ldi	r21, 0x7F	; 127
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <__fixsfsi+0x9c>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e8       	ldi	r21, 0x80	; 128
     3e2:	b9 01       	movw	r22, r18
     3e4:	ca 01       	movw	r24, r20
     3e6:	2c 96       	adiw	r28, 0x0c	; 12
     3e8:	e2 e0       	ldi	r30, 0x02	; 2
     3ea:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__epilogue_restores__+0x20>

000003ee <__pack_f>:
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	fc 01       	movw	r30, r24
     3fa:	e4 80       	ldd	r14, Z+4	; 0x04
     3fc:	f5 80       	ldd	r15, Z+5	; 0x05
     3fe:	06 81       	ldd	r16, Z+6	; 0x06
     400:	17 81       	ldd	r17, Z+7	; 0x07
     402:	d1 80       	ldd	r13, Z+1	; 0x01
     404:	80 81       	ld	r24, Z
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	48 f4       	brcc	.+18     	; 0x41c <__pack_f+0x2e>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	a0 e1       	ldi	r26, 0x10	; 16
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	e8 2a       	or	r14, r24
     414:	f9 2a       	or	r15, r25
     416:	0a 2b       	or	r16, r26
     418:	1b 2b       	or	r17, r27
     41a:	a5 c0       	rjmp	.+330    	; 0x566 <__pack_f+0x178>
     41c:	84 30       	cpi	r24, 0x04	; 4
     41e:	09 f4       	brne	.+2      	; 0x422 <__pack_f+0x34>
     420:	9f c0       	rjmp	.+318    	; 0x560 <__pack_f+0x172>
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	21 f4       	brne	.+8      	; 0x42e <__pack_f+0x40>
     426:	ee 24       	eor	r14, r14
     428:	ff 24       	eor	r15, r15
     42a:	87 01       	movw	r16, r14
     42c:	05 c0       	rjmp	.+10     	; 0x438 <__pack_f+0x4a>
     42e:	e1 14       	cp	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	01 05       	cpc	r16, r1
     434:	11 05       	cpc	r17, r1
     436:	19 f4       	brne	.+6      	; 0x43e <__pack_f+0x50>
     438:	e0 e0       	ldi	r30, 0x00	; 0
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	96 c0       	rjmp	.+300    	; 0x56a <__pack_f+0x17c>
     43e:	62 81       	ldd	r22, Z+2	; 0x02
     440:	73 81       	ldd	r23, Z+3	; 0x03
     442:	9f ef       	ldi	r25, 0xFF	; 255
     444:	62 38       	cpi	r22, 0x82	; 130
     446:	79 07       	cpc	r23, r25
     448:	0c f0       	brlt	.+2      	; 0x44c <__pack_f+0x5e>
     44a:	5b c0       	rjmp	.+182    	; 0x502 <__pack_f+0x114>
     44c:	22 e8       	ldi	r18, 0x82	; 130
     44e:	3f ef       	ldi	r19, 0xFF	; 255
     450:	26 1b       	sub	r18, r22
     452:	37 0b       	sbc	r19, r23
     454:	2a 31       	cpi	r18, 0x1A	; 26
     456:	31 05       	cpc	r19, r1
     458:	2c f0       	brlt	.+10     	; 0x464 <__pack_f+0x76>
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	2a c0       	rjmp	.+84     	; 0x4b8 <__pack_f+0xca>
     464:	b8 01       	movw	r22, r16
     466:	a7 01       	movw	r20, r14
     468:	02 2e       	mov	r0, r18
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__pack_f+0x86>
     46c:	76 95       	lsr	r23
     46e:	67 95       	ror	r22
     470:	57 95       	ror	r21
     472:	47 95       	ror	r20
     474:	0a 94       	dec	r0
     476:	d2 f7       	brpl	.-12     	; 0x46c <__pack_f+0x7e>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	a0 e0       	ldi	r26, 0x00	; 0
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	04 c0       	rjmp	.+8      	; 0x48a <__pack_f+0x9c>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	aa 1f       	adc	r26, r26
     488:	bb 1f       	adc	r27, r27
     48a:	2a 95       	dec	r18
     48c:	d2 f7       	brpl	.-12     	; 0x482 <__pack_f+0x94>
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	a1 09       	sbc	r26, r1
     492:	b1 09       	sbc	r27, r1
     494:	8e 21       	and	r24, r14
     496:	9f 21       	and	r25, r15
     498:	a0 23       	and	r26, r16
     49a:	b1 23       	and	r27, r17
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	a1 05       	cpc	r26, r1
     4a0:	b1 05       	cpc	r27, r1
     4a2:	21 f0       	breq	.+8      	; 0x4ac <__pack_f+0xbe>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
     4ac:	9a 01       	movw	r18, r20
     4ae:	ab 01       	movw	r20, r22
     4b0:	28 2b       	or	r18, r24
     4b2:	39 2b       	or	r19, r25
     4b4:	4a 2b       	or	r20, r26
     4b6:	5b 2b       	or	r21, r27
     4b8:	da 01       	movw	r26, r20
     4ba:	c9 01       	movw	r24, r18
     4bc:	8f 77       	andi	r24, 0x7F	; 127
     4be:	90 70       	andi	r25, 0x00	; 0
     4c0:	a0 70       	andi	r26, 0x00	; 0
     4c2:	b0 70       	andi	r27, 0x00	; 0
     4c4:	80 34       	cpi	r24, 0x40	; 64
     4c6:	91 05       	cpc	r25, r1
     4c8:	a1 05       	cpc	r26, r1
     4ca:	b1 05       	cpc	r27, r1
     4cc:	39 f4       	brne	.+14     	; 0x4dc <__pack_f+0xee>
     4ce:	27 ff       	sbrs	r18, 7
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__pack_f+0xf6>
     4d2:	20 5c       	subi	r18, 0xC0	; 192
     4d4:	3f 4f       	sbci	r19, 0xFF	; 255
     4d6:	4f 4f       	sbci	r20, 0xFF	; 255
     4d8:	5f 4f       	sbci	r21, 0xFF	; 255
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <__pack_f+0xf6>
     4dc:	21 5c       	subi	r18, 0xC1	; 193
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	4f 4f       	sbci	r20, 0xFF	; 255
     4e2:	5f 4f       	sbci	r21, 0xFF	; 255
     4e4:	e0 e0       	ldi	r30, 0x00	; 0
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	20 30       	cpi	r18, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	3a 07       	cpc	r19, r26
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	4a 07       	cpc	r20, r26
     4f2:	a0 e4       	ldi	r26, 0x40	; 64
     4f4:	5a 07       	cpc	r21, r26
     4f6:	10 f0       	brcs	.+4      	; 0x4fc <__pack_f+0x10e>
     4f8:	e1 e0       	ldi	r30, 0x01	; 1
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	79 01       	movw	r14, r18
     4fe:	8a 01       	movw	r16, r20
     500:	27 c0       	rjmp	.+78     	; 0x550 <__pack_f+0x162>
     502:	60 38       	cpi	r22, 0x80	; 128
     504:	71 05       	cpc	r23, r1
     506:	64 f5       	brge	.+88     	; 0x560 <__pack_f+0x172>
     508:	fb 01       	movw	r30, r22
     50a:	e1 58       	subi	r30, 0x81	; 129
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	d8 01       	movw	r26, r16
     510:	c7 01       	movw	r24, r14
     512:	8f 77       	andi	r24, 0x7F	; 127
     514:	90 70       	andi	r25, 0x00	; 0
     516:	a0 70       	andi	r26, 0x00	; 0
     518:	b0 70       	andi	r27, 0x00	; 0
     51a:	80 34       	cpi	r24, 0x40	; 64
     51c:	91 05       	cpc	r25, r1
     51e:	a1 05       	cpc	r26, r1
     520:	b1 05       	cpc	r27, r1
     522:	39 f4       	brne	.+14     	; 0x532 <__pack_f+0x144>
     524:	e7 fe       	sbrs	r14, 7
     526:	0d c0       	rjmp	.+26     	; 0x542 <__pack_f+0x154>
     528:	80 e4       	ldi	r24, 0x40	; 64
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	04 c0       	rjmp	.+8      	; 0x53a <__pack_f+0x14c>
     532:	8f e3       	ldi	r24, 0x3F	; 63
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	e8 0e       	add	r14, r24
     53c:	f9 1e       	adc	r15, r25
     53e:	0a 1f       	adc	r16, r26
     540:	1b 1f       	adc	r17, r27
     542:	17 ff       	sbrs	r17, 7
     544:	05 c0       	rjmp	.+10     	; 0x550 <__pack_f+0x162>
     546:	16 95       	lsr	r17
     548:	07 95       	ror	r16
     54a:	f7 94       	ror	r15
     54c:	e7 94       	ror	r14
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	87 e0       	ldi	r24, 0x07	; 7
     552:	16 95       	lsr	r17
     554:	07 95       	ror	r16
     556:	f7 94       	ror	r15
     558:	e7 94       	ror	r14
     55a:	8a 95       	dec	r24
     55c:	d1 f7       	brne	.-12     	; 0x552 <__pack_f+0x164>
     55e:	05 c0       	rjmp	.+10     	; 0x56a <__pack_f+0x17c>
     560:	ee 24       	eor	r14, r14
     562:	ff 24       	eor	r15, r15
     564:	87 01       	movw	r16, r14
     566:	ef ef       	ldi	r30, 0xFF	; 255
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	6e 2f       	mov	r22, r30
     56c:	67 95       	ror	r22
     56e:	66 27       	eor	r22, r22
     570:	67 95       	ror	r22
     572:	90 2f       	mov	r25, r16
     574:	9f 77       	andi	r25, 0x7F	; 127
     576:	d7 94       	ror	r13
     578:	dd 24       	eor	r13, r13
     57a:	d7 94       	ror	r13
     57c:	8e 2f       	mov	r24, r30
     57e:	86 95       	lsr	r24
     580:	49 2f       	mov	r20, r25
     582:	46 2b       	or	r20, r22
     584:	58 2f       	mov	r21, r24
     586:	5d 29       	or	r21, r13
     588:	b7 01       	movw	r22, r14
     58a:	ca 01       	movw	r24, r20
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	08 95       	ret

00000598 <__unpack_f>:
     598:	fc 01       	movw	r30, r24
     59a:	db 01       	movw	r26, r22
     59c:	40 81       	ld	r20, Z
     59e:	51 81       	ldd	r21, Z+1	; 0x01
     5a0:	22 81       	ldd	r18, Z+2	; 0x02
     5a2:	62 2f       	mov	r22, r18
     5a4:	6f 77       	andi	r22, 0x7F	; 127
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	22 1f       	adc	r18, r18
     5aa:	22 27       	eor	r18, r18
     5ac:	22 1f       	adc	r18, r18
     5ae:	93 81       	ldd	r25, Z+3	; 0x03
     5b0:	89 2f       	mov	r24, r25
     5b2:	88 0f       	add	r24, r24
     5b4:	82 2b       	or	r24, r18
     5b6:	28 2f       	mov	r18, r24
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	99 1f       	adc	r25, r25
     5bc:	99 27       	eor	r25, r25
     5be:	99 1f       	adc	r25, r25
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	9c 93       	st	X, r25
     5c4:	11 97       	sbiw	r26, 0x01	; 1
     5c6:	21 15       	cp	r18, r1
     5c8:	31 05       	cpc	r19, r1
     5ca:	a9 f5       	brne	.+106    	; 0x636 <__unpack_f+0x9e>
     5cc:	41 15       	cp	r20, r1
     5ce:	51 05       	cpc	r21, r1
     5d0:	61 05       	cpc	r22, r1
     5d2:	71 05       	cpc	r23, r1
     5d4:	11 f4       	brne	.+4      	; 0x5da <__unpack_f+0x42>
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	37 c0       	rjmp	.+110    	; 0x648 <__unpack_f+0xb0>
     5da:	82 e8       	ldi	r24, 0x82	; 130
     5dc:	9f ef       	ldi	r25, 0xFF	; 255
     5de:	13 96       	adiw	r26, 0x03	; 3
     5e0:	9c 93       	st	X, r25
     5e2:	8e 93       	st	-X, r24
     5e4:	12 97       	sbiw	r26, 0x02	; 2
     5e6:	9a 01       	movw	r18, r20
     5e8:	ab 01       	movw	r20, r22
     5ea:	67 e0       	ldi	r22, 0x07	; 7
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	44 1f       	adc	r20, r20
     5f2:	55 1f       	adc	r21, r21
     5f4:	6a 95       	dec	r22
     5f6:	d1 f7       	brne	.-12     	; 0x5ec <__unpack_f+0x54>
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	8c 93       	st	X, r24
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <__unpack_f+0x80>
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	44 1f       	adc	r20, r20
     604:	55 1f       	adc	r21, r21
     606:	12 96       	adiw	r26, 0x02	; 2
     608:	8d 91       	ld	r24, X+
     60a:	9c 91       	ld	r25, X
     60c:	13 97       	sbiw	r26, 0x03	; 3
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	13 96       	adiw	r26, 0x03	; 3
     612:	9c 93       	st	X, r25
     614:	8e 93       	st	-X, r24
     616:	12 97       	sbiw	r26, 0x02	; 2
     618:	20 30       	cpi	r18, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	38 07       	cpc	r19, r24
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	48 07       	cpc	r20, r24
     622:	80 e4       	ldi	r24, 0x40	; 64
     624:	58 07       	cpc	r21, r24
     626:	58 f3       	brcs	.-42     	; 0x5fe <__unpack_f+0x66>
     628:	14 96       	adiw	r26, 0x04	; 4
     62a:	2d 93       	st	X+, r18
     62c:	3d 93       	st	X+, r19
     62e:	4d 93       	st	X+, r20
     630:	5c 93       	st	X, r21
     632:	17 97       	sbiw	r26, 0x07	; 7
     634:	08 95       	ret
     636:	2f 3f       	cpi	r18, 0xFF	; 255
     638:	31 05       	cpc	r19, r1
     63a:	79 f4       	brne	.+30     	; 0x65a <__unpack_f+0xc2>
     63c:	41 15       	cp	r20, r1
     63e:	51 05       	cpc	r21, r1
     640:	61 05       	cpc	r22, r1
     642:	71 05       	cpc	r23, r1
     644:	19 f4       	brne	.+6      	; 0x64c <__unpack_f+0xb4>
     646:	84 e0       	ldi	r24, 0x04	; 4
     648:	8c 93       	st	X, r24
     64a:	08 95       	ret
     64c:	64 ff       	sbrs	r22, 4
     64e:	03 c0       	rjmp	.+6      	; 0x656 <__unpack_f+0xbe>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	8c 93       	st	X, r24
     654:	12 c0       	rjmp	.+36     	; 0x67a <__unpack_f+0xe2>
     656:	1c 92       	st	X, r1
     658:	10 c0       	rjmp	.+32     	; 0x67a <__unpack_f+0xe2>
     65a:	2f 57       	subi	r18, 0x7F	; 127
     65c:	30 40       	sbci	r19, 0x00	; 0
     65e:	13 96       	adiw	r26, 0x03	; 3
     660:	3c 93       	st	X, r19
     662:	2e 93       	st	-X, r18
     664:	12 97       	sbiw	r26, 0x02	; 2
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	8c 93       	st	X, r24
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	44 0f       	add	r20, r20
     66e:	55 1f       	adc	r21, r21
     670:	66 1f       	adc	r22, r22
     672:	77 1f       	adc	r23, r23
     674:	8a 95       	dec	r24
     676:	d1 f7       	brne	.-12     	; 0x66c <__unpack_f+0xd4>
     678:	70 64       	ori	r23, 0x40	; 64
     67a:	14 96       	adiw	r26, 0x04	; 4
     67c:	4d 93       	st	X+, r20
     67e:	5d 93       	st	X+, r21
     680:	6d 93       	st	X+, r22
     682:	7c 93       	st	X, r23
     684:	17 97       	sbiw	r26, 0x07	; 7
     686:	08 95       	ret

00000688 <__fpcmp_parts_f>:
     688:	1f 93       	push	r17
     68a:	dc 01       	movw	r26, r24
     68c:	fb 01       	movw	r30, r22
     68e:	9c 91       	ld	r25, X
     690:	92 30       	cpi	r25, 0x02	; 2
     692:	08 f4       	brcc	.+2      	; 0x696 <__fpcmp_parts_f+0xe>
     694:	47 c0       	rjmp	.+142    	; 0x724 <__fpcmp_parts_f+0x9c>
     696:	80 81       	ld	r24, Z
     698:	82 30       	cpi	r24, 0x02	; 2
     69a:	08 f4       	brcc	.+2      	; 0x69e <__fpcmp_parts_f+0x16>
     69c:	43 c0       	rjmp	.+134    	; 0x724 <__fpcmp_parts_f+0x9c>
     69e:	94 30       	cpi	r25, 0x04	; 4
     6a0:	51 f4       	brne	.+20     	; 0x6b6 <__fpcmp_parts_f+0x2e>
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	1c 91       	ld	r17, X
     6a6:	84 30       	cpi	r24, 0x04	; 4
     6a8:	99 f5       	brne	.+102    	; 0x710 <__fpcmp_parts_f+0x88>
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
     6ac:	68 2f       	mov	r22, r24
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	61 1b       	sub	r22, r17
     6b2:	71 09       	sbc	r23, r1
     6b4:	3f c0       	rjmp	.+126    	; 0x734 <__fpcmp_parts_f+0xac>
     6b6:	84 30       	cpi	r24, 0x04	; 4
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <__fpcmp_parts_f+0x3a>
     6ba:	92 30       	cpi	r25, 0x02	; 2
     6bc:	31 f4       	brne	.+12     	; 0x6ca <__fpcmp_parts_f+0x42>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	b9 f1       	breq	.+110    	; 0x730 <__fpcmp_parts_f+0xa8>
     6c2:	81 81       	ldd	r24, Z+1	; 0x01
     6c4:	88 23       	and	r24, r24
     6c6:	89 f1       	breq	.+98     	; 0x72a <__fpcmp_parts_f+0xa2>
     6c8:	2d c0       	rjmp	.+90     	; 0x724 <__fpcmp_parts_f+0x9c>
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	1c 91       	ld	r17, X
     6ce:	11 97       	sbiw	r26, 0x01	; 1
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	f1 f0       	breq	.+60     	; 0x710 <__fpcmp_parts_f+0x88>
     6d4:	81 81       	ldd	r24, Z+1	; 0x01
     6d6:	18 17       	cp	r17, r24
     6d8:	d9 f4       	brne	.+54     	; 0x710 <__fpcmp_parts_f+0x88>
     6da:	12 96       	adiw	r26, 0x02	; 2
     6dc:	2d 91       	ld	r18, X+
     6de:	3c 91       	ld	r19, X
     6e0:	13 97       	sbiw	r26, 0x03	; 3
     6e2:	82 81       	ldd	r24, Z+2	; 0x02
     6e4:	93 81       	ldd	r25, Z+3	; 0x03
     6e6:	82 17       	cp	r24, r18
     6e8:	93 07       	cpc	r25, r19
     6ea:	94 f0       	brlt	.+36     	; 0x710 <__fpcmp_parts_f+0x88>
     6ec:	28 17       	cp	r18, r24
     6ee:	39 07       	cpc	r19, r25
     6f0:	bc f0       	brlt	.+46     	; 0x720 <__fpcmp_parts_f+0x98>
     6f2:	14 96       	adiw	r26, 0x04	; 4
     6f4:	8d 91       	ld	r24, X+
     6f6:	9d 91       	ld	r25, X+
     6f8:	0d 90       	ld	r0, X+
     6fa:	bc 91       	ld	r27, X
     6fc:	a0 2d       	mov	r26, r0
     6fe:	24 81       	ldd	r18, Z+4	; 0x04
     700:	35 81       	ldd	r19, Z+5	; 0x05
     702:	46 81       	ldd	r20, Z+6	; 0x06
     704:	57 81       	ldd	r21, Z+7	; 0x07
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	4a 07       	cpc	r20, r26
     70c:	5b 07       	cpc	r21, r27
     70e:	18 f4       	brcc	.+6      	; 0x716 <__fpcmp_parts_f+0x8e>
     710:	11 23       	and	r17, r17
     712:	41 f0       	breq	.+16     	; 0x724 <__fpcmp_parts_f+0x9c>
     714:	0a c0       	rjmp	.+20     	; 0x72a <__fpcmp_parts_f+0xa2>
     716:	82 17       	cp	r24, r18
     718:	93 07       	cpc	r25, r19
     71a:	a4 07       	cpc	r26, r20
     71c:	b5 07       	cpc	r27, r21
     71e:	40 f4       	brcc	.+16     	; 0x730 <__fpcmp_parts_f+0xa8>
     720:	11 23       	and	r17, r17
     722:	19 f0       	breq	.+6      	; 0x72a <__fpcmp_parts_f+0xa2>
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	05 c0       	rjmp	.+10     	; 0x734 <__fpcmp_parts_f+0xac>
     72a:	6f ef       	ldi	r22, 0xFF	; 255
     72c:	7f ef       	ldi	r23, 0xFF	; 255
     72e:	02 c0       	rjmp	.+4      	; 0x734 <__fpcmp_parts_f+0xac>
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	cb 01       	movw	r24, r22
     736:	1f 91       	pop	r17
     738:	08 95       	ret

0000073a <MUART_voidInitialization>:
#include "UART_config.h"

#include <avr/delay.h>
void MUART_voidInitialization(void)
{
	SET_BIT(UCSRB ,UCSRB_TXEN) ;
     73a:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB ,UCSRB_RXEN) ;
     73c:	54 9a       	sbi	0x0a, 4	; 10
	#elif NUMBER_OF_DATA_BITS == UCSZ_6_BIT
	        UCSRC = (1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ0) ;
	#elif NUMBER_OF_DATA_BITS == UCSZ_7_BIT
	        UCSRC = (1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ1) ;
	#elif NUMBER_OF_DATA_BITS == UCSZ_8_BIT
	        UCSRC = (1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ0) | (1<<UCSRC_UCSZ1) ; 
     73e:	86 e8       	ldi	r24, 0x86	; 134
     740:	80 bd       	out	0x20, r24	; 32
			SET_BIT (UCSRB , UCSRB_RXB8) ;
			SET_BIT (UCSRB , UCSRB_UCSZ2) ;
	        UCSRC = (1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ0) ; 
	#endif
	
	UBRRL=51;
     742:	83 e3       	ldi	r24, 0x33	; 51
     744:	89 b9       	out	0x09, r24	; 9
}
     746:	08 95       	ret

00000748 <MUART_voidSendData>:
	
void MUART_voidSendData(u8 A_u8Data)
{
	while(GET_BIT(UCSRA, UCSRA_UDRE)==0);
     748:	5d 9b       	sbis	0x0b, 5	; 11
     74a:	fe cf       	rjmp	.-4      	; 0x748 <MUART_voidSendData>
	

	UDR=A_u8Data ;
     74c:	8c b9       	out	0x0c, r24	; 12
}
     74e:	08 95       	ret

00000750 <MUART_voidSendString>:

void MUART_voidSendString(u8 * A_ptrString)
{
     750:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     752:	40 e6       	ldi	r20, 0x60	; 96
     754:	5a ee       	ldi	r21, 0xEA	; 234
     756:	07 c0       	rjmp	.+14     	; 0x766 <MUART_voidSendString+0x16>
     758:	da 01       	movw	r26, r20
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <MUART_voidSendString+0xa>
	UBRRL=51;
}
	
void MUART_voidSendData(u8 A_u8Data)
{
	while(GET_BIT(UCSRA, UCSRA_UDRE)==0);
     75e:	5d 9b       	sbis	0x0b, 5	; 11
     760:	fe cf       	rjmp	.-4      	; 0x75e <MUART_voidSendString+0xe>
	

	UDR=A_u8Data ;
     762:	ec b9       	out	0x0c, r30	; 12
	u8 LOC_u8Iterator=0;
	while( A_ptrString[LOC_u8Iterator])
	{
		_delay_ms(30);
		MUART_voidSendData( A_ptrString[LOC_u8Iterator]);
		LOC_u8Iterator++;
     764:	2f 5f       	subi	r18, 0xFF	; 255
}

void MUART_voidSendString(u8 * A_ptrString)
{
	u8 LOC_u8Iterator=0;
	while( A_ptrString[LOC_u8Iterator])
     766:	fc 01       	movw	r30, r24
     768:	e2 0f       	add	r30, r18
     76a:	f1 1d       	adc	r31, r1
     76c:	e0 81       	ld	r30, Z
     76e:	ee 23       	and	r30, r30
     770:	99 f7       	brne	.-26     	; 0x758 <MUART_voidSendString+0x8>
		MUART_voidSendData( A_ptrString[LOC_u8Iterator]);
		LOC_u8Iterator++;

	}

}
     772:	08 95       	ret

00000774 <MUART_voidRecieveData>:

u8 MUART_voidRecieveData(void)
{
	while(GET_BIT(UCSRA, UCSRA_RXC)==0);
     774:	5f 9b       	sbis	0x0b, 7	; 11
     776:	fe cf       	rjmp	.-4      	; 0x774 <MUART_voidRecieveData>
	
	return UDR;
     778:	8c b1       	in	r24, 0x0c	; 12
}
     77a:	08 95       	ret

0000077c <MUART_voidRecieveString>:

void MUART_voidRecieveString(u8 * A_ptrString)
{
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	ec 01       	movw	r28, r24
     784:	10 e0       	ldi	r17, 0x00	; 0

}

u8 MUART_voidRecieveData(void)
{
	while(GET_BIT(UCSRA, UCSRA_RXC)==0);
     786:	5f 9b       	sbis	0x0b, 7	; 11
     788:	fe cf       	rjmp	.-4      	; 0x786 <MUART_voidRecieveString+0xa>
	
	return UDR;
     78a:	8c b1       	in	r24, 0x0c	; 12
	//A_ptrString[LOC_u8Iterator]=MUART_voidRecieveData();
	while( LOC_u8Iterator<10)
	{


		A_ptrString[LOC_u8Iterator]=MUART_voidRecieveData();
     78c:	88 83       	st	Y, r24
		CLCD_voidInitialization();
     78e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <CLCD_voidInitialization>
		CLCD_voidSendData(A_ptrString[LOC_u8Iterator]);
     792:	88 81       	ld	r24, Y
     794:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
		LOC_u8Iterator++;
     798:	1f 5f       	subi	r17, 0xFF	; 255

		A_ptrString[LOC_u8Iterator]='\0';
     79a:	19 82       	std	Y+1, r1	; 0x01
     79c:	21 96       	adiw	r28, 0x01	; 1

void MUART_voidRecieveString(u8 * A_ptrString)
{
	u8 LOC_u8Iterator=0;
	//A_ptrString[LOC_u8Iterator]=MUART_voidRecieveData();
	while( LOC_u8Iterator<10)
     79e:	1a 30       	cpi	r17, 0x0A	; 10
     7a0:	91 f7       	brne	.-28     	; 0x786 <MUART_voidRecieveString+0xa>
		LOC_u8Iterator++;

		A_ptrString[LOC_u8Iterator]='\0';

	}
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	08 95       	ret

000007aa <MTWI_voidInitialization>:
#include "TWI_config.h"

void MTWI_voidInitialization(void)
{
	/****** Boudrate ********/
	TWBR= (((CPU_CLK_FREQ)/(SCL_FREQ))-16)/(2*(4^PRESCULAR_MODE));
     7aa:	10 b8       	out	0x00, r1	; 0
	//TWBR=72;
	#if TWIE_MODE == TWIE_ENABLE
	SET_BIT(TWCR, TWCR_TWIE);
	#elif TWIE_MODE == TWIE_DISABLE
	CLR_BIT(TWCR, TWCR_TWIE);
     7ac:	86 b7       	in	r24, 0x36	; 54
     7ae:	8e 7f       	andi	r24, 0xFE	; 254
     7b0:	86 bf       	out	0x36, r24	; 54
	#endif
	
	
	#if TWI_MODE == TWI_ENABLE
	SET_BIT(TWCR, TWCR_TWIE);
     7b2:	86 b7       	in	r24, 0x36	; 54
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	86 bf       	out	0x36, r24	; 54
	#elif TWI_MODE == TWI_DISABLE
	CLR_BIT(TWCR, TWCR_TWIE);
	#endif
	
}
     7b8:	08 95       	ret

000007ba <MTWI_u8SendStartCondition>:

u8 MTWI_u8SendStartCondition(void)
{
	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN);
     7ba:	84 ea       	ldi	r24, 0xA4	; 164
     7bc:	86 bf       	out	0x36, r24	; 54
	/****Wait for TWINT Flag set. This indicates that the START condition has been transmitted  ****/
	while (!(TWCR & (1<<TWCR_TWINT)));
     7be:	06 b6       	in	r0, 0x36	; 54
     7c0:	07 fe       	sbrs	r0, 7
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <MTWI_u8SendStartCondition+0x4>
	
	return (TWSR & 0xF8);
     7c4:	81 b1       	in	r24, 0x01	; 1
}
     7c6:	88 7f       	andi	r24, 0xF8	; 248
     7c8:	08 95       	ret

000007ca <MTWI_u8SendSlaveAddress>:

u8 MTWI_u8SendSlaveAddress(u8 A_u8SlaveAddress, u8 A_u8ReadWrite)
{
	TWDR = A_u8SlaveAddress<<1;
     7ca:	88 0f       	add	r24, r24
     7cc:	83 b9       	out	0x03, r24	; 3
	
	if(A_u8ReadWrite== READ)
     7ce:	66 23       	and	r22, r22
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <MTWI_u8SendSlaveAddress+0xc>
	{
		SET_BIT(TWDR, DIO_PIN0);
     7d2:	18 9a       	sbi	0x03, 0	; 3
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <MTWI_u8SendSlaveAddress+0x12>
	}
	else if(A_u8ReadWrite== WRITE)
     7d6:	61 30       	cpi	r22, 0x01	; 1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <MTWI_u8SendSlaveAddress+0x12>
	{
		CLR_BIT(TWDR, DIO_PIN0);
     7da:	18 98       	cbi	0x03, 0	; 3
	}
	/*** Clear TWINT bit in TWCR to start transmission of address  ***/
    TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
     7dc:	84 e8       	ldi	r24, 0x84	; 132
     7de:	86 bf       	out	0x36, r24	; 54
	
	/*** ensure that start condition is closed**/
	CLR_BIT(TWCR, TWCR_TWSTA);
     7e0:	86 b7       	in	r24, 0x36	; 54
     7e2:	8f 7d       	andi	r24, 0xDF	; 223
     7e4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWCR_TWINT)));
     7e6:	06 b6       	in	r0, 0x36	; 54
     7e8:	07 fe       	sbrs	r0, 7
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <MTWI_u8SendSlaveAddress+0x1c>
	
	return (TWSR & 0xF8);
     7ec:	81 b1       	in	r24, 0x01	; 1
	
}
     7ee:	88 7f       	andi	r24, 0xF8	; 248
     7f0:	08 95       	ret

000007f2 <MTWI_u8SendData>:
u8 MTWI_u8SendData(u8 A_u8Data)
{
	TWDR = A_u8Data;
     7f2:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
     7f4:	84 e8       	ldi	r24, 0x84	; 132
     7f6:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWCR_TWINT)));
     7f8:	06 b6       	in	r0, 0x36	; 54
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <MTWI_u8SendData+0x6>
	return (TWSR & 0xF8);
     7fe:	81 b1       	in	r24, 0x01	; 1
}
     800:	88 7f       	andi	r24, 0xF8	; 248
     802:	08 95       	ret

00000804 <MTWI_u8StopCondition>:

u8 MTWI_u8StopCondition(void)
{
	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTO);
     804:	84 e9       	ldi	r24, 0x94	; 148
     806:	86 bf       	out	0x36, r24	; 54
	return (TWSR & 0xF8);
     808:	81 b1       	in	r24, 0x01	; 1
}
     80a:	88 7f       	andi	r24, 0xF8	; 248
     80c:	08 95       	ret

0000080e <MTWI_u8GetStatus>:

u8 MTWI_u8GetStatus(void)
{
	return (TWSR & 0xF8);
     80e:	81 b1       	in	r24, 0x01	; 1
}
     810:	88 7f       	andi	r24, 0xF8	; 248
     812:	08 95       	ret

00000814 <MTWI_u8RecieveData>:

u8 MTWI_u8RecieveData(u8 * A_PtrData, u8 A_u8Acknoledge)
{
     814:	fc 01       	movw	r30, r24
	if(ACK== A_u8Acknoledge)
     816:	66 23       	and	r22, r22
     818:	11 f4       	brne	.+4      	; 0x81e <MTWI_u8RecieveData+0xa>
	{
		TWCR =(1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWEA);
     81a:	84 ec       	ldi	r24, 0xC4	; 196
     81c:	06 c0       	rjmp	.+12     	; 0x82a <MTWI_u8RecieveData+0x16>
	}
	if(NOT_ACK== A_u8Acknoledge)
     81e:	61 30       	cpi	r22, 0x01	; 1
     820:	29 f4       	brne	.+10     	; 0x82c <MTWI_u8RecieveData+0x18>
	{
		TWCR =(1<<TWCR_TWINT)|(1<<TWCR_TWEN);
     822:	84 e8       	ldi	r24, 0x84	; 132
     824:	86 bf       	out	0x36, r24	; 54
		CLR_BIT(TWCR, TWCR_TWEA);
     826:	86 b7       	in	r24, 0x36	; 54
     828:	8f 7b       	andi	r24, 0xBF	; 191
     82a:	86 bf       	out	0x36, r24	; 54
	}
	
	 while (!(TWCR & (1<<TWCR_TWINT)));
     82c:	06 b6       	in	r0, 0x36	; 54
     82e:	07 fe       	sbrs	r0, 7
     830:	fd cf       	rjmp	.-6      	; 0x82c <MTWI_u8RecieveData+0x18>
	 
	 *A_PtrData=TWDR;
     832:	83 b1       	in	r24, 0x03	; 3
     834:	80 83       	st	Z, r24
	 
	return (TWSR & 0xF8);
     836:	81 b1       	in	r24, 0x01	; 1
}
     838:	88 7f       	andi	r24, 0xF8	; 248
     83a:	08 95       	ret

0000083c <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDirection)
{

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((A_u8PortNo <= DIO_PORTD) && (A_u8PinNo <= DIO_PIN7))
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	08 f0       	brcs	.+2      	; 0x842 <MDIO_voidSetPinDirection+0x6>
     840:	75 c0       	rjmp	.+234    	; 0x92c <__stack+0xcd>
     842:	68 30       	cpi	r22, 0x08	; 8
     844:	08 f0       	brcs	.+2      	; 0x848 <MDIO_voidSetPinDirection+0xc>
     846:	72 c0       	rjmp	.+228    	; 0x92c <__stack+0xcd>
	{
		if ( A_u8PinDirection == DIO_PIN_OUTPUT )
     848:	41 30       	cpi	r20, 0x01	; 1
     84a:	b1 f5       	brne	.+108    	; 0x8b8 <__stack+0x59>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	99 f0       	breq	.+38     	; 0x876 <__stack+0x17>
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	30 f0       	brcs	.+12     	; 0x860 <__stack+0x1>
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	d1 f0       	breq	.+52     	; 0x88c <__stack+0x2d>
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	09 f0       	breq	.+2      	; 0x85e <MDIO_voidSetPinDirection+0x22>
     85c:	67 c0       	rjmp	.+206    	; 0x92c <__stack+0xcd>
     85e:	21 c0       	rjmp	.+66     	; 0x8a2 <__stack+0x43>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,A_u8PinNo); break;
     860:	2a b3       	in	r18, 0x1a	; 26
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	6a 95       	dec	r22
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	28 2b       	or	r18, r24
     872:	2a bb       	out	0x1a, r18	; 26
     874:	08 95       	ret
			case DIO_PORTB: SET_BIT(DDRB_Register,A_u8PinNo); break;
     876:	27 b3       	in	r18, 0x17	; 23
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	6a 95       	dec	r22
     884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
     886:	28 2b       	or	r18, r24
     888:	27 bb       	out	0x17, r18	; 23
     88a:	08 95       	ret
			case DIO_PORTC: SET_BIT(DDRC_Register,A_u8PinNo); break;
     88c:	24 b3       	in	r18, 0x14	; 20
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	6a 95       	dec	r22
     89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
     89c:	28 2b       	or	r18, r24
     89e:	24 bb       	out	0x14, r18	; 20
     8a0:	08 95       	ret
			case DIO_PORTD: SET_BIT(DDRD_Register,A_u8PinNo); break;
     8a2:	21 b3       	in	r18, 0x11	; 17
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	6a 95       	dec	r22
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	28 2b       	or	r18, r24
     8b4:	21 bb       	out	0x11, r18	; 17
     8b6:	08 95       	ret
			}
		}

		else if ( A_u8PinDirection == DIO_PIN_INPUT )
     8b8:	44 23       	and	r20, r20
     8ba:	c1 f5       	brne	.+112    	; 0x92c <__stack+0xcd>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	99 f0       	breq	.+38     	; 0x8e6 <__stack+0x87>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	28 f0       	brcs	.+10     	; 0x8ce <__stack+0x6f>
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	d9 f0       	breq	.+54     	; 0x8fe <__stack+0x9f>
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	81 f5       	brne	.+96     	; 0x92c <__stack+0xcd>
     8cc:	24 c0       	rjmp	.+72     	; 0x916 <__stack+0xb7>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,A_u8PinNo); break;
     8ce:	2a b3       	in	r18, 0x1a	; 26
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	6a 95       	dec	r22
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
     8de:	80 95       	com	r24
     8e0:	82 23       	and	r24, r18
     8e2:	8a bb       	out	0x1a, r24	; 26
     8e4:	08 95       	ret
			case DIO_PORTB: CLR_BIT(DDRB_Register,A_u8PinNo); break;
     8e6:	27 b3       	in	r18, 0x17	; 23
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	6a 95       	dec	r22
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	80 95       	com	r24
     8f8:	82 23       	and	r24, r18
     8fa:	87 bb       	out	0x17, r24	; 23
     8fc:	08 95       	ret
			case DIO_PORTC: CLR_BIT(DDRC_Register,A_u8PinNo); break;
     8fe:	24 b3       	in	r18, 0x14	; 20
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	6a 95       	dec	r22
     90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
     90e:	80 95       	com	r24
     910:	82 23       	and	r24, r18
     912:	84 bb       	out	0x14, r24	; 20
     914:	08 95       	ret
			case DIO_PORTD: CLR_BIT(DDRD_Register,A_u8PinNo); break;
     916:	21 b3       	in	r18, 0x11	; 17
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0xc3>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <__stack+0xbf>
     926:	80 95       	com	r24
     928:	82 23       	and	r24, r18
     92a:	81 bb       	out	0x11, r24	; 17
     92c:	08 95       	ret

0000092e <MDIO_voidSetPinValue>:
	}
}

void MDIO_voidSetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 A_u8Value )
{	
		if(A_u8Value==DIO_PIN_HIGH)
     92e:	41 30       	cpi	r20, 0x01	; 1
     930:	b1 f5       	brne	.+108    	; 0x99e <MDIO_voidSetPinValue+0x70>
		{
			switch (A_u8PortNo)
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	99 f0       	breq	.+38     	; 0x95c <MDIO_voidSetPinValue+0x2e>
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	30 f0       	brcs	.+12     	; 0x946 <MDIO_voidSetPinValue+0x18>
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	d1 f0       	breq	.+52     	; 0x972 <MDIO_voidSetPinValue+0x44>
     93e:	83 30       	cpi	r24, 0x03	; 3
     940:	09 f0       	breq	.+2      	; 0x944 <MDIO_voidSetPinValue+0x16>
     942:	67 c0       	rjmp	.+206    	; 0xa12 <MDIO_voidSetPinValue+0xe4>
     944:	21 c0       	rjmp	.+66     	; 0x988 <MDIO_voidSetPinValue+0x5a>
			{
			case DIO_PORTA: SET_BIT(PORTA,A_u8PinNo); break;
     946:	2b b3       	in	r18, 0x1b	; 27
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	02 c0       	rjmp	.+4      	; 0x952 <MDIO_voidSetPinValue+0x24>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	6a 95       	dec	r22
     954:	e2 f7       	brpl	.-8      	; 0x94e <MDIO_voidSetPinValue+0x20>
     956:	28 2b       	or	r18, r24
     958:	2b bb       	out	0x1b, r18	; 27
     95a:	08 95       	ret
			case DIO_PORTB: SET_BIT(PORTB,A_u8PinNo); break;
     95c:	28 b3       	in	r18, 0x18	; 24
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <MDIO_voidSetPinValue+0x3a>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <MDIO_voidSetPinValue+0x36>
     96c:	28 2b       	or	r18, r24
     96e:	28 bb       	out	0x18, r18	; 24
     970:	08 95       	ret
			case DIO_PORTC: SET_BIT(PORTC,A_u8PinNo); break;
     972:	25 b3       	in	r18, 0x15	; 21
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 c0       	rjmp	.+4      	; 0x97e <MDIO_voidSetPinValue+0x50>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	6a 95       	dec	r22
     980:	e2 f7       	brpl	.-8      	; 0x97a <MDIO_voidSetPinValue+0x4c>
     982:	28 2b       	or	r18, r24
     984:	25 bb       	out	0x15, r18	; 21
     986:	08 95       	ret
			case DIO_PORTD: SET_BIT(PORTD,A_u8PinNo); break;
     988:	22 b3       	in	r18, 0x12	; 18
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	02 c0       	rjmp	.+4      	; 0x994 <MDIO_voidSetPinValue+0x66>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	6a 95       	dec	r22
     996:	e2 f7       	brpl	.-8      	; 0x990 <MDIO_voidSetPinValue+0x62>
     998:	28 2b       	or	r18, r24
     99a:	22 bb       	out	0x12, r18	; 18
     99c:	08 95       	ret
			}
		}
		else if(A_u8Value==DIO_PIN_LOW)
     99e:	44 23       	and	r20, r20
     9a0:	c1 f5       	brne	.+112    	; 0xa12 <MDIO_voidSetPinValue+0xe4>
		{
			switch (A_u8PortNo)
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	99 f0       	breq	.+38     	; 0x9cc <MDIO_voidSetPinValue+0x9e>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	28 f0       	brcs	.+10     	; 0x9b4 <MDIO_voidSetPinValue+0x86>
     9aa:	82 30       	cpi	r24, 0x02	; 2
     9ac:	d9 f0       	breq	.+54     	; 0x9e4 <MDIO_voidSetPinValue+0xb6>
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	81 f5       	brne	.+96     	; 0xa12 <MDIO_voidSetPinValue+0xe4>
     9b2:	24 c0       	rjmp	.+72     	; 0x9fc <MDIO_voidSetPinValue+0xce>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
     9b4:	2b b3       	in	r18, 0x1b	; 27
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <MDIO_voidSetPinValue+0x92>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	6a 95       	dec	r22
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <MDIO_voidSetPinValue+0x8e>
     9c4:	80 95       	com	r24
     9c6:	82 23       	and	r24, r18
     9c8:	8b bb       	out	0x1b, r24	; 27
     9ca:	08 95       	ret
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
     9cc:	28 b3       	in	r18, 0x18	; 24
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <MDIO_voidSetPinValue+0xaa>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	6a 95       	dec	r22
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <MDIO_voidSetPinValue+0xa6>
     9dc:	80 95       	com	r24
     9de:	82 23       	and	r24, r18
     9e0:	88 bb       	out	0x18, r24	; 24
     9e2:	08 95       	ret
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
     9e4:	25 b3       	in	r18, 0x15	; 21
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <MDIO_voidSetPinValue+0xc2>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	6a 95       	dec	r22
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <MDIO_voidSetPinValue+0xbe>
     9f4:	80 95       	com	r24
     9f6:	82 23       	and	r24, r18
     9f8:	85 bb       	out	0x15, r24	; 21
     9fa:	08 95       	ret
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
     9fc:	22 b3       	in	r18, 0x12	; 18
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <MDIO_voidSetPinValue+0xda>
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	6a 95       	dec	r22
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <MDIO_voidSetPinValue+0xd6>
     a0c:	80 95       	com	r24
     a0e:	82 23       	and	r24, r18
     a10:	82 bb       	out	0x12, r24	; 18
     a12:	08 95       	ret

00000a14 <MDIO_voidClrPinValue>:
		}
}

void MDIO_voidClrPinValue (u8 A_u8PortNo , u8 A_u8PinNo )
{
	switch (A_u8PortNo)
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	99 f0       	breq	.+38     	; 0xa3e <MDIO_voidClrPinValue+0x2a>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <MDIO_voidClrPinValue+0x12>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	d9 f0       	breq	.+54     	; 0xa56 <MDIO_voidClrPinValue+0x42>
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	81 f5       	brne	.+96     	; 0xa84 <MDIO_voidClrPinValue+0x70>
     a24:	24 c0       	rjmp	.+72     	; 0xa6e <MDIO_voidClrPinValue+0x5a>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
     a26:	2b b3       	in	r18, 0x1b	; 27
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <MDIO_voidClrPinValue+0x1e>
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	6a 95       	dec	r22
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <MDIO_voidClrPinValue+0x1a>
     a36:	80 95       	com	r24
     a38:	82 23       	and	r24, r18
     a3a:	8b bb       	out	0x1b, r24	; 27
     a3c:	08 95       	ret
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
     a3e:	28 b3       	in	r18, 0x18	; 24
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <MDIO_voidClrPinValue+0x36>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	6a 95       	dec	r22
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <MDIO_voidClrPinValue+0x32>
     a4e:	80 95       	com	r24
     a50:	82 23       	and	r24, r18
     a52:	88 bb       	out	0x18, r24	; 24
     a54:	08 95       	ret
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
     a56:	25 b3       	in	r18, 0x15	; 21
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <MDIO_voidClrPinValue+0x4e>
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	6a 95       	dec	r22
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <MDIO_voidClrPinValue+0x4a>
     a66:	80 95       	com	r24
     a68:	82 23       	and	r24, r18
     a6a:	85 bb       	out	0x15, r24	; 21
     a6c:	08 95       	ret
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
     a6e:	22 b3       	in	r18, 0x12	; 18
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <MDIO_voidClrPinValue+0x66>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <MDIO_voidClrPinValue+0x62>
     a7e:	80 95       	com	r24
     a80:	82 23       	and	r24, r18
     a82:	82 bb       	out	0x12, r24	; 18
     a84:	08 95       	ret

00000a86 <MDIO_voidGetPinValue>:
			}
}

void MDIO_voidGetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 * A_PtrData )
{
     a86:	fa 01       	movw	r30, r20
	switch (A_u8PortNo)
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	49 f0       	breq	.+18     	; 0xa9e <MDIO_voidGetPinValue+0x18>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	28 f0       	brcs	.+10     	; 0xa9a <MDIO_voidGetPinValue+0x14>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	39 f0       	breq	.+14     	; 0xaa2 <MDIO_voidGetPinValue+0x1c>
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	51 f5       	brne	.+84     	; 0xaec <MDIO_voidGetPinValue+0x66>
     a98:	17 c0       	rjmp	.+46     	; 0xac8 <MDIO_voidGetPinValue+0x42>
			{
			case DIO_PORTA: *A_PtrData=GET_BIT(PINA,A_u8PinNo); break;
     a9a:	29 b3       	in	r18, 0x19	; 25
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <MDIO_voidGetPinValue+0x1e>
			case DIO_PORTB: *A_PtrData=GET_BIT(PINB,A_u8PinNo); break;
     a9e:	26 b3       	in	r18, 0x16	; 22
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <MDIO_voidGetPinValue+0x1e>
			case DIO_PORTC: *A_PtrData=GET_BIT(PINC,A_u8PinNo); break;
     aa2:	23 b3       	in	r18, 0x13	; 19
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	06 2e       	mov	r0, r22
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <MDIO_voidGetPinValue+0x2a>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <MDIO_voidGetPinValue+0x26>
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	82 23       	and	r24, r18
     ab8:	93 23       	and	r25, r19
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <MDIO_voidGetPinValue+0x3a>
     abc:	95 95       	asr	r25
     abe:	87 95       	ror	r24
     ac0:	6a 95       	dec	r22
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <MDIO_voidGetPinValue+0x36>
     ac4:	80 83       	st	Z, r24
     ac6:	08 95       	ret
			case DIO_PORTD: *A_PtrData=GET_BIT(PIND,A_u8PinNo); break;
     ac8:	20 b3       	in	r18, 0x10	; 16
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	06 2e       	mov	r0, r22
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <MDIO_voidGetPinValue+0x50>
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <MDIO_voidGetPinValue+0x4c>
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	82 23       	and	r24, r18
     ade:	93 23       	and	r25, r19
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <MDIO_voidGetPinValue+0x60>
     ae2:	95 95       	asr	r25
     ae4:	87 95       	ror	r24
     ae6:	6a 95       	dec	r22
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <MDIO_voidGetPinValue+0x5c>
     aea:	80 83       	st	Z, r24
     aec:	08 95       	ret

00000aee <MDIO_voidTogglePinValue>:
			}
}

void MDIO_voidTogglePinValue (u8 A_u8PortNo , u8 A_u8PinNo)
{
	switch (A_u8PortNo)
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	91 f0       	breq	.+36     	; 0xb16 <MDIO_voidTogglePinValue+0x28>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	28 f0       	brcs	.+10     	; 0xb00 <MDIO_voidTogglePinValue+0x12>
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	c9 f0       	breq	.+50     	; 0xb2c <MDIO_voidTogglePinValue+0x3e>
     afa:	83 30       	cpi	r24, 0x03	; 3
     afc:	61 f5       	brne	.+88     	; 0xb56 <MDIO_voidTogglePinValue+0x68>
     afe:	21 c0       	rjmp	.+66     	; 0xb42 <MDIO_voidTogglePinValue+0x54>
			{
			case DIO_PORTA: TOG_BIT(PORTA,A_u8PinNo); break;
     b00:	2b b3       	in	r18, 0x1b	; 27
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <MDIO_voidTogglePinValue+0x1e>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	6a 95       	dec	r22
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <MDIO_voidTogglePinValue+0x1a>
     b10:	28 27       	eor	r18, r24
     b12:	2b bb       	out	0x1b, r18	; 27
     b14:	08 95       	ret
			case DIO_PORTB: TOG_BIT(PORTB,A_u8PinNo); break;
     b16:	28 b3       	in	r18, 0x18	; 24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <MDIO_voidTogglePinValue+0x34>
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	6a 95       	dec	r22
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <MDIO_voidTogglePinValue+0x30>
     b26:	28 27       	eor	r18, r24
     b28:	28 bb       	out	0x18, r18	; 24
     b2a:	08 95       	ret
			case DIO_PORTC: TOG_BIT(PORTC,A_u8PinNo); break;
     b2c:	25 b3       	in	r18, 0x15	; 21
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <MDIO_voidTogglePinValue+0x4a>
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	6a 95       	dec	r22
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <MDIO_voidTogglePinValue+0x46>
     b3c:	28 27       	eor	r18, r24
     b3e:	25 bb       	out	0x15, r18	; 21
     b40:	08 95       	ret
			case DIO_PORTD: TOG_BIT(PORTD,A_u8PinNo); break;
     b42:	22 b3       	in	r18, 0x12	; 18
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <MDIO_voidTogglePinValue+0x60>
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	6a 95       	dec	r22
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <MDIO_voidTogglePinValue+0x5c>
     b52:	28 27       	eor	r18, r24
     b54:	22 bb       	out	0x12, r18	; 18
     b56:	08 95       	ret

00000b58 <MDIO_voidSetPortDirection>:
}


void MDIO_voidSetPortDirection (u8 A_u8PortNo , u8 A_u8PinDirection)
{
	switch (A_u8PortNo)
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	49 f0       	breq	.+18     	; 0xb6e <MDIO_voidSetPortDirection+0x16>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	28 f0       	brcs	.+10     	; 0xb6a <MDIO_voidSetPortDirection+0x12>
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	39 f0       	breq	.+14     	; 0xb72 <MDIO_voidSetPortDirection+0x1a>
     b64:	83 30       	cpi	r24, 0x03	; 3
     b66:	41 f4       	brne	.+16     	; 0xb78 <MDIO_voidSetPortDirection+0x20>
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <MDIO_voidSetPortDirection+0x1e>
			{
			case DIO_PORTA: DDRA_Register= A_u8PinDirection; break;
     b6a:	6a bb       	out	0x1a, r22	; 26
     b6c:	08 95       	ret
			case DIO_PORTB: DDRB_Register= A_u8PinDirection; break;
     b6e:	67 bb       	out	0x17, r22	; 23
     b70:	08 95       	ret
			case DIO_PORTC: DDRC_Register= A_u8PinDirection; break;
     b72:	64 bb       	out	0x14, r22	; 20
     b74:	08 95       	ret
			case DIO_PORTD: DDRD_Register= A_u8PinDirection; break;
     b76:	61 bb       	out	0x11, r22	; 17
     b78:	08 95       	ret

00000b7a <MDIO_voidSetPortValue>:
			}
}

void MDIO_voidSetPortValue   (u8 A_u8PortNo  , u8 A_u8Value)
{
	switch (A_u8PortNo)
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	49 f0       	breq	.+18     	; 0xb90 <MDIO_voidSetPortValue+0x16>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	28 f0       	brcs	.+10     	; 0xb8c <MDIO_voidSetPortValue+0x12>
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	39 f0       	breq	.+14     	; 0xb94 <MDIO_voidSetPortValue+0x1a>
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	41 f4       	brne	.+16     	; 0xb9a <MDIO_voidSetPortValue+0x20>
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <MDIO_voidSetPortValue+0x1e>
			{
			case DIO_PORTA: PORTA= A_u8Value; break;
     b8c:	6b bb       	out	0x1b, r22	; 27
     b8e:	08 95       	ret
			case DIO_PORTB: PORTB= A_u8Value; break;
     b90:	68 bb       	out	0x18, r22	; 24
     b92:	08 95       	ret
			case DIO_PORTC: PORTC= A_u8Value; break;
     b94:	65 bb       	out	0x15, r22	; 21
     b96:	08 95       	ret
			case DIO_PORTD: PORTD= A_u8Value; break;
     b98:	62 bb       	out	0x12, r22	; 18
     b9a:	08 95       	ret

00000b9c <MDIO_voidClrPortValue>:
			}
}

void MDIO_voidClrPortValue (u8 A_u8PortNo)
{
	switch (A_u8PortNo)
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	49 f0       	breq	.+18     	; 0xbb2 <MDIO_voidClrPortValue+0x16>
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	28 f0       	brcs	.+10     	; 0xbae <MDIO_voidClrPortValue+0x12>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <MDIO_voidClrPortValue+0x1a>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	41 f4       	brne	.+16     	; 0xbbc <MDIO_voidClrPortValue+0x20>
     bac:	06 c0       	rjmp	.+12     	; 0xbba <MDIO_voidClrPortValue+0x1e>
			{
			case DIO_PORTA: PORTA= DIO_PORT_LOW; break;
     bae:	1b ba       	out	0x1b, r1	; 27
     bb0:	08 95       	ret
			case DIO_PORTB: PORTB= DIO_PORT_LOW; break;
     bb2:	18 ba       	out	0x18, r1	; 24
     bb4:	08 95       	ret
			case DIO_PORTC: PORTC= DIO_PORT_LOW; break;
     bb6:	15 ba       	out	0x15, r1	; 21
     bb8:	08 95       	ret
			case DIO_PORTD: PORTD= DIO_PORT_LOW; break;
     bba:	12 ba       	out	0x12, r1	; 18
     bbc:	08 95       	ret

00000bbe <MDIO_voidGetPortValue>:
			}
}

void MDIO_voidGetPortValue (u8 A_u8PortNo  , u8 * A_PtrData )
{
     bbe:	fb 01       	movw	r30, r22
	switch (A_u8PortNo)
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <MDIO_voidGetPortValue+0x18>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	28 f0       	brcs	.+10     	; 0xbd2 <MDIO_voidGetPortValue+0x14>
     bc8:	82 30       	cpi	r24, 0x02	; 2
     bca:	39 f0       	breq	.+14     	; 0xbda <MDIO_voidGetPortValue+0x1c>
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	51 f4       	brne	.+20     	; 0xbe4 <MDIO_voidGetPortValue+0x26>
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <MDIO_voidGetPortValue+0x22>
			{
			case DIO_PORTA: *A_PtrData= DIO_PINA; break;
     bd2:	89 b3       	in	r24, 0x19	; 25
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <MDIO_voidGetPortValue+0x1e>
			case DIO_PORTB: *A_PtrData= DIO_PINB; break;
     bd6:	86 b3       	in	r24, 0x16	; 22
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <MDIO_voidGetPortValue+0x1e>
			case DIO_PORTC: *A_PtrData= DIO_PINC; break;
     bda:	83 b3       	in	r24, 0x13	; 19
     bdc:	80 83       	st	Z, r24
     bde:	08 95       	ret
			case DIO_PORTD: *A_PtrData= DIO_PIND; break;
     be0:	80 b3       	in	r24, 0x10	; 16
     be2:	80 83       	st	Z, r24
     be4:	08 95       	ret

00000be6 <MDIO_voidTogglePortValue>:
			}
}

void MDIO_voidTogglePortValue (u8 A_u8PortNo)
{
		switch (A_u8PortNo)
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	59 f0       	breq	.+22     	; 0xc00 <MDIO_voidTogglePortValue+0x1a>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	28 f0       	brcs	.+10     	; 0xbf8 <MDIO_voidTogglePortValue+0x12>
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	59 f0       	breq	.+22     	; 0xc08 <MDIO_voidTogglePortValue+0x22>
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	81 f4       	brne	.+32     	; 0xc16 <MDIO_voidTogglePortValue+0x30>
     bf6:	0c c0       	rjmp	.+24     	; 0xc10 <MDIO_voidTogglePortValue+0x2a>
			{
			case DIO_PORTA: PORTA =~ PORTA; break;
     bf8:	8b b3       	in	r24, 0x1b	; 27
     bfa:	80 95       	com	r24
     bfc:	8b bb       	out	0x1b, r24	; 27
     bfe:	08 95       	ret
			case DIO_PORTB: PORTB =~ PORTB; break;
     c00:	88 b3       	in	r24, 0x18	; 24
     c02:	80 95       	com	r24
     c04:	88 bb       	out	0x18, r24	; 24
     c06:	08 95       	ret
			case DIO_PORTC: PORTC =~ PORTC; break;
     c08:	85 b3       	in	r24, 0x15	; 21
     c0a:	80 95       	com	r24
     c0c:	85 bb       	out	0x15, r24	; 21
     c0e:	08 95       	ret
			case DIO_PORTD: PORTD =~ PORTD; break;
     c10:	82 b3       	in	r24, 0x12	; 18
     c12:	80 95       	com	r24
     c14:	82 bb       	out	0x12, r24	; 18
     c16:	08 95       	ret

00000c18 <MDIO_voidWriteHighNibbles>:
			}
}
void MDIO_voidWriteHighNibbles ( u8 A_u8PORT , u8 A_u8value  )
{
	switch(A_u8PORT)
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	71 f0       	breq	.+28     	; 0xc38 <MDIO_voidWriteHighNibbles+0x20>
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	28 f0       	brcs	.+10     	; 0xc2a <MDIO_voidWriteHighNibbles+0x12>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	89 f0       	breq	.+34     	; 0xc46 <MDIO_voidWriteHighNibbles+0x2e>
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	e1 f4       	brne	.+56     	; 0xc60 <MDIO_voidWriteHighNibbles+0x48>
     c28:	15 c0       	rjmp	.+42     	; 0xc54 <MDIO_voidWriteHighNibbles+0x3c>
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
     c2a:	8b b3       	in	r24, 0x1b	; 27
     c2c:	8f 70       	andi	r24, 0x0F	; 15
     c2e:	8b bb       	out	0x1b, r24	; 27
			PORTA|=A_u8value;			//Set only the high nibble of the port A by the given value
     c30:	8b b3       	in	r24, 0x1b	; 27
     c32:	86 2b       	or	r24, r22
     c34:	8b bb       	out	0x1b, r24	; 27
     c36:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
     c38:	88 b3       	in	r24, 0x18	; 24
     c3a:	8f 70       	andi	r24, 0x0F	; 15
     c3c:	88 bb       	out	0x18, r24	; 24
			PORTB|=A_u8value;
     c3e:	88 b3       	in	r24, 0x18	; 24
     c40:	86 2b       	or	r24, r22
     c42:	88 bb       	out	0x18, r24	; 24
     c44:	08 95       	ret
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
     c46:	85 b3       	in	r24, 0x15	; 21
     c48:	8f 70       	andi	r24, 0x0F	; 15
     c4a:	85 bb       	out	0x15, r24	; 21
			PORTC|=A_u8value;
     c4c:	85 b3       	in	r24, 0x15	; 21
     c4e:	86 2b       	or	r24, r22
     c50:	85 bb       	out	0x15, r24	; 21
     c52:	08 95       	ret
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
     c54:	82 b3       	in	r24, 0x12	; 18
     c56:	8f 70       	andi	r24, 0x0F	; 15
     c58:	82 bb       	out	0x12, r24	; 18
			PORTD|=A_u8value;
     c5a:	82 b3       	in	r24, 0x12	; 18
     c5c:	86 2b       	or	r24, r22
     c5e:	82 bb       	out	0x12, r24	; 18
     c60:	08 95       	ret

00000c62 <MDIO_voidWriteLowNibbles>:
			break ;
		}
}
void MDIO_voidWriteLowNibbles  ( u8 A_u8PORT , u8 A_u8value )
{
	switch(A_u8PORT)
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	71 f0       	breq	.+28     	; 0xc82 <MDIO_voidWriteLowNibbles+0x20>
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	28 f0       	brcs	.+10     	; 0xc74 <MDIO_voidWriteLowNibbles+0x12>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	89 f0       	breq	.+34     	; 0xc90 <MDIO_voidWriteLowNibbles+0x2e>
     c6e:	83 30       	cpi	r24, 0x03	; 3
     c70:	e1 f4       	brne	.+56     	; 0xcaa <MDIO_voidWriteLowNibbles+0x48>
     c72:	15 c0       	rjmp	.+42     	; 0xc9e <MDIO_voidWriteLowNibbles+0x3c>
		{
		case DIO_PORTA :
			PORTA&=0xf0;                   // make sure the low bits = 0000
     c74:	8b b3       	in	r24, 0x1b	; 27
     c76:	80 7f       	andi	r24, 0xF0	; 240
     c78:	8b bb       	out	0x1b, r24	; 27
			PORTA|=A_u8value;			//Set only the low nibble of the port A by the given value
     c7a:	8b b3       	in	r24, 0x1b	; 27
     c7c:	86 2b       	or	r24, r22
     c7e:	8b bb       	out	0x1b, r24	; 27
     c80:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB&=0xf0;                 //Set only the low nibble of the port B by the given value
     c82:	88 b3       	in	r24, 0x18	; 24
     c84:	80 7f       	andi	r24, 0xF0	; 240
     c86:	88 bb       	out	0x18, r24	; 24
			PORTB|=A_u8value;
     c88:	88 b3       	in	r24, 0x18	; 24
     c8a:	86 2b       	or	r24, r22
     c8c:	88 bb       	out	0x18, r24	; 24
     c8e:	08 95       	ret
			break ;
		case DIO_PORTC :
			PORTC&=0xf0;                 //Set only the low nibble of the port C by the given value
     c90:	85 b3       	in	r24, 0x15	; 21
     c92:	80 7f       	andi	r24, 0xF0	; 240
     c94:	85 bb       	out	0x15, r24	; 21
			PORTC|=A_u8value;
     c96:	85 b3       	in	r24, 0x15	; 21
     c98:	86 2b       	or	r24, r22
     c9a:	85 bb       	out	0x15, r24	; 21
     c9c:	08 95       	ret
			break ;
		case DIO_PORTD:
			PORTD&=0xf0;                 //Set only the low nibble of the port D by the given value
     c9e:	82 b3       	in	r24, 0x12	; 18
     ca0:	80 7f       	andi	r24, 0xF0	; 240
     ca2:	82 bb       	out	0x12, r24	; 18
			PORTD|=A_u8value;
     ca4:	82 b3       	in	r24, 0x12	; 18
     ca6:	86 2b       	or	r24, r22
     ca8:	82 bb       	out	0x12, r24	; 18
     caa:	08 95       	ret

00000cac <HLED_voidLEDToggle>:
{
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED_ACTIVE_LOW);
}

void HLED_voidLEDToggle(LED_CONFIG LED)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <HLED_voidLEDToggle+0x6>
     cb2:	0f 92       	push	r0
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	96 2f       	mov	r25, r22
     cba:	69 83       	std	Y+1, r22	; 0x01
     cbc:	67 2f       	mov	r22, r23
     cbe:	7a 83       	std	Y+2, r23	; 0x02
     cc0:	8b 83       	std	Y+3, r24	; 0x03
	MDIO_voidTogglePinValue (LED.port , LED.pin);
     cc2:	89 2f       	mov	r24, r25
     cc4:	0e 94 77 05 	call	0xaee	; 0xaee <MDIO_voidTogglePinValue>
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <HLED_voidLEDIOff>:
{
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED.activeMode);
}

void HLED_voidLEDIOff(LED_CONFIG LED)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <HLED_voidLEDIOff+0x6>
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	96 2f       	mov	r25, r22
     ce2:	69 83       	std	Y+1, r22	; 0x01
     ce4:	67 2f       	mov	r22, r23
     ce6:	7a 83       	std	Y+2, r23	; 0x02
     ce8:	8b 83       	std	Y+3, r24	; 0x03
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED_ACTIVE_LOW);
     cea:	89 2f       	mov	r24, r25
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <HLED_voidLEDOn>:
	MDIO_voidSetPinDirection (LED.port , LED.pin , LED.activeMode);

}

void HLED_voidLEDOn(LED_CONFIG LED)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <HLED_voidLEDOn+0x6>
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	96 2f       	mov	r25, r22
     d0c:	69 83       	std	Y+1, r22	; 0x01
     d0e:	67 2f       	mov	r22, r23
     d10:	7a 83       	std	Y+2, r23	; 0x02
     d12:	48 2f       	mov	r20, r24
     d14:	8b 83       	std	Y+3, r24	; 0x03
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED.activeMode);
     d16:	89 2f       	mov	r24, r25
     d18:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
}
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <HLED_voidLEDIntialization>:

#include "LED_interface.h"
#include "LED_private.h"

void HLED_voidLEDIntialization(LED_CONFIG LED)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <HLED_voidLEDIntialization+0x6>
     d2e:	0f 92       	push	r0
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	96 2f       	mov	r25, r22
     d36:	69 83       	std	Y+1, r22	; 0x01
     d38:	67 2f       	mov	r22, r23
     d3a:	7a 83       	std	Y+2, r23	; 0x02
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 83       	std	Y+3, r24	; 0x03
	MDIO_voidSetPinDirection (LED.port , LED.pin , LED.activeMode);
     d40:	89 2f       	mov	r24, r25
     d42:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>

}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <HKPD_u8GetPressedKey>:
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN7, DIO_PIN_HIGH);

}

u8 HKPD_u8GetPressedKey(void)
{
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	bf 92       	push	r11
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	bb 24       	eor	r11, r11
     d70:	ba 94       	dec	r11
     d72:	cc 24       	eor	r12, r12
     d74:	dd 24       	eor	r13, r13
	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
     d76:	7e 01       	movw	r14, r28
     d78:	08 94       	sec
     d7a:	e1 1c       	adc	r14, r1
     d7c:	f1 1c       	adc	r15, r1
     d7e:	98 ec       	ldi	r25, 0xC8	; 200
     d80:	89 2e       	mov	r8, r25
     d82:	91 2c       	mov	r9, r1
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN7, DIO_PIN_HIGH);

}

u8 HKPD_u8GetPressedKey(void)
{
     d84:	0c 2d       	mov	r16, r12
     d86:	0c 5f       	subi	r16, 0xFC	; 252
	u8 LOC_u8Col;
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	60 2f       	mov	r22, r16
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	a7 01       	movw	r20, r14
     d98:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>
			if(LOC_u8GetPressed==0)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	88 23       	and	r24, r24
     da0:	11 f4       	brne	.+4      	; 0xda6 <HKPD_u8GetPressedKey+0x54>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	1d c0       	rjmp	.+58     	; 0xde0 <HKPD_u8GetPressedKey+0x8e>
	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	a7 01       	movw	r20, r14
     dac:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>
			if(LOC_u8GetPressed==0)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	88 23       	and	r24, r24
     db4:	11 f4       	brne	.+4      	; 0xdba <HKPD_u8GetPressedKey+0x68>
     db6:	11 e0       	ldi	r17, 0x01	; 1
     db8:	13 c0       	rjmp	.+38     	; 0xde0 <HKPD_u8GetPressedKey+0x8e>
	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	62 e0       	ldi	r22, 0x02	; 2
     dbe:	a7 01       	movw	r20, r14
     dc0:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>
			if(LOC_u8GetPressed==0)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	88 23       	and	r24, r24
     dc8:	11 f4       	brne	.+4      	; 0xdce <HKPD_u8GetPressedKey+0x7c>
     dca:	12 e0       	ldi	r17, 0x02	; 2
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <HKPD_u8GetPressedKey+0x8e>
	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	a7 01       	movw	r20, r14
     dd4:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>
			if(LOC_u8GetPressed==0)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	88 23       	and	r24, r24
     ddc:	19 f5       	brne	.+70     	; 0xe24 <HKPD_u8GetPressedKey+0xd2>
     dde:	13 e0       	ldi	r17, 0x03	; 3
     de0:	88 ee       	ldi	r24, 0xE8	; 232
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	f4 01       	movw	r30, r8
     de6:	31 97       	sbiw	r30, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <HKPD_u8GetPressedKey+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	d9 f7       	brne	.-10     	; 0xde4 <HKPD_u8GetPressedKey+0x92>
			{
				_delay_ms(100);
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	61 2f       	mov	r22, r17
     df2:	a7 01       	movw	r20, r14
     df4:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>
				if( LOC_u8GetPressed==DIO_PIN_LOW)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	88 23       	and	r24, r24
     dfc:	59 f4       	brne	.+22     	; 0xe14 <HKPD_u8GetPressedKey+0xc2>
				{
					LOC_u8ReturnDatat= KPD_u8Button[LOC_u8Row - KPD_ROW_PIN0][LOC_u8Col - KPD_COL_PIN4];
     dfe:	e1 2f       	mov	r30, r17
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	ec 0d       	add	r30, r12
     e0c:	fd 1d       	adc	r31, r13
     e0e:	e6 51       	subi	r30, 0x16	; 22
     e10:	fd 4f       	sbci	r31, 0xFD	; 253
     e12:	b0 80       	ld	r11, Z
				}
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
				while( DIO_PIN_LOW == LOC_u8GetPressed )
				{

					MDIO_voidGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	61 2f       	mov	r22, r17
     e18:	a7 01       	movw	r20, r14
     e1a:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>
				if( LOC_u8GetPressed==DIO_PIN_LOW)
				{
					LOC_u8ReturnDatat= KPD_u8Button[LOC_u8Row - KPD_ROW_PIN0][LOC_u8Col - KPD_COL_PIN4];
				}
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
				while( DIO_PIN_LOW == LOC_u8GetPressed )
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	88 23       	and	r24, r24
     e22:	c1 f3       	breq	.-16     	; 0xe14 <HKPD_u8GetPressedKey+0xc2>
				}

				break ;
			}
		}
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	60 2f       	mov	r22, r16
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
     e2e:	08 94       	sec
     e30:	c1 1c       	adc	r12, r1
     e32:	d1 1c       	adc	r13, r1
	u8 LOC_u8ReturnDatat= NOT_PRESSED;
	u8 LOC_u8GetPressed;
	u8 LOC_u8Col;
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	c8 16       	cp	r12, r24
     e38:	d1 04       	cpc	r13, r1
     e3a:	09 f0       	breq	.+2      	; 0xe3e <HKPD_u8GetPressedKey+0xec>
     e3c:	a3 cf       	rjmp	.-186    	; 0xd84 <HKPD_u8GetPressedKey+0x32>
		}
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
	}
	return LOC_u8ReturnDatat;

}
     e3e:	8b 2d       	mov	r24, r11
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	bf 90       	pop	r11
     e54:	9f 90       	pop	r9
     e56:	8f 90       	pop	r8
     e58:	08 95       	ret

00000e5a <HKPD_voidInitialization>:
#include <avr/delay.h>

void HKPD_voidInitialization(void)
{
	/*******************1- Connect pullup of the first four pins "ROW"*************************************/
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN0, DIO_PIN_INPUT);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN1, DIO_PIN_INPUT);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN2, DIO_PIN_INPUT);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	62 e0       	ldi	r22, 0x02	; 2
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN3, DIO_PIN_INPUT);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	63 e0       	ldi	r22, 0x03	; 3
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN0, DIO_PIN_HIGH);
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN1, DIO_PIN_HIGH);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN2, DIO_PIN_HIGH);
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN3, DIO_PIN_HIGH);
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	63 e0       	ldi	r22, 0x03	; 3
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>

	/*********************2- Make the columns pins as an output pin****************************************/ 
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN4, DIO_PIN_OUTPUT);
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	64 e0       	ldi	r22, 0x04	; 4
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN5, DIO_PIN_OUTPUT);
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN6, DIO_PIN_OUTPUT);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	66 e0       	ldi	r22, 0x06	; 6
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN7, DIO_PIN_OUTPUT);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	67 e0       	ldi	r22, 0x07	; 7
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN4, DIO_PIN_HIGH);
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	64 e0       	ldi	r22, 0x04	; 4
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN5, DIO_PIN_HIGH);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	65 e0       	ldi	r22, 0x05	; 5
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN6, DIO_PIN_HIGH);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	66 e0       	ldi	r22, 0x06	; 6
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN7, DIO_PIN_HIGH);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	67 e0       	ldi	r22, 0x07	; 7
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>

}
     efa:	08 95       	ret

00000efc <HEEPROM_u8ReadData>:
	MTWI_u8StopCondition();
}
	

u8 HEEPROM_u8ReadData(u16 A_u16Address)
{
     efc:	1f 93       	push	r17
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	18 2f       	mov	r17, r24
	u8 LOC_u8Data=0;
     f0a:	19 82       	std	Y+1, r1	; 0x01
	
	/*** 1- start condition ****/
	MTWI_u8SendStartCondition();
     f0c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <MTWI_u8SendStartCondition>
	/*** 2- Send address  slave ****/
	MTWI_u8SendSlaveAddress((0b1010000), WRITE);
     f10:	80 e5       	ldi	r24, 0x50	; 80
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 e5 03 	call	0x7ca	; 0x7ca <MTWI_u8SendSlaveAddress>
	MTWI_u8SendData((u8) A_u16Address);
     f18:	81 2f       	mov	r24, r17
     f1a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <MTWI_u8SendData>

	/*** 3- Restart *******/
	MTWI_u8SendStartCondition();
     f1e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <MTWI_u8SendStartCondition>
	/*** 4- Send address  slave ****/
	MTWI_u8SendSlaveAddress((0b1010000), READ);
     f22:	80 e5       	ldi	r24, 0x50	; 80
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	0e 94 e5 03 	call	0x7ca	; 0x7ca <MTWI_u8SendSlaveAddress>
	/*** 5- Recieve Data ****/
	MTWI_u8RecieveData( &LOC_u8Data,NOT_ACK);
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 0a 04 	call	0x814	; 0x814 <MTWI_u8RecieveData>
	/*** 6- Stop condition ***/
	MTWI_u8StopCondition();
     f34:	0e 94 02 04 	call	0x804	; 0x804 <MTWI_u8StopCondition>

	return LOC_u8Data;
}
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	1f 91       	pop	r17
     f42:	08 95       	ret

00000f44 <HEEPROM_voidWriteData>:
{
	MTWI_voidInitialization();
}

void HEEPROM_voidWriteData(u16 A_u16Address, u8 A_u8Data)
{
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	18 2f       	mov	r17, r24
     f4a:	06 2f       	mov	r16, r22
	/*** 1- start condition ****/
	MTWI_u8SendStartCondition();
     f4c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <MTWI_u8SendStartCondition>
	/*** 2- Send address  slave ****/
	MTWI_u8SendSlaveAddress((0b1010000) , WRITE);
     f50:	80 e5       	ldi	r24, 0x50	; 80
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	0e 94 e5 03 	call	0x7ca	; 0x7ca <MTWI_u8SendSlaveAddress>
	MTWI_u8SendData((u8)A_u16Address);
     f58:	81 2f       	mov	r24, r17
     f5a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <MTWI_u8SendData>
	/*** 3- Send Data ****/
	MTWI_u8SendData(A_u8Data);
     f5e:	80 2f       	mov	r24, r16
     f60:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <MTWI_u8SendData>
	/*** 4- Stop condition ***/
	MTWI_u8StopCondition();
     f64:	0e 94 02 04 	call	0x804	; 0x804 <MTWI_u8StopCondition>
}
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <HEEPROM_voidInitialization>:

#include"EEPROM_interface.h"

void HEEPROM_voidInitialization(void)
{
	MTWI_voidInitialization();
     f6e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <MTWI_voidInitialization>
}
     f72:	08 95       	ret

00000f74 <CLCD_voidShiftCursor>:
 }

 void CLCD_voidShiftCursor (u8 copy_u8Row, u8 copy_u8Column)
 {

 }
     f74:	08 95       	ret

00000f76 <CLCD_voidSendFallingEdge>:
 }
#endif


 void CLCD_voidSendFallingEdge (void)
 {
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_HIGH);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
     f84:	00 ed       	ldi	r16, 0xD0	; 208
     f86:	17 e0       	ldi	r17, 0x07	; 7
     f88:	c8 01       	movw	r24, r16
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <CLCD_voidSendFallingEdge+0x14>
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_LOW);
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	66 e0       	ldi	r22, 0x06	; 6
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
     f98:	c8 01       	movw	r24, r16
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <CLCD_voidSendFallingEdge+0x24>
    _delay_ms(1);
 }
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	08 95       	ret

00000fa4 <CLCD_voidSendCommand>:
	 CLCD_voidSendFallingEdge ();
  }


void CLCD_voidSendCommand( u8 copy_u8Command)
{
     fa4:	68 2f       	mov	r22, r24
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT,copy_u8Command);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_LOW);
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	67 e0       	ldi	r22, 0x07	; 7
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	65 e0       	ldi	r22, 0x05	; 5
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
     fc0:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendFallingEdge>
     fc4:	80 ed       	ldi	r24, 0xD0	; 208
     fc6:	97 e0       	ldi	r25, 0x07	; 7
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <CLCD_voidSendCommand+0x24>

	#endif

	_delay_ms(1);
	 
}
     fcc:	08 95       	ret

00000fce <CLCD_voidSetPosition>:
#endif

#if 1
 void CLCD_voidSetPosition ( u8 copy_u8Row, u8 copy_u8Column)
 {
 	if (copy_u8Row == 0)
     fce:	88 23       	and	r24, r24
     fd0:	29 f4       	brne	.+10     	; 0xfdc <CLCD_voidSetPosition+0xe>
 	{
 		CLCD_voidSendCommand(0x80|copy_u8Column);
     fd2:	86 2f       	mov	r24, r22
     fd4:	80 68       	ori	r24, 0x80	; 128
     fd6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
     fda:	08 95       	ret
 	}
 	if (copy_u8Row == 1)
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	21 f4       	brne	.+8      	; 0xfe8 <CLCD_voidSetPosition+0x1a>
 	{
 		CLCD_voidSendCommand(0x80+0x40+copy_u8Column);
     fe0:	86 2f       	mov	r24, r22
     fe2:	80 54       	subi	r24, 0x40	; 64
     fe4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
     fe8:	08 95       	ret

00000fea <CLCD_voidClearScreen>:
	_delay_ms(1);
	 
}
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand( LCD_DISPLAY_CLEAR);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	9e e4       	ldi	r25, 0x4E	; 78
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <CLCD_voidClearScreen+0xa>
	_delay_ms(10);
}
     ff8:	08 95       	ret

00000ffa <CLCD_voidSendData>:
	  
 }
#endif
	 
 void CLCD_voidSendData( u8 copy_u8Data)
  {
     ffa:	1f 93       	push	r17
     ffc:	18 2f       	mov	r17, r24
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	67 e0       	ldi	r22, 0x07	; 7
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	65 e0       	ldi	r22, 0x05	; 5
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
	 MDIO_voidSetPortValue(CLCD_DATA_PORT, copy_u8Data);
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	61 2f       	mov	r22, r17
    1016:	0e 94 bd 05 	call	0xb7a	; 0xb7a <MDIO_voidSetPortValue>
	 CLCD_voidSendFallingEdge ();
    101a:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendFallingEdge>
  }
    101e:	1f 91       	pop	r17
    1020:	08 95       	ret

00001022 <CLCD_voidSendFloat>:
    	  CLCD_voidSendData(cpy_u32num+'0');
      }
}

void CLCD_voidSendFloat(f64 cpy_f64Float) 
{
    1022:	2f 92       	push	r2
    1024:	3f 92       	push	r3
    1026:	4f 92       	push	r4
    1028:	5f 92       	push	r5
    102a:	6f 92       	push	r6
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <CLCD_voidSendFloat+0x26>
    1048:	00 d0       	rcall	.+0      	; 0x104a <CLCD_voidSendFloat+0x28>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	7b 01       	movw	r14, r22
    1050:	8c 01       	movw	r16, r24
	  u32 cpy_u32power=1;
	       s32 cpy_u32num=cpy_f64Float;
	       s32 i=0;

	      if(cpy_f64Float==0)
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	0e 94 43 01 	call	0x286	; 0x286 <__eqsf2>
    105e:	88 23       	and	r24, r24
    1060:	21 f4       	brne	.+8      	; 0x106a <CLCD_voidSendFloat+0x48>
	      {
	    	  CLCD_voidSendData('0');
    1062:	80 e3       	ldi	r24, 0x30	; 48
    1064:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1068:	9a c0       	rjmp	.+308    	; 0x119e <CLCD_voidSendFloat+0x17c>
	    	  return;
	      }
	      if(cpy_f64Float<0)
    106a:	c8 01       	movw	r24, r16
    106c:	b7 01       	movw	r22, r14
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__ltsf2>
    107a:	87 fd       	sbrc	r24, 7
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <CLCD_voidSendFloat+0x62>
    107e:	17 01       	movw	r2, r14
    1080:	28 01       	movw	r4, r16
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <CLCD_voidSendFloat+0x74>
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
    1084:	17 01       	movw	r2, r14
    1086:	28 01       	movw	r4, r16
    1088:	57 fa       	bst	r5, 7
    108a:	50 94       	com	r5
    108c:	57 f8       	bld	r5, 7
    108e:	50 94       	com	r5
	    	  CLCD_voidSendData('-');
    1090:	8d e2       	ldi	r24, 0x2D	; 45
    1092:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
}

void CLCD_voidSendFloat(f64 cpy_f64Float) 
{
	  u32 cpy_u32power=1;
	       s32 cpy_u32num=cpy_f64Float;
    1096:	c8 01       	movw	r24, r16
    1098:	b7 01       	movw	r22, r14
    109a:	0e 94 a3 01 	call	0x346	; 0x346 <__fixsfsi>
    109e:	7b 01       	movw	r14, r22
    10a0:	8c 01       	movw	r16, r24
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	a8 2e       	mov	r10, r24
    10a6:	b1 2c       	mov	r11, r1
    10a8:	c1 2c       	mov	r12, r1
    10aa:	d1 2c       	mov	r13, r1
    10ac:	66 24       	eor	r6, r6
    10ae:	77 24       	eor	r7, r7
    10b0:	43 01       	movw	r8, r6
    10b2:	1b c0       	rjmp	.+54     	; 0x10ea <CLCD_voidSendFloat+0xc8>
	    	  CLCD_voidSendData('-');
	      }
	      while(cpy_u32num)//1234
	      {

	    	  cpy_u32num=cpy_u32num/10;
    10b4:	c8 01       	movw	r24, r16
    10b6:	b7 01       	movw	r22, r14
    10b8:	2a e0       	ldi	r18, 0x0A	; 10
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	0e 94 a6 18 	call	0x314c	; 0x314c <__divmodsi4>
    10c4:	c9 01       	movw	r24, r18
    10c6:	da 01       	movw	r26, r20
    10c8:	7c 01       	movw	r14, r24
    10ca:	8d 01       	movw	r16, r26
	    	   i++;//4
    10cc:	08 94       	sec
    10ce:	61 1c       	adc	r6, r1
    10d0:	71 1c       	adc	r7, r1
    10d2:	81 1c       	adc	r8, r1
    10d4:	91 1c       	adc	r9, r1
	    	  cpy_u32power=cpy_u32power*10;      //10000
    10d6:	c6 01       	movw	r24, r12
    10d8:	b5 01       	movw	r22, r10
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	0e 94 65 18 	call	0x30ca	; 0x30ca <__mulsi3>
    10e6:	5b 01       	movw	r10, r22
    10e8:	6c 01       	movw	r12, r24
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
	    	  CLCD_voidSendData('-');
	      }
	      while(cpy_u32num)//1234
    10ea:	e1 14       	cp	r14, r1
    10ec:	f1 04       	cpc	r15, r1
    10ee:	01 05       	cpc	r16, r1
    10f0:	11 05       	cpc	r17, r1
    10f2:	01 f7       	brne	.-64     	; 0x10b4 <CLCD_voidSendFloat+0x92>

	    	  cpy_u32num=cpy_u32num/10;
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
    10f4:	c2 01       	movw	r24, r4
    10f6:	b1 01       	movw	r22, r2
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e4       	ldi	r19, 0x40	; 64
    10fc:	4c e1       	ldi	r20, 0x1C	; 28
    10fe:	56 e4       	ldi	r21, 0x46	; 70
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__mulsf3>
    1104:	0e 94 a3 01 	call	0x346	; 0x346 <__fixsfsi>
    1108:	1b 01       	movw	r2, r22
    110a:	2c 01       	movw	r4, r24
	      cpy_u32power=cpy_u32power*1000;
    110c:	c6 01       	movw	r24, r12
    110e:	b5 01       	movw	r22, r10
    1110:	28 ee       	ldi	r18, 0xE8	; 232
    1112:	33 e0       	ldi	r19, 0x03	; 3
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	0e 94 65 18 	call	0x30ca	; 0x30ca <__mulsi3>
    111c:	5b 01       	movw	r10, r22
    111e:	6c 01       	movw	r12, r24
    1120:	39 c0       	rjmp	.+114    	; 0x1194 <CLCD_voidSendFloat+0x172>
	      while(cpy_u32power>0)
	      {
	    	  cpy_u32num=int_num/cpy_u32power;  //01234/1000=0
    1122:	29 82       	std	Y+1, r2	; 0x01
    1124:	3a 82       	std	Y+2, r3	; 0x02
    1126:	4b 82       	std	Y+3, r4	; 0x03
    1128:	5c 82       	std	Y+4, r5	; 0x04
	    	  int_num%=cpy_u32power;
	    	  cpy_u32power/=10;
               if(i==0)
    112a:	61 14       	cp	r6, r1
    112c:	71 04       	cpc	r7, r1
    112e:	81 04       	cpc	r8, r1
    1130:	91 04       	cpc	r9, r1
    1132:	19 f4       	brne	.+6      	; 0x113a <CLCD_voidSendFloat+0x118>
               {
            	   CLCD_voidSendData('.');
    1134:	8e e2       	ldi	r24, 0x2E	; 46
    1136:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
	      cpy_u32power=cpy_u32power*1000;
	      while(cpy_u32power>0)
	      {
	    	  cpy_u32num=int_num/cpy_u32power;  //01234/1000=0
	    	  int_num%=cpy_u32power;
    113a:	b1 01       	movw	r22, r2
    113c:	c2 01       	movw	r24, r4
    113e:	a6 01       	movw	r20, r12
    1140:	95 01       	movw	r18, r10
    1142:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    1146:	1b 01       	movw	r2, r22
    1148:	2c 01       	movw	r4, r24
	    	  cpy_u32power/=10;
    114a:	c6 01       	movw	r24, r12
    114c:	b5 01       	movw	r22, r10
    114e:	2a e0       	ldi	r18, 0x0A	; 10
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    115a:	12 2f       	mov	r17, r18
    115c:	03 2f       	mov	r16, r19
    115e:	f4 2e       	mov	r15, r20
    1160:	e5 2e       	mov	r14, r21
               if(i==0)
               {
            	   CLCD_voidSendData('.');

               }
               i--;
    1162:	08 94       	sec
    1164:	61 08       	sbc	r6, r1
    1166:	71 08       	sbc	r7, r1
    1168:	81 08       	sbc	r8, r1
    116a:	91 08       	sbc	r9, r1
	    	  CLCD_voidSendData(cpy_u32num+'0');
    116c:	69 81       	ldd	r22, Y+1	; 0x01
    116e:	7a 81       	ldd	r23, Y+2	; 0x02
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	a6 01       	movw	r20, r12
    1176:	95 01       	movw	r18, r10
    1178:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    117c:	82 2f       	mov	r24, r18
    117e:	80 5d       	subi	r24, 0xD0	; 208
    1180:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1184:	21 2f       	mov	r18, r17
    1186:	30 2f       	mov	r19, r16
    1188:	4f 2d       	mov	r20, r15
    118a:	5e 2d       	mov	r21, r14
    118c:	c9 01       	movw	r24, r18
    118e:	da 01       	movw	r26, r20
    1190:	5c 01       	movw	r10, r24
    1192:	6d 01       	movw	r12, r26
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
	      cpy_u32power=cpy_u32power*1000;
	      while(cpy_u32power>0)
    1194:	a1 14       	cp	r10, r1
    1196:	b1 04       	cpc	r11, r1
    1198:	c1 04       	cpc	r12, r1
    119a:	d1 04       	cpc	r13, r1
    119c:	11 f6       	brne	.-124    	; 0x1122 <CLCD_voidSendFloat+0x100>
		cpy_f64Float-=(s32)cpy_f64Float;//0.4    0

	}
*/

}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	5f 90       	pop	r5
    11c4:	4f 90       	pop	r4
    11c6:	3f 90       	pop	r3
    11c8:	2f 90       	pop	r2
    11ca:	08 95       	ret

000011cc <CLCD_voidSendNumber>:
 void CLCD_voidShiftCursor (u8 copy_u8Row, u8 copy_u8Column)
 {

 }
void CLCD_voidSendNumber(s32 cpy_u32Number) //123
{      u32 cpy_u32power=1;
    11cc:	6f 92       	push	r6
    11ce:	7f 92       	push	r7
    11d0:	8f 92       	push	r8
    11d2:	9f 92       	push	r9
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	7b 01       	movw	r14, r22
    11e6:	8c 01       	movw	r16, r24
       s32 cpy_u32num=cpy_u32Number;
      if(cpy_u32Number==0)
    11e8:	61 15       	cp	r22, r1
    11ea:	71 05       	cpc	r23, r1
    11ec:	81 05       	cpc	r24, r1
    11ee:	91 05       	cpc	r25, r1
    11f0:	21 f4       	brne	.+8      	; 0x11fa <CLCD_voidSendNumber+0x2e>
      {
    	  CLCD_voidSendData('0');
    11f2:	80 e3       	ldi	r24, 0x30	; 48
    11f4:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    11f8:	5d c0       	rjmp	.+186    	; 0x12b4 <CLCD_voidSendNumber+0xe8>
    	  return;
      }
      if(cpy_u32Number<0)
    11fa:	97 fd       	sbrc	r25, 7
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <CLCD_voidSendNumber+0x38>
    11fe:	5b 01       	movw	r10, r22
    1200:	6c 01       	movw	r12, r24
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <CLCD_voidSendNumber+0x4c>
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    1204:	aa 24       	eor	r10, r10
    1206:	bb 24       	eor	r11, r11
    1208:	65 01       	movw	r12, r10
    120a:	a6 1a       	sub	r10, r22
    120c:	b7 0a       	sbc	r11, r23
    120e:	c8 0a       	sbc	r12, r24
    1210:	d9 0a       	sbc	r13, r25
    	  CLCD_voidSendData('-');
    1212:	8d e2       	ldi	r24, 0x2D	; 45
    1214:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	69 2e       	mov	r6, r25
    121c:	71 2c       	mov	r7, r1
    121e:	81 2c       	mov	r8, r1
    1220:	91 2c       	mov	r9, r1
      }
      while(cpy_u32num)
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    1222:	c8 01       	movw	r24, r16
    1224:	b7 01       	movw	r22, r14
    1226:	2a e0       	ldi	r18, 0x0A	; 10
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	0e 94 a6 18 	call	0x314c	; 0x314c <__divmodsi4>
    1232:	c9 01       	movw	r24, r18
    1234:	da 01       	movw	r26, r20
    1236:	7c 01       	movw	r14, r24
    1238:	8d 01       	movw	r16, r26
    	  cpy_u32power=cpy_u32power*10;      //10000
    123a:	c4 01       	movw	r24, r8
    123c:	b3 01       	movw	r22, r6
    123e:	2a e0       	ldi	r18, 0x0A	; 10
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	0e 94 65 18 	call	0x30ca	; 0x30ca <__mulsi3>
    124a:	3b 01       	movw	r6, r22
    124c:	4c 01       	movw	r8, r24
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    	  CLCD_voidSendData('-');
      }
      while(cpy_u32num)
    124e:	e1 14       	cp	r14, r1
    1250:	f1 04       	cpc	r15, r1
    1252:	01 05       	cpc	r16, r1
    1254:	11 05       	cpc	r17, r1
    1256:	29 f7       	brne	.-54     	; 0x1222 <CLCD_voidSendNumber+0x56>
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
    1258:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    125c:	c9 01       	movw	r24, r18
    125e:	da 01       	movw	r26, r20
    1260:	3c 01       	movw	r6, r24
    1262:	4d 01       	movw	r8, r26
    1264:	22 c0       	rjmp	.+68     	; 0x12aa <CLCD_voidSendNumber+0xde>
      while(cpy_u32power>0)
      {
    	  cpy_u32num=cpy_u32Number/cpy_u32power;  //01234/1000=0
    1266:	b5 01       	movw	r22, r10
    1268:	c6 01       	movw	r24, r12
    126a:	a4 01       	movw	r20, r8
    126c:	93 01       	movw	r18, r6
    126e:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    1272:	12 2f       	mov	r17, r18
    	  cpy_u32Number%=cpy_u32power;
    1274:	b5 01       	movw	r22, r10
    1276:	c6 01       	movw	r24, r12
    1278:	a4 01       	movw	r20, r8
    127a:	93 01       	movw	r18, r6
    127c:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    1280:	ac 01       	movw	r20, r24
    1282:	cb 01       	movw	r24, r22
    1284:	da 01       	movw	r26, r20
    1286:	5c 01       	movw	r10, r24
    1288:	6d 01       	movw	r12, r26
    	  cpy_u32power/=10;
    128a:	c4 01       	movw	r24, r8
    128c:	b3 01       	movw	r22, r6
    128e:	2a e0       	ldi	r18, 0x0A	; 10
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	0e 94 84 18 	call	0x3108	; 0x3108 <__udivmodsi4>
    129a:	c9 01       	movw	r24, r18
    129c:	da 01       	movw	r26, r20
    129e:	3c 01       	movw	r6, r24
    12a0:	4d 01       	movw	r8, r26

    	  CLCD_voidSendData(cpy_u32num+'0');
    12a2:	81 2f       	mov	r24, r17
    12a4:	80 5d       	subi	r24, 0xD0	; 208
    12a6:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
      while(cpy_u32power>0)
    12aa:	61 14       	cp	r6, r1
    12ac:	71 04       	cpc	r7, r1
    12ae:	81 04       	cpc	r8, r1
    12b0:	91 04       	cpc	r9, r1
    12b2:	c9 f6       	brne	.-78     	; 0x1266 <CLCD_voidSendNumber+0x9a>
    	  cpy_u32Number%=cpy_u32power;
    	  cpy_u32power/=10;

    	  CLCD_voidSendData(cpy_u32num+'0');
      }
}
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	08 95       	ret

000012ce <CLCD_voidSendString>:
{
	CLCD_voidSendCommand( LCD_DISPLAY_CLEAR);
	_delay_ms(10);
}
 void CLCD_voidSendString( u8* copy_u8ptrString)
 {
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
    12d6:	10 e0       	ldi	r17, 0x00	; 0
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <CLCD_voidSendString+0x12>
	 u8 LOC_u8Itrator=0;
	 while(copy_u8ptrString [LOC_u8Itrator] )
	 {
		CLCD_voidSendData(copy_u8ptrString[ LOC_u8Itrator]);
    12da:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
		 LOC_u8Itrator++;
    12de:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(10);
}
 void CLCD_voidSendString( u8* copy_u8ptrString)
 {
	 u8 LOC_u8Itrator=0;
	 while(copy_u8ptrString [LOC_u8Itrator] )
    12e0:	fe 01       	movw	r30, r28
    12e2:	e1 0f       	add	r30, r17
    12e4:	f1 1d       	adc	r31, r1
    12e6:	80 81       	ld	r24, Z
    12e8:	88 23       	and	r24, r24
    12ea:	b9 f7       	brne	.-18     	; 0x12da <CLCD_voidSendString+0xc>
	 {
		CLCD_voidSendData(copy_u8ptrString[ LOC_u8Itrator]);
		 LOC_u8Itrator++;
	 }
 }	 
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	08 95       	ret

000012f4 <CLCD_voidInitialization>:


#include <avr/delay.h>

void CLCD_voidInitialization(void)
{
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
	#if CLCD_MODE ==EIGHT_BIT_MODE
	MDIO_voidSetPortDirection( CLCD_DATA_PORT, DIO_PORT_OUTPUT);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	6f ef       	ldi	r22, 0xFF	; 255
    12fc:	0e 94 ac 05 	call	0xb58	; 0xb58 <MDIO_voidSetPortDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RS_PIN,DIO_PIN_OUTPUT);
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	67 e0       	ldi	r22, 0x07	; 7
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RW_PIN,DIO_PIN_OUTPUT);
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	65 e0       	ldi	r22, 0x05	; 5
    130e:	41 e0       	ldi	r20, 0x01	; 1
    1310:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_EN_PIN,DIO_PIN_OUTPUT);
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	66 e0       	ldi	r22, 0x06	; 6
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>

	
	CLCD_voidClearScreen();
    131e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    1322:	84 ef       	ldi	r24, 0xF4	; 244
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	28 ec       	ldi	r18, 0xC8	; 200
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	f9 01       	movw	r30, r18
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <CLCD_voidInitialization+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	d9 f7       	brne	.-10     	; 0x132a <CLCD_voidInitialization+0x36>
	_delay_ms(50);
	CLCD_voidSendCommand(CLCD_RETURN_HOME);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
    133a:	84 ef       	ldi	r24, 0xF4	; 244
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	28 ec       	ldi	r18, 0xC8	; 200
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	f9 01       	movw	r30, r18
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <CLCD_voidInitialization+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1348:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	d9 f7       	brne	.-10     	; 0x1342 <CLCD_voidInitialization+0x4e>
	_delay_ms(50);
	CLCD_voidSendCommand(FUNCTION_SET_TWO_LINE );
    134c:	88 e3       	ldi	r24, 0x38	; 56
    134e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
    1352:	00 ed       	ldi	r16, 0xD0	; 208
    1354:	17 e0       	ldi	r17, 0x07	; 7
    1356:	c8 01       	movw	r24, r16
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <CLCD_voidInitialization+0x64>
	_delay_ms(1);
	CLCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF  );
    135c:	8c e0       	ldi	r24, 0x0C	; 12
    135e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
    1362:	c8 01       	movw	r24, r16
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <CLCD_voidInitialization+0x70>
	_delay_ms(1);
	CLCD_voidClearScreen();
    1368:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CLCD_voidSendCommand>
	_delay_ms(1);
	CLCD_voidClearScreen();
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
	#endif
	
}
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <APP_vidChangeGuestPasswordFuncation>:
	}

#endif
}
void APP_vidChangeGuestPasswordFuncation(void)
{
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
#if 1
	u8 loc_u8PressedKey,loc_u8CountPassword,loc_u8Key = 0;
	u8 loc_GuestOutValue = 0;

	CLCD_voidClearScreen();
    1382:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("Change guest");
    1386:	80 e6       	ldi	r24, 0x60	; 96
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	CLCD_voidSetPosition(1,0);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
	CLCD_voidSendString("password");
    1396:	8d e6       	ldi	r24, 0x6D	; 109
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    139e:	84 ec       	ldi	r24, 0xC4	; 196
    13a0:	99 e0       	ldi	r25, 0x09	; 9
    13a2:	28 ec       	ldi	r18, 0xC8	; 200
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	31 97       	sbiw	r30, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <APP_vidChangeGuestPasswordFuncation+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	d9 f7       	brne	.-10     	; 0x13a6 <APP_vidChangeGuestPasswordFuncation+0x2e>
	_delay_ms(250);
	CLCD_voidClearScreen();
    13b0:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" c for Exit");
    13b4:	86 e7       	ldi	r24, 0x76	; 118
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    13bc:	84 ec       	ldi	r24, 0xC4	; 196
    13be:	99 e0       	ldi	r25, 0x09	; 9
    13c0:	28 ec       	ldi	r18, 0xC8	; 200
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	31 97       	sbiw	r30, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <APP_vidChangeGuestPasswordFuncation+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13cc:	d9 f7       	brne	.-10     	; 0x13c4 <APP_vidChangeGuestPasswordFuncation+0x4c>
	_delay_ms(250);
	CLCD_voidClearScreen();
    13ce:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" = To next step");
    13d2:	82 e8       	ldi	r24, 0x82	; 130
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    13da:	84 ec       	ldi	r24, 0xC4	; 196
    13dc:	99 e0       	ldi	r25, 0x09	; 9
    13de:	28 ec       	ldi	r18, 0xC8	; 200
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	f9 01       	movw	r30, r18
    13e4:	31 97       	sbiw	r30, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <APP_vidChangeGuestPasswordFuncation+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	d9 f7       	brne	.-10     	; 0x13e2 <APP_vidChangeGuestPasswordFuncation+0x6a>
	_delay_ms(250);
	CLCD_voidClearScreen();
    13ec:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>

	while(1)
	{
		MUART_voidSendData('w');
    13f0:	87 e7       	ldi	r24, 0x77	; 119
    13f2:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

		loc_u8PressedKey = HKPD_u8GetPressedKey();
    13f6:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>

		CLCD_voidSendString("Enter password");
    13fa:	82 e9       	ldi	r24, 0x92	; 146
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	ff 24       	eor	r15, r15
    140e:	c8 ec       	ldi	r28, 0xC8	; 200
    1410:	d0 e0       	ldi	r29, 0x00	; 0

		while(1)
		{
			MUART_voidSendData('w');
    1412:	87 e7       	ldi	r24, 0x77	; 119
    1414:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

			loc_u8PressedKey = HKPD_u8GetPressedKey();
    1418:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    141c:	08 2f       	mov	r16, r24

			if(loc_u8Key == 0)
    141e:	11 23       	and	r17, r17
    1420:	09 f0       	breq	.+2      	; 0x1424 <APP_vidChangeGuestPasswordFuncation+0xac>
    1422:	4f c0       	rjmp	.+158    	; 0x14c2 <APP_vidChangeGuestPasswordFuncation+0x14a>
    1424:	11 e0       	ldi	r17, 0x01	; 1
			{
				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
				{
					MUART_voidSendData('w');
    1426:	87 e7       	ldi	r24, 0x77	; 119
    1428:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

					do
					{
						loc_u8PressedKey = HKPD_u8GetPressedKey();
    142c:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1430:	08 2f       	mov	r16, r24
					}while(	loc_u8PressedKey == NOT_PRESSED);
    1432:	8f 3f       	cpi	r24, 0xFF	; 255
    1434:	d9 f3       	breq	.-10     	; 0x142c <APP_vidChangeGuestPasswordFuncation+0xb4>

					if (loc_u8PressedKey == 'c' && loc_GuestOutValue == 0 )
    1436:	83 36       	cpi	r24, 0x63	; 99
    1438:	d1 f4       	brne	.+52     	; 0x146e <APP_vidChangeGuestPasswordFuncation+0xf6>
    143a:	ff 20       	and	r15, r15
    143c:	09 f4       	brne	.+2      	; 0x1440 <APP_vidChangeGuestPasswordFuncation+0xc8>
    143e:	5e c0       	rjmp	.+188    	; 0x14fc <APP_vidChangeGuestPasswordFuncation+0x184>
						loc_u8PressedKey = 'c';
						break;
					}
					if (loc_u8PressedKey == 'c')
					{
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    1440:	12 50       	subi	r17, 0x02	; 2
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	61 2f       	mov	r22, r17
    1446:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData(' ');
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1450:	80 ed       	ldi	r24, 0xD0	; 208
    1452:	97 e0       	ldi	r25, 0x07	; 7
    1454:	fe 01       	movw	r30, r28
    1456:	31 97       	sbiw	r30, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <APP_vidChangeGuestPasswordFuncation+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	d9 f7       	brne	.-10     	; 0x1454 <APP_vidChangeGuestPasswordFuncation+0xdc>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	61 2f       	mov	r22, r17
    1462:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						loc_u8CountPassword-=2;
						if(loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    1466:	12 30       	cpi	r17, 0x02	; 2
    1468:	40 f5       	brcc	.+80     	; 0x14ba <APP_vidChangeGuestPasswordFuncation+0x142>
    146a:	ff 24       	eor	r15, r15
    146c:	26 c0       	rjmp	.+76     	; 0x14ba <APP_vidChangeGuestPasswordFuncation+0x142>
						{
							loc_GuestOutValue = 0;
						}
					}
					else if (loc_u8CountPassword < 5)
    146e:	15 30       	cpi	r17, 0x05	; 5
    1470:	09 f1       	breq	.+66     	; 0x14b4 <APP_vidChangeGuestPasswordFuncation+0x13c>
					{
						loc_GuestOutValue = 1;
						CLCD_voidSendData(loc_u8PressedKey);
    1472:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1476:	80 ed       	ldi	r24, 0xD0	; 208
    1478:	97 e0       	ldi	r25, 0x07	; 7
    147a:	fe 01       	movw	r30, r28
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <APP_vidChangeGuestPasswordFuncation+0x104>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1482:	d9 f7       	brne	.-10     	; 0x147a <APP_vidChangeGuestPasswordFuncation+0x102>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    1484:	61 2f       	mov	r22, r17
    1486:	61 50       	subi	r22, 0x01	; 1
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData('*');
    148e:	8a e2       	ldi	r24, 0x2A	; 42
    1490:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1494:	80 ed       	ldi	r24, 0xD0	; 208
    1496:	97 e0       	ldi	r25, 0x07	; 7
    1498:	fe 01       	movw	r30, r28
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <APP_vidChangeGuestPasswordFuncation+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a0:	d9 f7       	brne	.-10     	; 0x1498 <APP_vidChangeGuestPasswordFuncation+0x120>
						_delay_ms(200);
						HEEPROM_voidWriteData(EEPROM_GuestPassword_LOCATION + loc_u8CountPassword-1,loc_u8PressedKey);
    14a2:	81 2f       	mov	r24, r17
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0a 96       	adiw	r24, 0x0a	; 10
    14a8:	60 2f       	mov	r22, r16
    14aa:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    14ae:	ff 24       	eor	r15, r15
    14b0:	f3 94       	inc	r15
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <APP_vidChangeGuestPasswordFuncation+0x142>
					}
					else if (loc_u8PressedKey == '=' && loc_u8CountPassword >= 5)
    14b4:	8d 33       	cpi	r24, 0x3D	; 61
    14b6:	59 f0       	breq	.+22     	; 0x14ce <APP_vidChangeGuestPasswordFuncation+0x156>
    14b8:	14 e0       	ldi	r17, 0x04	; 4

			loc_u8PressedKey = HKPD_u8GetPressedKey();

			if(loc_u8Key == 0)
			{
				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    14ba:	1f 5f       	subi	r17, 0xFF	; 255
    14bc:	16 30       	cpi	r17, 0x06	; 6
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <APP_vidChangeGuestPasswordFuncation+0x14a>
    14c0:	b2 cf       	rjmp	.-156    	; 0x1426 <APP_vidChangeGuestPasswordFuncation+0xae>
				}

				loc_u8Key = 1;
			}

			if (loc_u8PressedKey == 'c')
    14c2:	03 36       	cpi	r16, 0x63	; 99
    14c4:	d9 f0       	breq	.+54     	; 0x14fc <APP_vidChangeGuestPasswordFuncation+0x184>
			{
				break;
    14c6:	11 e0       	ldi	r17, 0x01	; 1
			}
			if(loc_u8PressedKey == '=')
    14c8:	0d 33       	cpi	r16, 0x3D	; 61
    14ca:	09 f0       	breq	.+2      	; 0x14ce <APP_vidChangeGuestPasswordFuncation+0x156>
    14cc:	a2 cf       	rjmp	.-188    	; 0x1412 <APP_vidChangeGuestPasswordFuncation+0x9a>
			{
				CLCD_voidClearScreen();
    14ce:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("New PW added");
    14d2:	81 ea       	ldi	r24, 0xA1	; 161
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("successfully");
    14e2:	8e ea       	ldi	r24, 0xAE	; 174
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    14ea:	84 ec       	ldi	r24, 0xC4	; 196
    14ec:	99 e0       	ldi	r25, 0x09	; 9
    14ee:	28 ec       	ldi	r18, 0xC8	; 200
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	f9 01       	movw	r30, r18
    14f4:	31 97       	sbiw	r30, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <APP_vidChangeGuestPasswordFuncation+0x17c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	d9 f7       	brne	.-10     	; 0x14f2 <APP_vidChangeGuestPasswordFuncation+0x17a>
			}
		}

		if(loc_u8PressedKey == 'c')
		{
			gol_u8FlagMode_A = 0;
    14fc:	10 92 fb 02 	sts	0x02FB, r1
			gol_u8Mode_A = '0';
    1500:	80 e3       	ldi	r24, 0x30	; 48
    1502:	80 93 fc 02 	sts	0x02FC, r24
			CLCD_voidClearScreen();
    1506:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			break;
		}
	}

#endif
}
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	08 95       	ret

00001516 <APP_voidInitFuncation>:
#endif

}

void APP_voidInitFuncation(void)
{
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <APP_voidInitFuncation+0x12>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	u8 loc_u8PressedKey; volatile loc_u8CountPassword;
	u8 loc_AAGOutValue = 0;
	CLCD_voidClearScreen();
    152c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("c in password");
    1530:	8b eb       	ldi	r24, 0xBB	; 187
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	CLCD_voidSetPosition(1,0);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
	CLCD_voidSendString("mode to clear");
    1540:	89 ec       	ldi	r24, 0xC9	; 201
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1548:	84 ec       	ldi	r24, 0xC4	; 196
    154a:	99 e0       	ldi	r25, 0x09	; 9
    154c:	28 ec       	ldi	r18, 0xC8	; 200
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	f9 01       	movw	r30, r18
    1552:	31 97       	sbiw	r30, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <APP_voidInitFuncation+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1558:	d9 f7       	brne	.-10     	; 0x1550 <APP_voidInitFuncation+0x3a>
	_delay_ms(250);
	CLCD_voidClearScreen();
    155a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" = To next step");
    155e:	82 e8       	ldi	r24, 0x82	; 130
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1566:	84 ec       	ldi	r24, 0xC4	; 196
    1568:	99 e0       	ldi	r25, 0x09	; 9
    156a:	28 ec       	ldi	r18, 0xC8	; 200
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	f9 01       	movw	r30, r18
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <APP_voidInitFuncation+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1574:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	d9 f7       	brne	.-10     	; 0x156e <APP_voidInitFuncation+0x58>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1578:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>

	CLCD_voidSendString("Enter Admin PW");
    157c:	87 ed       	ldi	r24, 0xD7	; 215
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	CLCD_voidSetPosition(1,0);
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    158c:	00 e0       	ldi	r16, 0x00	; 0

	while(1)
	{
		MUART_voidSendData('w');
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    158e:	51 e0       	ldi	r21, 0x01	; 1
    1590:	c5 2e       	mov	r12, r21
    1592:	d1 2c       	mov	r13, r1
    1594:	48 ec       	ldi	r20, 0xC8	; 200
    1596:	e4 2e       	mov	r14, r20
    1598:	f1 2c       	mov	r15, r1
	CLCD_voidSendString("Enter Admin PW");
	CLCD_voidSetPosition(1,0);

	while(1)
	{
		MUART_voidSendData('w');
    159a:	87 e7       	ldi	r24, 0x77	; 119
    159c:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    15a0:	da 82       	std	Y+2, r13	; 0x02
    15a2:	c9 82       	std	Y+1, r12	; 0x01
    15a4:	83 c0       	rjmp	.+262    	; 0x16ac <APP_voidInitFuncation+0x196>
		{
			MUART_voidSendData('w');
    15a6:	87 e7       	ldi	r24, 0x77	; 119
    15a8:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
			do
			{
				loc_u8PressedKey = HKPD_u8GetPressedKey();
    15ac:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    15b0:	18 2f       	mov	r17, r24
			}while(	loc_u8PressedKey == NOT_PRESSED);
    15b2:	8f 3f       	cpi	r24, 0xFF	; 255
    15b4:	d9 f3       	breq	.-10     	; 0x15ac <APP_voidInitFuncation+0x96>


			if(loc_u8PressedKey == 'c' && loc_AAGOutValue == 0 )
    15b6:	83 36       	cpi	r24, 0x63	; 99
    15b8:	a9 f4       	brne	.+42     	; 0x15e4 <APP_voidInitFuncation+0xce>
    15ba:	00 23       	and	r16, r16
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <APP_voidInitFuncation+0xaa>
    15be:	09 c2       	rjmp	.+1042   	; 0x19d2 <APP_voidInitFuncation+0x4bc>
			{
				loc_u8CountPassword = 0;
    15c0:	1a 82       	std	Y+2, r1	; 0x02
    15c2:	19 82       	std	Y+1, r1	; 0x01
				CLCD_voidSetPosition(1, loc_u8CountPassword);
    15c4:	69 81       	ldd	r22, Y+1	; 0x01
    15c6:	7a 81       	ldd	r23, Y+2	; 0x02
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData(' ');
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    15d4:	88 ee       	ldi	r24, 0xE8	; 232
    15d6:	93 e0       	ldi	r25, 0x03	; 3
    15d8:	f7 01       	movw	r30, r14
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <APP_voidInitFuncation+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	d9 f7       	brne	.-10     	; 0x15d8 <APP_voidInitFuncation+0xc2>
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <APP_voidInitFuncation+0x110>
					loc_AAGOutValue = 0;
					loc_u8CountPassword = 0;
					CLCD_voidSetPosition(1, loc_u8CountPassword);
				}
			}
			else if (loc_u8CountPassword < 5)
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	05 97       	sbiw	r24, 0x05	; 5
    15ea:	0c f0       	brlt	.+2      	; 0x15ee <APP_voidInitFuncation+0xd8>
    15ec:	4f c0       	rjmp	.+158    	; 0x168c <APP_voidInitFuncation+0x176>
    15ee:	2c c0       	rjmp	.+88     	; 0x1648 <APP_voidInitFuncation+0x132>

			if (loc_u8PressedKey == 'c')
			{
				if (loc_AAGOutValue == 1)
				{
					CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    15f0:	69 81       	ldd	r22, Y+1	; 0x01
    15f2:	7a 81       	ldd	r23, Y+2	; 0x02
    15f4:	62 50       	subi	r22, 0x02	; 2
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					CLCD_voidSendData(' ');
    15fc:	80 e2       	ldi	r24, 0x20	; 32
    15fe:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1602:	80 ed       	ldi	r24, 0xD0	; 208
    1604:	97 e0       	ldi	r25, 0x07	; 7
    1606:	f7 01       	movw	r30, r14
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <APP_voidInitFuncation+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	d9 f7       	brne	.-10     	; 0x1606 <APP_voidInitFuncation+0xf0>
					_delay_ms(200);
					CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	7a 81       	ldd	r23, Y+2	; 0x02
    1614:	62 50       	subi	r22, 0x02	; 2
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					loc_u8CountPassword-=2;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	02 97       	sbiw	r24, 0x02	; 2
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
				}
				if (loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	21 f0       	breq	.+8      	; 0x1636 <APP_voidInitFuncation+0x120>
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	89 2b       	or	r24, r25
    1634:	b1 f5       	brne	.+108    	; 0x16a2 <APP_voidInitFuncation+0x18c>
				{
					loc_AAGOutValue = 0;
					loc_u8CountPassword = 0;
    1636:	1a 82       	std	Y+2, r1	; 0x02
    1638:	19 82       	std	Y+1, r1	; 0x01
					CLCD_voidSetPosition(1, loc_u8CountPassword);
    163a:	69 81       	ldd	r22, Y+1	; 0x01
    163c:	7a 81       	ldd	r23, Y+2	; 0x02
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    1644:	00 e0       	ldi	r16, 0x00	; 0
    1646:	2d c0       	rjmp	.+90     	; 0x16a2 <APP_voidInitFuncation+0x18c>
				}
			}
			else if (loc_u8CountPassword < 5)
			{
				loc_AAGOutValue = 1;
				CLCD_voidSendData(loc_u8PressedKey);
    1648:	81 2f       	mov	r24, r17
    164a:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    164e:	80 ed       	ldi	r24, 0xD0	; 208
    1650:	97 e0       	ldi	r25, 0x07	; 7
    1652:	f7 01       	movw	r30, r14
    1654:	31 97       	sbiw	r30, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <APP_voidInitFuncation+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	d9 f7       	brne	.-10     	; 0x1652 <APP_voidInitFuncation+0x13c>
				_delay_ms(200);
				CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    165c:	69 81       	ldd	r22, Y+1	; 0x01
    165e:	7a 81       	ldd	r23, Y+2	; 0x02
    1660:	61 50       	subi	r22, 0x01	; 1
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData('*');
    1668:	8a e2       	ldi	r24, 0x2A	; 42
    166a:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    166e:	80 ed       	ldi	r24, 0xD0	; 208
    1670:	97 e0       	ldi	r25, 0x07	; 7
    1672:	f7 01       	movw	r30, r14
    1674:	31 97       	sbiw	r30, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <APP_voidInitFuncation+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	d9 f7       	brne	.-10     	; 0x1672 <APP_voidInitFuncation+0x15c>
				_delay_ms(200);
				HEEPROM_voidWriteData(EEPROM_AdminPassword_LOCATION + loc_u8CountPassword-1,loc_u8PressedKey);
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	61 2f       	mov	r22, r17
    1684:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    1688:	01 e0       	ldi	r16, 0x01	; 1
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <APP_voidInitFuncation+0x18c>
			}
			else if (loc_u8PressedKey == '=' && loc_u8CountPassword >= 5)
    168c:	1d 33       	cpi	r17, 0x3D	; 61
    168e:	21 f4       	brne	.+8      	; 0x1698 <APP_voidInitFuncation+0x182>
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	05 97       	sbiw	r24, 0x05	; 5
    1696:	94 f4       	brge	.+36     	; 0x16bc <APP_voidInitFuncation+0x1a6>
				loc_u8PressedKey = '=';
				break;
			}
			else
			{
				loc_u8CountPassword-=1;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSetPosition(1,0);

	while(1)
	{
		MUART_voidSendData('w');
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	06 97       	sbiw	r24, 0x06	; 6
    16b2:	0c f4       	brge	.+2      	; 0x16b6 <APP_voidInitFuncation+0x1a0>
    16b4:	78 cf       	rjmp	.-272    	; 0x15a6 <APP_voidInitFuncation+0x90>
			{
				loc_u8CountPassword-=1;
			}
		}

		if(loc_u8PressedKey == '=')
    16b6:	1d 33       	cpi	r17, 0x3D	; 61
    16b8:	09 f0       	breq	.+2      	; 0x16bc <APP_voidInitFuncation+0x1a6>
    16ba:	6f cf       	rjmp	.-290    	; 0x159a <APP_voidInitFuncation+0x84>
		{
			CLCD_voidClearScreen();
    16bc:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Data added");
    16c0:	86 ee       	ldi	r24, 0xE6	; 230
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("successfully");
    16d0:	8e ea       	ldi	r24, 0xAE	; 174
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    16d8:	84 ec       	ldi	r24, 0xC4	; 196
    16da:	99 e0       	ldi	r25, 0x09	; 9
    16dc:	28 ec       	ldi	r18, 0xC8	; 200
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	f9 01       	movw	r30, r18
    16e2:	31 97       	sbiw	r30, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <APP_voidInitFuncation+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	d9 f7       	brne	.-10     	; 0x16e0 <APP_voidInitFuncation+0x1ca>
			_delay_ms(250);
			break;
		}
	}

	CLCD_voidClearScreen();
    16ea:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("Enter Alarm PW");
    16ee:	81 ef       	ldi	r24, 0xF1	; 241
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	CLCD_voidSetPosition(1,0);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    16fe:	1d e3       	ldi	r17, 0x3D	; 61
    1700:	00 e0       	ldi	r16, 0x00	; 0

	while(1)
	{
		MUART_voidSendData('w');
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    1702:	31 e0       	ldi	r19, 0x01	; 1
    1704:	c3 2e       	mov	r12, r19
    1706:	d1 2c       	mov	r13, r1
    1708:	28 ec       	ldi	r18, 0xC8	; 200
    170a:	e2 2e       	mov	r14, r18
    170c:	f1 2c       	mov	r15, r1
	CLCD_voidSendString("Enter Alarm PW");
	CLCD_voidSetPosition(1,0);

	while(1)
	{
		MUART_voidSendData('w');
    170e:	87 e7       	ldi	r24, 0x77	; 119
    1710:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    1714:	da 82       	std	Y+2, r13	; 0x02
    1716:	c9 82       	std	Y+1, r12	; 0x01
    1718:	80 c0       	rjmp	.+256    	; 0x181a <APP_voidInitFuncation+0x304>
		{
			do
			{
				loc_u8PressedKey = HKPD_u8GetPressedKey();
    171a:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    171e:	18 2f       	mov	r17, r24
			}while(	loc_u8PressedKey == NOT_PRESSED);
    1720:	8f 3f       	cpi	r24, 0xFF	; 255
    1722:	d9 f3       	breq	.-10     	; 0x171a <APP_voidInitFuncation+0x204>

			if(loc_u8PressedKey == 'c' && loc_AAGOutValue == 0 )
    1724:	83 36       	cpi	r24, 0x63	; 99
    1726:	a9 f4       	brne	.+42     	; 0x1752 <APP_voidInitFuncation+0x23c>
    1728:	00 23       	and	r16, r16
    172a:	09 f0       	breq	.+2      	; 0x172e <APP_voidInitFuncation+0x218>
    172c:	56 c1       	rjmp	.+684    	; 0x19da <APP_voidInitFuncation+0x4c4>
			{
				loc_u8CountPassword = 0;
    172e:	1a 82       	std	Y+2, r1	; 0x02
    1730:	19 82       	std	Y+1, r1	; 0x01
				CLCD_voidSetPosition(1, loc_u8CountPassword);
    1732:	69 81       	ldd	r22, Y+1	; 0x01
    1734:	7a 81       	ldd	r23, Y+2	; 0x02
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData(' ');
    173c:	80 e2       	ldi	r24, 0x20	; 32
    173e:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1742:	80 ed       	ldi	r24, 0xD0	; 208
    1744:	97 e0       	ldi	r25, 0x07	; 7
    1746:	f7 01       	movw	r30, r14
    1748:	31 97       	sbiw	r30, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <APP_voidInitFuncation+0x232>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	d9 f7       	brne	.-10     	; 0x1746 <APP_voidInitFuncation+0x230>
    1750:	21 c0       	rjmp	.+66     	; 0x1794 <APP_voidInitFuncation+0x27e>
					loc_AAGOutValue = 0;
					loc_u8CountPassword = 0;
					CLCD_voidSetPosition(1, loc_u8CountPassword);
				}
			}
			else if (loc_u8CountPassword < 5)
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	05 97       	sbiw	r24, 0x05	; 5
    1758:	0c f0       	brlt	.+2      	; 0x175c <APP_voidInitFuncation+0x246>
    175a:	4f c0       	rjmp	.+158    	; 0x17fa <APP_voidInitFuncation+0x2e4>
    175c:	2c c0       	rjmp	.+88     	; 0x17b6 <APP_voidInitFuncation+0x2a0>

			if (loc_u8PressedKey == 'c')
			{
				if (loc_AAGOutValue == 1)
				{
					CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    175e:	69 81       	ldd	r22, Y+1	; 0x01
    1760:	7a 81       	ldd	r23, Y+2	; 0x02
    1762:	62 50       	subi	r22, 0x02	; 2
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					CLCD_voidSendData(' ');
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1770:	80 ed       	ldi	r24, 0xD0	; 208
    1772:	97 e0       	ldi	r25, 0x07	; 7
    1774:	f7 01       	movw	r30, r14
    1776:	31 97       	sbiw	r30, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <APP_voidInitFuncation+0x260>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	d9 f7       	brne	.-10     	; 0x1774 <APP_voidInitFuncation+0x25e>
					_delay_ms(200);
					CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	7a 81       	ldd	r23, Y+2	; 0x02
    1782:	62 50       	subi	r22, 0x02	; 2
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					loc_u8CountPassword-=2;
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
    178e:	02 97       	sbiw	r24, 0x02	; 2
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
				}
				if (loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	21 f0       	breq	.+8      	; 0x17a4 <APP_voidInitFuncation+0x28e>
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	89 2b       	or	r24, r25
    17a2:	b1 f5       	brne	.+108    	; 0x1810 <APP_voidInitFuncation+0x2fa>
				{
					loc_AAGOutValue = 0;
					loc_u8CountPassword = 0;
    17a4:	1a 82       	std	Y+2, r1	; 0x02
    17a6:	19 82       	std	Y+1, r1	; 0x01
					CLCD_voidSetPosition(1, loc_u8CountPassword);
    17a8:	69 81       	ldd	r22, Y+1	; 0x01
    17aa:	7a 81       	ldd	r23, Y+2	; 0x02
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    17b2:	00 e0       	ldi	r16, 0x00	; 0
    17b4:	2d c0       	rjmp	.+90     	; 0x1810 <APP_voidInitFuncation+0x2fa>
				}
			}
			else if (loc_u8CountPassword < 5)
			{
				loc_AAGOutValue = 1;
				CLCD_voidSendData(loc_u8PressedKey);
    17b6:	81 2f       	mov	r24, r17
    17b8:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    17bc:	80 ed       	ldi	r24, 0xD0	; 208
    17be:	97 e0       	ldi	r25, 0x07	; 7
    17c0:	f7 01       	movw	r30, r14
    17c2:	31 97       	sbiw	r30, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <APP_voidInitFuncation+0x2ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	d9 f7       	brne	.-10     	; 0x17c0 <APP_voidInitFuncation+0x2aa>
				_delay_ms(200);
				CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    17ca:	69 81       	ldd	r22, Y+1	; 0x01
    17cc:	7a 81       	ldd	r23, Y+2	; 0x02
    17ce:	61 50       	subi	r22, 0x01	; 1
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData('*');
    17d6:	8a e2       	ldi	r24, 0x2A	; 42
    17d8:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    17dc:	80 ed       	ldi	r24, 0xD0	; 208
    17de:	97 e0       	ldi	r25, 0x07	; 7
    17e0:	f7 01       	movw	r30, r14
    17e2:	31 97       	sbiw	r30, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <APP_voidInitFuncation+0x2cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e8:	d9 f7       	brne	.-10     	; 0x17e0 <APP_voidInitFuncation+0x2ca>
				_delay_ms(200);
				HEEPROM_voidWriteData(EEPROM_AlarmPassword_LOCATION + loc_u8CountPassword-1,loc_u8PressedKey);
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	06 96       	adiw	r24, 0x06	; 6
    17f0:	61 2f       	mov	r22, r17
    17f2:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    17f6:	01 e0       	ldi	r16, 0x01	; 1
    17f8:	0b c0       	rjmp	.+22     	; 0x1810 <APP_voidInitFuncation+0x2fa>
			}
			else if (loc_u8PressedKey == '=' && loc_u8CountPassword >= 5)
    17fa:	1d 33       	cpi	r17, 0x3D	; 61
    17fc:	21 f4       	brne	.+8      	; 0x1806 <APP_voidInitFuncation+0x2f0>
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	05 97       	sbiw	r24, 0x05	; 5
    1804:	94 f4       	brge	.+36     	; 0x182a <APP_voidInitFuncation+0x314>
				loc_u8PressedKey = '=';
				break;
			}
			else
			{
				loc_u8CountPassword-=1;
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSetPosition(1,0);

	while(1)
	{
		MUART_voidSendData('w');
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	06 97       	sbiw	r24, 0x06	; 6
    1820:	0c f4       	brge	.+2      	; 0x1824 <APP_voidInitFuncation+0x30e>
    1822:	7b cf       	rjmp	.-266    	; 0x171a <APP_voidInitFuncation+0x204>
			{
				loc_u8CountPassword-=1;
			}
		}

		if(loc_u8PressedKey == '=')
    1824:	1d 33       	cpi	r17, 0x3D	; 61
    1826:	09 f0       	breq	.+2      	; 0x182a <APP_voidInitFuncation+0x314>
    1828:	72 cf       	rjmp	.-284    	; 0x170e <APP_voidInitFuncation+0x1f8>
		{
			CLCD_voidClearScreen();
    182a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Data added");
    182e:	86 ee       	ldi	r24, 0xE6	; 230
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("successfully");
    183e:	8e ea       	ldi	r24, 0xAE	; 174
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1846:	84 ec       	ldi	r24, 0xC4	; 196
    1848:	99 e0       	ldi	r25, 0x09	; 9
    184a:	28 ec       	ldi	r18, 0xC8	; 200
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	f9 01       	movw	r30, r18
    1850:	31 97       	sbiw	r30, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <APP_voidInitFuncation+0x33a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	d9 f7       	brne	.-10     	; 0x184e <APP_voidInitFuncation+0x338>
			_delay_ms(250);
			break;
		}
	}

	CLCD_voidClearScreen();
    1858:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("Enter Guest PW");
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	CLCD_voidSetPosition(1,0);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    186c:	1d e3       	ldi	r17, 0x3D	; 61
    186e:	00 e0       	ldi	r16, 0x00	; 0

	while(1)
	{
		MUART_voidSendData('w');
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	c9 2e       	mov	r12, r25
    1874:	d1 2c       	mov	r13, r1
    1876:	88 ec       	ldi	r24, 0xC8	; 200
    1878:	e8 2e       	mov	r14, r24
    187a:	f1 2c       	mov	r15, r1
	CLCD_voidSendString("Enter Guest PW");
	CLCD_voidSetPosition(1,0);

	while(1)
	{
		MUART_voidSendData('w');
    187c:	87 e7       	ldi	r24, 0x77	; 119
    187e:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    1882:	da 82       	std	Y+2, r13	; 0x02
    1884:	c9 82       	std	Y+1, r12	; 0x01
    1886:	80 c0       	rjmp	.+256    	; 0x1988 <APP_voidInitFuncation+0x472>
		{
			do
			{
				loc_u8PressedKey = HKPD_u8GetPressedKey();
    1888:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    188c:	18 2f       	mov	r17, r24
			}while(	loc_u8PressedKey == NOT_PRESSED);
    188e:	8f 3f       	cpi	r24, 0xFF	; 255
    1890:	d9 f3       	breq	.-10     	; 0x1888 <APP_voidInitFuncation+0x372>

			if(loc_u8PressedKey == 'c' && loc_AAGOutValue == 0 )
    1892:	83 36       	cpi	r24, 0x63	; 99
    1894:	a9 f4       	brne	.+42     	; 0x18c0 <APP_voidInitFuncation+0x3aa>
    1896:	00 23       	and	r16, r16
    1898:	09 f0       	breq	.+2      	; 0x189c <APP_voidInitFuncation+0x386>
    189a:	a3 c0       	rjmp	.+326    	; 0x19e2 <APP_voidInitFuncation+0x4cc>
			{
				loc_u8CountPassword = 0;
    189c:	1a 82       	std	Y+2, r1	; 0x02
    189e:	19 82       	std	Y+1, r1	; 0x01
				CLCD_voidSetPosition(1, loc_u8CountPassword);
    18a0:	69 81       	ldd	r22, Y+1	; 0x01
    18a2:	7a 81       	ldd	r23, Y+2	; 0x02
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData(' ');
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    18b0:	80 ed       	ldi	r24, 0xD0	; 208
    18b2:	97 e0       	ldi	r25, 0x07	; 7
    18b4:	f7 01       	movw	r30, r14
    18b6:	31 97       	sbiw	r30, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <APP_voidInitFuncation+0x3a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	d9 f7       	brne	.-10     	; 0x18b4 <APP_voidInitFuncation+0x39e>
    18be:	21 c0       	rjmp	.+66     	; 0x1902 <APP_voidInitFuncation+0x3ec>
					loc_AAGOutValue = 0;
					loc_u8CountPassword = 0;
					CLCD_voidSetPosition(1, loc_u8CountPassword);
				}
			}
			else if (loc_u8CountPassword < 5)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	05 97       	sbiw	r24, 0x05	; 5
    18c6:	0c f0       	brlt	.+2      	; 0x18ca <APP_voidInitFuncation+0x3b4>
    18c8:	4f c0       	rjmp	.+158    	; 0x1968 <APP_voidInitFuncation+0x452>
    18ca:	2c c0       	rjmp	.+88     	; 0x1924 <APP_voidInitFuncation+0x40e>

			if (loc_u8PressedKey == 'c')
			{
				if (loc_AAGOutValue == 1)
				{
					CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    18cc:	69 81       	ldd	r22, Y+1	; 0x01
    18ce:	7a 81       	ldd	r23, Y+2	; 0x02
    18d0:	62 50       	subi	r22, 0x02	; 2
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					CLCD_voidSendData(' ');
    18d8:	80 e2       	ldi	r24, 0x20	; 32
    18da:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    18de:	80 ed       	ldi	r24, 0xD0	; 208
    18e0:	97 e0       	ldi	r25, 0x07	; 7
    18e2:	f7 01       	movw	r30, r14
    18e4:	31 97       	sbiw	r30, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <APP_voidInitFuncation+0x3ce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ea:	d9 f7       	brne	.-10     	; 0x18e2 <APP_voidInitFuncation+0x3cc>
					_delay_ms(200);
					CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    18ec:	69 81       	ldd	r22, Y+1	; 0x01
    18ee:	7a 81       	ldd	r23, Y+2	; 0x02
    18f0:	62 50       	subi	r22, 0x02	; 2
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					loc_u8CountPassword-=2;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	02 97       	sbiw	r24, 0x02	; 2
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
				}
				if (loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	21 f0       	breq	.+8      	; 0x1912 <APP_voidInitFuncation+0x3fc>
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	89 2b       	or	r24, r25
    1910:	b1 f5       	brne	.+108    	; 0x197e <APP_voidInitFuncation+0x468>
				{
					loc_AAGOutValue = 0;
					loc_u8CountPassword = 0;
    1912:	1a 82       	std	Y+2, r1	; 0x02
    1914:	19 82       	std	Y+1, r1	; 0x01
					CLCD_voidSetPosition(1, loc_u8CountPassword);
    1916:	69 81       	ldd	r22, Y+1	; 0x01
    1918:	7a 81       	ldd	r23, Y+2	; 0x02
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    1920:	00 e0       	ldi	r16, 0x00	; 0
    1922:	2d c0       	rjmp	.+90     	; 0x197e <APP_voidInitFuncation+0x468>
				}
			}
			else if (loc_u8CountPassword < 5)
			{
				loc_AAGOutValue = 1;
				CLCD_voidSendData(loc_u8PressedKey);
    1924:	81 2f       	mov	r24, r17
    1926:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    192a:	80 ed       	ldi	r24, 0xD0	; 208
    192c:	97 e0       	ldi	r25, 0x07	; 7
    192e:	f7 01       	movw	r30, r14
    1930:	31 97       	sbiw	r30, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <APP_voidInitFuncation+0x41a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1936:	d9 f7       	brne	.-10     	; 0x192e <APP_voidInitFuncation+0x418>
				_delay_ms(200);
				CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    1938:	69 81       	ldd	r22, Y+1	; 0x01
    193a:	7a 81       	ldd	r23, Y+2	; 0x02
    193c:	61 50       	subi	r22, 0x01	; 1
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData('*');
    1944:	8a e2       	ldi	r24, 0x2A	; 42
    1946:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    194a:	80 ed       	ldi	r24, 0xD0	; 208
    194c:	97 e0       	ldi	r25, 0x07	; 7
    194e:	f7 01       	movw	r30, r14
    1950:	31 97       	sbiw	r30, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <APP_voidInitFuncation+0x43a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1954:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	d9 f7       	brne	.-10     	; 0x194e <APP_voidInitFuncation+0x438>
				_delay_ms(200);
				HEEPROM_voidWriteData(EEPROM_GuestPassword_LOCATION + loc_u8CountPassword-1,loc_u8PressedKey);
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	0a 96       	adiw	r24, 0x0a	; 10
    195e:	61 2f       	mov	r22, r17
    1960:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    1964:	01 e0       	ldi	r16, 0x01	; 1
    1966:	0b c0       	rjmp	.+22     	; 0x197e <APP_voidInitFuncation+0x468>
			}
			else if (loc_u8PressedKey == '=' && loc_u8CountPassword >= 5)
    1968:	1d 33       	cpi	r17, 0x3D	; 61
    196a:	21 f4       	brne	.+8      	; 0x1974 <APP_voidInitFuncation+0x45e>
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	05 97       	sbiw	r24, 0x05	; 5
    1972:	94 f4       	brge	.+36     	; 0x1998 <APP_voidInitFuncation+0x482>
				loc_u8PressedKey = '=';
				break;
			}
			else
			{
				loc_u8CountPassword-=1;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSetPosition(1,0);

	while(1)
	{
		MUART_voidSendData('w');
		for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	06 97       	sbiw	r24, 0x06	; 6
    198e:	0c f4       	brge	.+2      	; 0x1992 <APP_voidInitFuncation+0x47c>
    1990:	7b cf       	rjmp	.-266    	; 0x1888 <APP_voidInitFuncation+0x372>
			{
				loc_u8CountPassword-=1;
			}
		}

		if(loc_u8PressedKey == '=')
    1992:	1d 33       	cpi	r17, 0x3D	; 61
    1994:	09 f0       	breq	.+2      	; 0x1998 <APP_voidInitFuncation+0x482>
    1996:	72 cf       	rjmp	.-284    	; 0x187c <APP_voidInitFuncation+0x366>
		{
			CLCD_voidClearScreen();
    1998:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Data added");
    199c:	86 ee       	ldi	r24, 0xE6	; 230
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("successfully");
    19ac:	8e ea       	ldi	r24, 0xAE	; 174
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			HEEPROM_voidWriteData(EEPROM_AdminPasswordStatus_LOCATION,'1');
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	61 e3       	ldi	r22, 0x31	; 49
    19ba:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    19be:	84 ec       	ldi	r24, 0xC4	; 196
    19c0:	99 e0       	ldi	r25, 0x09	; 9
    19c2:	28 ec       	ldi	r18, 0xC8	; 200
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	31 97       	sbiw	r30, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <APP_voidInitFuncation+0x4b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ce:	d9 f7       	brne	.-10     	; 0x19c6 <APP_voidInitFuncation+0x4b0>
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <APP_voidInitFuncation+0x4d4>
				_delay_ms(100);
			}

			if (loc_u8PressedKey == 'c')
			{
				if (loc_AAGOutValue == 1)
    19d2:	01 30       	cpi	r16, 0x01	; 1
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <APP_voidInitFuncation+0x4c2>
    19d6:	27 ce       	rjmp	.-946    	; 0x1626 <APP_voidInitFuncation+0x110>
    19d8:	0b ce       	rjmp	.-1002   	; 0x15f0 <APP_voidInitFuncation+0xda>
				_delay_ms(200);
			}

			if (loc_u8PressedKey == 'c')
			{
				if (loc_AAGOutValue == 1)
    19da:	01 30       	cpi	r16, 0x01	; 1
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <APP_voidInitFuncation+0x4ca>
    19de:	da ce       	rjmp	.-588    	; 0x1794 <APP_voidInitFuncation+0x27e>
    19e0:	be ce       	rjmp	.-644    	; 0x175e <APP_voidInitFuncation+0x248>
				_delay_ms(200);
			}

			if (loc_u8PressedKey == 'c')
			{
				if (loc_AAGOutValue == 1)
    19e2:	01 30       	cpi	r16, 0x01	; 1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <APP_voidInitFuncation+0x4d2>
    19e6:	8d cf       	rjmp	.-230    	; 0x1902 <APP_voidInitFuncation+0x3ec>
    19e8:	71 cf       	rjmp	.-286    	; 0x18cc <APP_voidInitFuncation+0x3b6>
			HEEPROM_voidWriteData(EEPROM_AdminPasswordStatus_LOCATION,'1');
			_delay_ms(250);
			break;
		}
	}
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	08 95       	ret

00001a00 <APP_vidDeleteUserFuncation>:
		}
	}
#endif
}
void APP_vidDeleteUserFuncation(void)
{
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
#if 1
	u8 loc_u8PressedKey = NOT_PRESSED;
	u8 loc_u8PosistionCount = 0, loc_u8CountPassword = 0,loc_u8IDLocation,loc_u8IDValue = ' ',loc_u8IDCheckFlag = 0;

	loc_u8PosistionCount = HEEPROM_u8ReadData(EEPROM_PosistionCount_LOCATION);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1a24:	b8 2e       	mov	r11, r24

	CLCD_voidClearScreen();
    1a26:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("Delete user mode");
    1a2a:	8f e0       	ldi	r24, 0x0F	; 15
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1a32:	84 ec       	ldi	r24, 0xC4	; 196
    1a34:	99 e0       	ldi	r25, 0x09	; 9
    1a36:	28 ec       	ldi	r18, 0xC8	; 200
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	31 97       	sbiw	r30, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <APP_vidDeleteUserFuncation+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	d9 f7       	brne	.-10     	; 0x1a3a <APP_vidDeleteUserFuncation+0x3a>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1a44:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" c for Exit");
    1a48:	86 e7       	ldi	r24, 0x76	; 118
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1a50:	84 ec       	ldi	r24, 0xC4	; 196
    1a52:	99 e0       	ldi	r25, 0x09	; 9
    1a54:	28 ec       	ldi	r18, 0xC8	; 200
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	f9 01       	movw	r30, r18
    1a5a:	31 97       	sbiw	r30, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <APP_vidDeleteUserFuncation+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	d9 f7       	brne	.-10     	; 0x1a58 <APP_vidDeleteUserFuncation+0x58>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1a62:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" = To next step");
    1a66:	82 e8       	ldi	r24, 0x82	; 130
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1a6e:	84 ec       	ldi	r24, 0xC4	; 196
    1a70:	99 e0       	ldi	r25, 0x09	; 9
    1a72:	28 ec       	ldi	r18, 0xC8	; 200
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	31 97       	sbiw	r30, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <APP_vidDeleteUserFuncation+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	d9 f7       	brne	.-10     	; 0x1a76 <APP_vidDeleteUserFuncation+0x76>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1a80:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    1a84:	ff 24       	eor	r15, r15
    1a86:	fa 94       	dec	r15
    1a88:	19 82       	std	Y+1, r1	; 0x01
    1a8a:	f8 ec       	ldi	r31, 0xC8	; 200
    1a8c:	cf 2e       	mov	r12, r31
    1a8e:	d1 2c       	mov	r13, r1
    1a90:	e0 e4       	ldi	r30, 0x40	; 64
    1a92:	8e 2e       	mov	r8, r30
    1a94:	ec e9       	ldi	r30, 0x9C	; 156
    1a96:	9e 2e       	mov	r9, r30
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <APP_vidDeleteUserFuncation+0xa2>
    1a9a:	73 e6       	ldi	r23, 0x63	; 99
    1a9c:	f7 2e       	mov	r15, r23
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		MUART_voidSendData('w');
    1aa2:	87 e7       	ldi	r24, 0x77	; 119
    1aa4:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

		if(loc_u8PressedKey != 'c')
    1aa8:	e3 e6       	ldi	r30, 0x63	; 99
    1aaa:	fe 16       	cp	r15, r30
    1aac:	29 f1       	breq	.+74     	; 0x1af8 <APP_vidDeleteUserFuncation+0xf8>
		{
			loc_u8PressedKey = HKPD_u8GetPressedKey();
    1aae:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1ab2:	18 2f       	mov	r17, r24

			CLCD_voidClearScreen();
    1ab4:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("+ in ID mode to ");
    1ab8:	80 e2       	ldi	r24, 0x20	; 32
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("clear");
    1ac8:	81 e3       	ldi	r24, 0x31	; 49
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1ad0:	84 ec       	ldi	r24, 0xC4	; 196
    1ad2:	99 e0       	ldi	r25, 0x09	; 9
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	31 97       	sbiw	r30, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <APP_vidDeleteUserFuncation+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	d9 f7       	brne	.-10     	; 0x1ad4 <APP_vidDeleteUserFuncation+0xd4>
			_delay_ms(250);

			CLCD_voidClearScreen();
    1ade:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Enter user ID");
    1ae2:	87 e3       	ldi	r24, 0x37	; 55
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		}

		if(loc_u8PressedKey == 'c')
    1af2:	13 36       	cpi	r17, 0x63	; 99
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <APP_vidDeleteUserFuncation+0xf8>
    1af6:	f2 c0       	rjmp	.+484    	; 0x1cdc <APP_vidDeleteUserFuncation+0x2dc>
		{
			gol_u8Mode_A = 0;
    1af8:	10 92 fc 02 	sts	0x02FC, r1
			gol_u8FlagMode_A = 0;
    1afc:	10 92 fb 02 	sts	0x02FB, r1
			CLCD_voidClearScreen();
    1b00:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			continue;
		}
	}

#endif
}
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	ff 90       	pop	r15
    1b10:	ef 90       	pop	r14
    1b12:	df 90       	pop	r13
    1b14:	cf 90       	pop	r12
    1b16:	bf 90       	pop	r11
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	08 95       	ret

		loc_u8IDValue = ' ';

		while(1)
		{
			MUART_voidSendData('w');
    1b1e:	87 e7       	ldi	r24, 0x77	; 119
    1b20:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

			loc_u8PressedKey = HKPD_u8GetPressedKey();
    1b24:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1b28:	f8 2e       	mov	r15, r24

			if (loc_u8PressedKey != NOT_PRESSED && loc_u8PressedKey != '+' && loc_u8PressedKey != '=' && loc_u8PressedKey != 'c' && loc_u8IDValue == ' ' )
    1b2a:	ff ef       	ldi	r31, 0xFF	; 255
    1b2c:	8f 17       	cp	r24, r31
    1b2e:	b9 f3       	breq	.-18     	; 0x1b1e <APP_vidDeleteUserFuncation+0x11e>
    1b30:	8b e2       	ldi	r24, 0x2B	; 43
    1b32:	f8 16       	cp	r15, r24
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <APP_vidDeleteUserFuncation+0x138>
    1b36:	c7 c0       	rjmp	.+398    	; 0x1cc6 <APP_vidDeleteUserFuncation+0x2c6>
    1b38:	ed e3       	ldi	r30, 0x3D	; 61
    1b3a:	fe 16       	cp	r15, r30
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <APP_vidDeleteUserFuncation+0x140>
    1b3e:	d0 c0       	rjmp	.+416    	; 0x1ce0 <APP_vidDeleteUserFuncation+0x2e0>
    1b40:	f3 e6       	ldi	r31, 0x63	; 99
    1b42:	ff 16       	cp	r15, r31
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <APP_vidDeleteUserFuncation+0x148>
    1b46:	ad cf       	rjmp	.-166    	; 0x1aa2 <APP_vidDeleteUserFuncation+0xa2>
    1b48:	10 32       	cpi	r17, 0x20	; 32
    1b4a:	49 f7       	brne	.-46     	; 0x1b1e <APP_vidDeleteUserFuncation+0x11e>
			{
				loc_u8IDValue = loc_u8PressedKey;
				CLCD_voidSendData(loc_u8IDValue);
    1b4c:	8f 2d       	mov	r24, r15
    1b4e:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1b52:	1f 2d       	mov	r17, r15
    1b54:	e4 cf       	rjmp	.-56     	; 0x1b1e <APP_vidDeleteUserFuncation+0x11e>

			if(loc_u8PressedKey == '=')
			{
				if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
				{
					CLCD_voidClearScreen();
    1b56:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		if(loc_u8PressedKey == 'c')
		{
			continue;
		}

		if(loc_u8IDValue > '0' && loc_u8IDValue < '6')
    1b5a:	81 2f       	mov	r24, r17
    1b5c:	81 53       	subi	r24, 0x31	; 49
    1b5e:	85 30       	cpi	r24, 0x05	; 5
    1b60:	78 f1       	brcs	.+94     	; 0x1bc0 <APP_vidDeleteUserFuncation+0x1c0>
    1b62:	99 c0       	rjmp	.+306    	; 0x1c96 <APP_vidDeleteUserFuncation+0x296>
				if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
				{
					CLCD_voidClearScreen();
					break;
				}
				else if (loc_u8IDValue == ' ')
    1b64:	10 32       	cpi	r17, 0x20	; 32
    1b66:	c1 f4       	brne	.+48     	; 0x1b98 <APP_vidDeleteUserFuncation+0x198>
				{
					CLCD_voidClearScreen();
    1b68:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter ID");
    1b6c:	85 e4       	ldi	r24, 0x45	; 69
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1b74:	84 ec       	ldi	r24, 0xC4	; 196
    1b76:	99 e0       	ldi	r25, 0x09	; 9
    1b78:	f6 01       	movw	r30, r12
    1b7a:	31 97       	sbiw	r30, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <APP_vidDeleteUserFuncation+0x17a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	d9 f7       	brne	.-10     	; 0x1b78 <APP_vidDeleteUserFuncation+0x178>
					_delay_ms(250);
					CLCD_voidClearScreen();
    1b82:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter user ID");
    1b86:	87 e3       	ldi	r24, 0x37	; 55
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					CLCD_voidSetPosition(1,0);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    1b96:	c3 cf       	rjmp	.-122    	; 0x1b1e <APP_vidDeleteUserFuncation+0x11e>
				}
				else
				{
					CLCD_voidClearScreen();
    1b98:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Invalid operator");
    1b9c:	8e e4       	ldi	r24, 0x4E	; 78
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1ba4:	84 ec       	ldi	r24, 0xC4	; 196
    1ba6:	99 e0       	ldi	r25, 0x09	; 9
    1ba8:	f6 01       	movw	r30, r12
    1baa:	31 97       	sbiw	r30, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <APP_vidDeleteUserFuncation+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	d9 f7       	brne	.-10     	; 0x1ba8 <APP_vidDeleteUserFuncation+0x1a8>
					loc_u8IDValue = ' ';
					_delay_ms(250);
					CLCD_voidClearScreen();
    1bb2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter user ID");
    1bb6:	87 e3       	ldi	r24, 0x37	; 55
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1bbe:	8a c0       	rjmp	.+276    	; 0x1cd4 <APP_vidDeleteUserFuncation+0x2d4>
					CLCD_voidSetPosition(1,0);
    1bc0:	61 e3       	ldi	r22, 0x31	; 49
    1bc2:	e6 2e       	mov	r14, r22
    1bc4:	0f e0       	ldi	r16, 0x0F	; 15

			u8 loc_u8IDCountPosistion = '1';

			while(1)
			{
				MUART_voidSendData('w');
    1bc6:	87 e7       	ldi	r24, 0x77	; 119
    1bc8:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

				if(loc_u8IDValue != HEEPROM_u8ReadData(loc_u8IDLocation) && loc_u8IDValue == loc_u8IDCountPosistion)
    1bcc:	80 2f       	mov	r24, r16
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1bd4:	18 17       	cp	r17, r24
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <APP_vidDeleteUserFuncation+0x1dc>
    1bd8:	1e 15       	cp	r17, r14
    1bda:	71 f0       	breq	.+28     	; 0x1bf8 <APP_vidDeleteUserFuncation+0x1f8>
				{
					break;
				}
				else if (loc_u8IDValue == HEEPROM_u8ReadData(loc_u8IDLocation))
    1bdc:	80 2f       	mov	r24, r16
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1be4:	18 17       	cp	r17, r24
    1be6:	59 f0       	breq	.+22     	; 0x1bfe <APP_vidDeleteUserFuncation+0x1fe>
					loc_u8IDCheckFlag = 1;
					break;
				}
				else
				{
					loc_u8IDLocation += 5;
    1be8:	0b 5f       	subi	r16, 0xFB	; 251
					loc_u8IDCountPosistion++;
				}

				if(loc_u8IDLocation == 36)
    1bea:	04 32       	cpi	r16, 0x24	; 36
    1bec:	29 f0       	breq	.+10     	; 0x1bf8 <APP_vidDeleteUserFuncation+0x1f8>
					break;
				}
				else
				{
					loc_u8IDLocation += 5;
					loc_u8IDCountPosistion++;
    1bee:	e3 94       	inc	r14
    1bf0:	c4 01       	movw	r24, r8
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <APP_vidDeleteUserFuncation+0x1f2>
    1bf6:	e7 cf       	rjmp	.-50     	; 0x1bc6 <APP_vidDeleteUserFuncation+0x1c6>
					break;
				}
				_delay_ms(20);
			}

			if(loc_u8IDCheckFlag == 1)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	b1 f5       	brne	.+108    	; 0x1c6a <APP_vidDeleteUserFuncation+0x26a>
			{
				HEEPROM_voidWriteData(loc_u8IDLocation,'0');
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	c8 01       	movw	r24, r16
    1c02:	60 e3       	ldi	r22, 0x30	; 48
    1c04:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
				HEEPROM_voidWriteData(EEPROM_PosistionCount_LOCATION,loc_u8PosistionCount-1);
    1c08:	ba 94       	dec	r11
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	6b 2d       	mov	r22, r11
    1c10:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
				loc_u8PosistionCount = HEEPROM_u8ReadData(EEPROM_PosistionCount_LOCATION);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1c1c:	b8 2e       	mov	r11, r24
    1c1e:	78 01       	movw	r14, r16
    1c20:	08 94       	sec
    1c22:	e1 1c       	adc	r14, r1
    1c24:	f1 1c       	adc	r15, r1

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 5; loc_u8CountPassword++)
    1c26:	0b 5f       	subi	r16, 0xFB	; 251
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					HEEPROM_voidWriteData(loc_u8IDLocation + loc_u8CountPassword,'0');
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	60 e3       	ldi	r22, 0x30	; 48
    1c2e:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    1c32:	08 94       	sec
    1c34:	e1 1c       	adc	r14, r1
    1c36:	f1 1c       	adc	r15, r1
			{
				HEEPROM_voidWriteData(loc_u8IDLocation,'0');
				HEEPROM_voidWriteData(EEPROM_PosistionCount_LOCATION,loc_u8PosistionCount-1);
				loc_u8PosistionCount = HEEPROM_u8ReadData(EEPROM_PosistionCount_LOCATION);

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 5; loc_u8CountPassword++)
    1c38:	e0 16       	cp	r14, r16
    1c3a:	f1 06       	cpc	r15, r17
    1c3c:	b1 f7       	brne	.-20     	; 0x1c2a <APP_vidDeleteUserFuncation+0x22a>
				{
					HEEPROM_voidWriteData(loc_u8IDLocation + loc_u8CountPassword,'0');
				}
				CLCD_voidClearScreen();
    1c3e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("Data deleted");
    1c42:	8f e5       	ldi	r24, 0x5F	; 95
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("successfully");
    1c52:	8e ea       	ldi	r24, 0xAE	; 174
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1c5a:	84 ec       	ldi	r24, 0xC4	; 196
    1c5c:	99 e0       	ldi	r25, 0x09	; 9
    1c5e:	f6 01       	movw	r30, r12
    1c60:	31 97       	sbiw	r30, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <APP_vidDeleteUserFuncation+0x260>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	d9 f7       	brne	.-10     	; 0x1c5e <APP_vidDeleteUserFuncation+0x25e>
    1c68:	18 cf       	rjmp	.-464    	; 0x1a9a <APP_vidDeleteUserFuncation+0x9a>
				loc_u8PressedKey = 'c';
				continue;
			}
			else
			{
				CLCD_voidClearScreen();
    1c6a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("ID doesn't exist");
    1c6e:	8c e6       	ldi	r24, 0x6C	; 108
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("Try again");
    1c7e:	8d e7       	ldi	r24, 0x7D	; 125
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1c86:	84 ec       	ldi	r24, 0xC4	; 196
    1c88:	99 e0       	ldi	r25, 0x09	; 9
    1c8a:	f6 01       	movw	r30, r12
    1c8c:	31 97       	sbiw	r30, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <APP_vidDeleteUserFuncation+0x28c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	d9 f7       	brne	.-10     	; 0x1c8a <APP_vidDeleteUserFuncation+0x28a>
    1c94:	15 c0       	rjmp	.+42     	; 0x1cc0 <APP_vidDeleteUserFuncation+0x2c0>
				continue;
			}
		}
		else
		{
			CLCD_voidClearScreen();
    1c96:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Invalid ID");
    1c9a:	87 e8       	ldi	r24, 0x87	; 135
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("Try again");
    1caa:	8d e7       	ldi	r24, 0x7D	; 125
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1cb2:	84 ec       	ldi	r24, 0xC4	; 196
    1cb4:	99 e0       	ldi	r25, 0x09	; 9
    1cb6:	f6 01       	movw	r30, r12
    1cb8:	31 97       	sbiw	r30, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <APP_vidDeleteUserFuncation+0x2b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	d9 f7       	brne	.-10     	; 0x1cb6 <APP_vidDeleteUserFuncation+0x2b6>
			_delay_ms(250);
			CLCD_voidClearScreen();
    1cc0:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    1cc4:	ee ce       	rjmp	.-548    	; 0x1aa2 <APP_vidDeleteUserFuncation+0xa2>
				break;
			}

			if(loc_u8PressedKey == '+')
			{
				CLCD_voidSetPosition(1,0);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData(' ');
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
				loc_u8IDValue = ' ';
				CLCD_voidSetPosition(1,0);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    1cdc:	10 e2       	ldi	r17, 0x20	; 32
    1cde:	1f cf       	rjmp	.-450    	; 0x1b1e <APP_vidDeleteUserFuncation+0x11e>
			}

			if(loc_u8PressedKey == '=')
			{
				if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
    1ce0:	10 33       	cpi	r17, 0x30	; 48
    1ce2:	08 f4       	brcc	.+2      	; 0x1ce6 <APP_vidDeleteUserFuncation+0x2e6>
    1ce4:	3f cf       	rjmp	.-386    	; 0x1b64 <APP_vidDeleteUserFuncation+0x164>
    1ce6:	37 cf       	rjmp	.-402    	; 0x1b56 <APP_vidDeleteUserFuncation+0x156>

00001ce8 <APP_vidAddUserFuncation>:
		}
	}
}

void APP_vidAddUserFuncation(void)
{
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	df 92       	push	r13
    1cf2:	ef 92       	push	r14
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
#if 1
	u8 loc_u8PressedKey = NOT_PRESSED;
	u8 loc_u8PosistionCount = 0, loc_u8CountPassword = 0,loc_u8display,loc_u8IDLocation,loc_u8IDValue = ' ',loc_u8IDCheckFlag = 0;

	loc_u8PosistionCount = HEEPROM_u8ReadData(EEPROM_PosistionCount_LOCATION);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1d0c:	d8 2e       	mov	r13, r24

	CLCD_voidClearScreen();
    1d0e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("Add user mode");
    1d12:	82 e9       	ldi	r24, 0x92	; 146
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1d1a:	84 ec       	ldi	r24, 0xC4	; 196
    1d1c:	99 e0       	ldi	r25, 0x09	; 9
    1d1e:	28 ec       	ldi	r18, 0xC8	; 200
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	f9 01       	movw	r30, r18
    1d24:	31 97       	sbiw	r30, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <APP_vidAddUserFuncation+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	d9 f7       	brne	.-10     	; 0x1d22 <APP_vidAddUserFuncation+0x3a>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1d2c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" c for Exit");
    1d30:	86 e7       	ldi	r24, 0x76	; 118
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1d38:	84 ec       	ldi	r24, 0xC4	; 196
    1d3a:	99 e0       	ldi	r25, 0x09	; 9
    1d3c:	28 ec       	ldi	r18, 0xC8	; 200
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	f9 01       	movw	r30, r18
    1d42:	31 97       	sbiw	r30, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <APP_vidAddUserFuncation+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	d9 f7       	brne	.-10     	; 0x1d40 <APP_vidAddUserFuncation+0x58>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1d4a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" = To next step");
    1d4e:	82 e8       	ldi	r24, 0x82	; 130
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1d56:	84 ec       	ldi	r24, 0xC4	; 196
    1d58:	99 e0       	ldi	r25, 0x09	; 9
    1d5a:	28 ec       	ldi	r18, 0xC8	; 200
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	f9 01       	movw	r30, r18
    1d60:	31 97       	sbiw	r30, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <APP_vidAddUserFuncation+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	d9 f7       	brne	.-10     	; 0x1d5e <APP_vidAddUserFuncation+0x76>
	_delay_ms(250);
	CLCD_voidClearScreen();
    1d68:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    1d6c:	ee 24       	eor	r14, r14
    1d6e:	ea 94       	dec	r14
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	08 ec       	ldi	r16, 0xC8	; 200
    1d74:	80 2e       	mov	r8, r16
    1d76:	91 2c       	mov	r9, r1
    1d78:	10 e4       	ldi	r17, 0x40	; 64
    1d7a:	a1 2e       	mov	r10, r17
    1d7c:	1c e9       	ldi	r17, 0x9C	; 156
    1d7e:	b1 2e       	mov	r11, r17
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <APP_vidAddUserFuncation+0x9e>
    1d82:	b3 e6       	ldi	r27, 0x63	; 99
    1d84:	eb 2e       	mov	r14, r27

	while(1)
	{
		MUART_voidSendData('w');
    1d86:	87 e7       	ldi	r24, 0x77	; 119
    1d88:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

		if(loc_u8PressedKey != 'c')
    1d8c:	83 e6       	ldi	r24, 0x63	; 99
    1d8e:	e8 16       	cp	r14, r24
    1d90:	29 f1       	breq	.+74     	; 0x1ddc <APP_vidAddUserFuncation+0xf4>
		{
			loc_u8PressedKey = HKPD_u8GetPressedKey();
    1d92:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1d96:	18 2f       	mov	r17, r24

			CLCD_voidClearScreen();
    1d98:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("+ in ID mode to ");
    1d9c:	80 e2       	ldi	r24, 0x20	; 32
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("clear");
    1dac:	81 e3       	ldi	r24, 0x31	; 49
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1db4:	84 ec       	ldi	r24, 0xC4	; 196
    1db6:	99 e0       	ldi	r25, 0x09	; 9
    1db8:	f4 01       	movw	r30, r8
    1dba:	31 97       	sbiw	r30, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <APP_vidAddUserFuncation+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	d9 f7       	brne	.-10     	; 0x1db8 <APP_vidAddUserFuncation+0xd0>
			_delay_ms(250);

			CLCD_voidClearScreen();
    1dc2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Enter user ID");
    1dc6:	87 e3       	ldi	r24, 0x37	; 55
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		}

		if(loc_u8PressedKey == 'c')
    1dd6:	13 36       	cpi	r17, 0x63	; 99
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <APP_vidAddUserFuncation+0xf4>
    1dda:	59 c1       	rjmp	.+690    	; 0x208e <APP_vidAddUserFuncation+0x3a6>
		{
			gol_u8Mode_A = 0;
    1ddc:	10 92 fc 02 	sts	0x02FC, r1
			gol_u8FlagMode_A = 0;
    1de0:	10 92 fb 02 	sts	0x02FB, r1
			CLCD_voidClearScreen();
    1de4:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidClearScreen();
			continue;
		}
	}
#endif
}
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	bf 90       	pop	r11
    1dfa:	af 90       	pop	r10
    1dfc:	9f 90       	pop	r9
    1dfe:	8f 90       	pop	r8
    1e00:	08 95       	ret

		loc_u8IDValue = ' ';

		while(1)
		{
			MUART_voidSendData('w');
    1e02:	87 e7       	ldi	r24, 0x77	; 119
    1e04:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

			loc_u8PressedKey = HKPD_u8GetPressedKey();
    1e08:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1e0c:	e8 2e       	mov	r14, r24

			if (loc_u8PressedKey != NOT_PRESSED && loc_u8PressedKey != '+' && loc_u8PressedKey != '=' && loc_u8PressedKey != 'c' && loc_u8IDValue == ' ')
    1e0e:	ef ef       	ldi	r30, 0xFF	; 255
    1e10:	8e 17       	cp	r24, r30
    1e12:	b9 f3       	breq	.-18     	; 0x1e02 <APP_vidAddUserFuncation+0x11a>
    1e14:	fb e2       	ldi	r31, 0x2B	; 43
    1e16:	8f 17       	cp	r24, r31
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <APP_vidAddUserFuncation+0x134>
    1e1a:	2e c1       	rjmp	.+604    	; 0x2078 <APP_vidAddUserFuncation+0x390>
    1e1c:	8d e3       	ldi	r24, 0x3D	; 61
    1e1e:	e8 16       	cp	r14, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <APP_vidAddUserFuncation+0x13c>
    1e22:	37 c1       	rjmp	.+622    	; 0x2092 <APP_vidAddUserFuncation+0x3aa>
    1e24:	e3 e6       	ldi	r30, 0x63	; 99
    1e26:	ee 16       	cp	r14, r30
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <APP_vidAddUserFuncation+0x144>
    1e2a:	ad cf       	rjmp	.-166    	; 0x1d86 <APP_vidAddUserFuncation+0x9e>
    1e2c:	10 32       	cpi	r17, 0x20	; 32
    1e2e:	49 f7       	brne	.-46     	; 0x1e02 <APP_vidAddUserFuncation+0x11a>
			{
				loc_u8IDValue = loc_u8PressedKey;
				CLCD_voidSendData(loc_u8IDValue);
    1e30:	8e 2d       	mov	r24, r14
    1e32:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1e36:	1e 2d       	mov	r17, r14
    1e38:	e4 cf       	rjmp	.-56     	; 0x1e02 <APP_vidAddUserFuncation+0x11a>

			if(loc_u8PressedKey == '=')
			{
				if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
				{
					CLCD_voidClearScreen();
    1e3a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		if(loc_u8PressedKey == 'c')
		{
			continue;
		}

		if(loc_u8IDValue > '0' && loc_u8IDValue < '6')
    1e3e:	81 2f       	mov	r24, r17
    1e40:	81 53       	subi	r24, 0x31	; 49
    1e42:	85 30       	cpi	r24, 0x05	; 5
    1e44:	78 f1       	brcs	.+94     	; 0x1ea4 <APP_vidAddUserFuncation+0x1bc>
    1e46:	fa c0       	rjmp	.+500    	; 0x203c <APP_vidAddUserFuncation+0x354>
				if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
				{
					CLCD_voidClearScreen();
					break;
				}
				else if (loc_u8IDValue == ' ')
    1e48:	10 32       	cpi	r17, 0x20	; 32
    1e4a:	c1 f4       	brne	.+48     	; 0x1e7c <APP_vidAddUserFuncation+0x194>
				{
					CLCD_voidClearScreen();
    1e4c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter ID");
    1e50:	85 e4       	ldi	r24, 0x45	; 69
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1e58:	84 ec       	ldi	r24, 0xC4	; 196
    1e5a:	99 e0       	ldi	r25, 0x09	; 9
    1e5c:	f4 01       	movw	r30, r8
    1e5e:	31 97       	sbiw	r30, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <APP_vidAddUserFuncation+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	d9 f7       	brne	.-10     	; 0x1e5c <APP_vidAddUserFuncation+0x174>
					_delay_ms(250);
					CLCD_voidClearScreen();
    1e66:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter user ID");
    1e6a:	87 e3       	ldi	r24, 0x37	; 55
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					CLCD_voidSetPosition(1,0);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    1e7a:	c3 cf       	rjmp	.-122    	; 0x1e02 <APP_vidAddUserFuncation+0x11a>
				}
				else
				{
					CLCD_voidClearScreen();
    1e7c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Invalid operator");
    1e80:	8e e4       	ldi	r24, 0x4E	; 78
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1e88:	84 ec       	ldi	r24, 0xC4	; 196
    1e8a:	99 e0       	ldi	r25, 0x09	; 9
    1e8c:	f4 01       	movw	r30, r8
    1e8e:	31 97       	sbiw	r30, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <APP_vidAddUserFuncation+0x1a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e94:	d9 f7       	brne	.-10     	; 0x1e8c <APP_vidAddUserFuncation+0x1a4>
					loc_u8IDValue = ' ';
					_delay_ms(250);
					CLCD_voidClearScreen();
    1e96:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter user ID");
    1e9a:	87 e3       	ldi	r24, 0x37	; 55
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1ea2:	f1 c0       	rjmp	.+482    	; 0x2086 <APP_vidAddUserFuncation+0x39e>
					CLCD_voidSetPosition(1,0);
    1ea4:	0f e0       	ldi	r16, 0x0F	; 15
    1ea6:	a1 e3       	ldi	r26, 0x31	; 49
    1ea8:	fa 2e       	mov	r15, r26
			loc_u8IDLocation = EEPROM_ID1_LOCATION;
			u8 loc_u8IDCountPosistion = '1';

			while(1)
			{
				MUART_voidSendData('w');
    1eaa:	87 e7       	ldi	r24, 0x77	; 119
    1eac:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

				if(loc_u8IDValue != HEEPROM_u8ReadData(loc_u8IDLocation) && loc_u8IDValue == loc_u8IDCountPosistion)
    1eb0:	80 2f       	mov	r24, r16
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1eb8:	18 17       	cp	r17, r24
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <APP_vidAddUserFuncation+0x1d8>
    1ebc:	1f 15       	cp	r17, r15
    1ebe:	89 f0       	breq	.+34     	; 0x1ee2 <APP_vidAddUserFuncation+0x1fa>
				{
					break;
				}
				else if (loc_u8IDValue == HEEPROM_u8ReadData(loc_u8IDLocation))
    1ec0:	80 2f       	mov	r24, r16
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1ec8:	18 17       	cp	r17, r24
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <APP_vidAddUserFuncation+0x1ea>
    1ecc:	f1 e0       	ldi	r31, 0x01	; 1
    1ece:	f9 83       	std	Y+1, r31	; 0x01
    1ed0:	0b c0       	rjmp	.+22     	; 0x1ee8 <APP_vidAddUserFuncation+0x200>
					loc_u8IDCheckFlag = 1;
					break;
				}
				else
				{
					loc_u8IDLocation += 5;
    1ed2:	0b 5f       	subi	r16, 0xFB	; 251
					loc_u8IDCountPosistion++;
				}

				if(loc_u8IDLocation == 36)
    1ed4:	04 32       	cpi	r16, 0x24	; 36
    1ed6:	29 f0       	breq	.+10     	; 0x1ee2 <APP_vidAddUserFuncation+0x1fa>
					break;
				}
				else
				{
					loc_u8IDLocation += 5;
					loc_u8IDCountPosistion++;
    1ed8:	f3 94       	inc	r15
    1eda:	c5 01       	movw	r24, r10
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <APP_vidAddUserFuncation+0x1f4>
    1ee0:	e4 cf       	rjmp	.-56     	; 0x1eaa <APP_vidAddUserFuncation+0x1c2>
					break;
				}
				_delay_ms(20);
			}

			if(loc_u8IDCheckFlag == 1)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	b1 f4       	brne	.+44     	; 0x1f14 <APP_vidAddUserFuncation+0x22c>
			{
				CLCD_voidClearScreen();
    1ee8:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("ID already exist");
    1eec:	80 ea       	ldi	r24, 0xA0	; 160
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("Try again");
    1efc:	8d e7       	ldi	r24, 0x7D	; 125
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1f04:	84 ec       	ldi	r24, 0xC4	; 196
    1f06:	99 e0       	ldi	r25, 0x09	; 9
    1f08:	f4 01       	movw	r30, r8
    1f0a:	31 97       	sbiw	r30, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <APP_vidAddUserFuncation+0x222>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	d9 f7       	brne	.-10     	; 0x1f08 <APP_vidAddUserFuncation+0x220>
    1f12:	a9 c0       	rjmp	.+338    	; 0x2066 <APP_vidAddUserFuncation+0x37e>
				CLCD_voidClearScreen();
				continue;
			}
			else
			{
				HEEPROM_voidWriteData(loc_u8IDLocation,loc_u8IDValue);
    1f14:	80 2f       	mov	r24, r16
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	61 2f       	mov	r22, r17
    1f1a:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
				HEEPROM_voidWriteData(EEPROM_PosistionCount_LOCATION,loc_u8PosistionCount+1);
    1f1e:	d3 94       	inc	r13
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	6d 2d       	mov	r22, r13
    1f26:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
				loc_u8PosistionCount = HEEPROM_u8ReadData(EEPROM_PosistionCount_LOCATION);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    1f32:	d8 2e       	mov	r13, r24

				CLCD_voidClearScreen();
    1f34:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("c in password");
    1f38:	8b eb       	ldi	r24, 0xBB	; 187
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("mode to clear");
    1f48:	89 ec       	ldi	r24, 0xC9	; 201
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    1f50:	84 ec       	ldi	r24, 0xC4	; 196
    1f52:	99 e0       	ldi	r25, 0x09	; 9
    1f54:	f4 01       	movw	r30, r8
    1f56:	31 97       	sbiw	r30, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <APP_vidAddUserFuncation+0x26e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5c:	d9 f7       	brne	.-10     	; 0x1f54 <APP_vidAddUserFuncation+0x26c>
				_delay_ms(250);

				CLCD_voidClearScreen();
    1f5e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("Enter password");
    1f62:	82 e9       	ldi	r24, 0x92	; 146
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    1f72:	10 e0       	ldi	r17, 0x00	; 0
								_delay_ms(200);
								CLCD_voidSetPosition(1, loc_u8CountPassword-1);
								CLCD_voidSendData('*');
								_delay_ms(200);

								HEEPROM_voidWriteData(loc_u8IDLocation + loc_u8CountPassword,loc_u8PressedKey);
    1f74:	e0 2e       	mov	r14, r16
    1f76:	ff 24       	eor	r15, r15
				CLCD_voidSetPosition(1,0);
				u8 loc_u8Key = 0,loc_UserOutValue = 0;

				while(1)
				{
					MUART_voidSendData('w');
    1f78:	87 e7       	ldi	r24, 0x77	; 119
    1f7a:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

					loc_u8PressedKey = HKPD_u8GetPressedKey();
    1f7e:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1f82:	08 2f       	mov	r16, r24

					if(loc_u8Key == 0)
    1f84:	11 23       	and	r17, r17
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <APP_vidAddUserFuncation+0x2a2>
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <APP_vidAddUserFuncation+0x320>
    1f8a:	11 e0       	ldi	r17, 0x01	; 1
					{
						for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
						{
							do
							{
								loc_u8PressedKey = HKPD_u8GetPressedKey();
    1f8c:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    1f90:	08 2f       	mov	r16, r24
							}while(	loc_u8PressedKey == NOT_PRESSED);
    1f92:	8f 3f       	cpi	r24, 0xFF	; 255
    1f94:	d9 f3       	breq	.-10     	; 0x1f8c <APP_vidAddUserFuncation+0x2a4>

							if(loc_u8PressedKey == 'c' && loc_UserOutValue == 0 )
    1f96:	83 36       	cpi	r24, 0x63	; 99
    1f98:	79 f4       	brne	.+30     	; 0x1fb8 <APP_vidAddUserFuncation+0x2d0>
							{
								loc_u8CountPassword = 0;
								CLCD_voidSetPosition(1, loc_u8CountPassword);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
								CLCD_voidSendData(' ');
    1fa2:	80 e2       	ldi	r24, 0x20	; 32
    1fa4:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1fa8:	80 ed       	ldi	r24, 0xD0	; 208
    1faa:	97 e0       	ldi	r25, 0x07	; 7
    1fac:	f4 01       	movw	r30, r8
    1fae:	31 97       	sbiw	r30, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <APP_vidAddUserFuncation+0x2c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	d9 f7       	brne	.-10     	; 0x1fac <APP_vidAddUserFuncation+0x2c4>
    1fb6:	5a c0       	rjmp	.+180    	; 0x206c <APP_vidAddUserFuncation+0x384>
									loc_UserOutValue = 0;
									loc_u8CountPassword = 0;
									CLCD_voidSetPosition(1, loc_u8CountPassword);
								}
							}
							else if (loc_u8CountPassword < 5)
    1fb8:	15 30       	cpi	r17, 0x05	; 5
    1fba:	f8 f4       	brcc	.+62     	; 0x1ffa <APP_vidAddUserFuncation+0x312>
							{
								CLCD_voidSendData(loc_u8PressedKey);
    1fbc:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1fc0:	80 ed       	ldi	r24, 0xD0	; 208
    1fc2:	97 e0       	ldi	r25, 0x07	; 7
    1fc4:	f4 01       	movw	r30, r8
    1fc6:	31 97       	sbiw	r30, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <APP_vidAddUserFuncation+0x2de>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	d9 f7       	brne	.-10     	; 0x1fc4 <APP_vidAddUserFuncation+0x2dc>
								_delay_ms(200);
								CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    1fce:	61 2f       	mov	r22, r17
    1fd0:	61 50       	subi	r22, 0x01	; 1
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
								CLCD_voidSendData('*');
    1fd8:	8a e2       	ldi	r24, 0x2A	; 42
    1fda:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    1fde:	80 ed       	ldi	r24, 0xD0	; 208
    1fe0:	97 e0       	ldi	r25, 0x07	; 7
    1fe2:	f4 01       	movw	r30, r8
    1fe4:	31 97       	sbiw	r30, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <APP_vidAddUserFuncation+0x2fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	d9 f7       	brne	.-10     	; 0x1fe2 <APP_vidAddUserFuncation+0x2fa>
								_delay_ms(200);

								HEEPROM_voidWriteData(loc_u8IDLocation + loc_u8CountPassword,loc_u8PressedKey);
    1fec:	c7 01       	movw	r24, r14
    1fee:	81 0f       	add	r24, r17
    1ff0:	91 1d       	adc	r25, r1
    1ff2:	60 2f       	mov	r22, r16
    1ff4:	0e 94 a2 07 	call	0xf44	; 0xf44 <HEEPROM_voidWriteData>
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <APP_vidAddUserFuncation+0x318>
							}
							else if (loc_u8PressedKey == '=' && loc_u8CountPassword >= 5)
    1ffa:	8d 33       	cpi	r24, 0x3D	; 61
    1ffc:	49 f0       	breq	.+18     	; 0x2010 <APP_vidAddUserFuncation+0x328>
								loc_u8PressedKey = '=';
								break;
							}
							else
							{
								loc_u8CountPassword-=1;
    1ffe:	11 50       	subi	r17, 0x01	; 1

					loc_u8PressedKey = HKPD_u8GetPressedKey();

					if(loc_u8Key == 0)
					{
						for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    2000:	1f 5f       	subi	r17, 0xFF	; 255
    2002:	16 30       	cpi	r17, 0x06	; 6
    2004:	08 f4       	brcc	.+2      	; 0x2008 <APP_vidAddUserFuncation+0x320>
    2006:	c2 cf       	rjmp	.-124    	; 0x1f8c <APP_vidAddUserFuncation+0x2a4>
    2008:	11 e0       	ldi	r17, 0x01	; 1
							}
						}
						loc_u8Key = 1;
					}

					if(loc_u8PressedKey == '=')
    200a:	0d 33       	cpi	r16, 0x3D	; 61
    200c:	09 f0       	breq	.+2      	; 0x2010 <APP_vidAddUserFuncation+0x328>
    200e:	b4 cf       	rjmp	.-152    	; 0x1f78 <APP_vidAddUserFuncation+0x290>
					{
						CLCD_voidClearScreen();
    2010:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
						CLCD_voidSendString("Data Added");
    2014:	81 eb       	ldi	r24, 0xB1	; 177
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
						CLCD_voidSetPosition(1,0);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendString("successfully");
    2024:	8e ea       	ldi	r24, 0xAE	; 174
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    202c:	84 ec       	ldi	r24, 0xC4	; 196
    202e:	99 e0       	ldi	r25, 0x09	; 9
    2030:	f4 01       	movw	r30, r8
    2032:	31 97       	sbiw	r30, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <APP_vidAddUserFuncation+0x34a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	d9 f7       	brne	.-10     	; 0x2030 <APP_vidAddUserFuncation+0x348>
    203a:	a3 ce       	rjmp	.-698    	; 0x1d82 <APP_vidAddUserFuncation+0x9a>
				}
			}
		}
		else
		{
			CLCD_voidClearScreen();
    203c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Invalid ID");
    2040:	87 e8       	ldi	r24, 0x87	; 135
    2042:	91 e0       	ldi	r25, 0x01	; 1
    2044:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("Try again");
    2050:	8d e7       	ldi	r24, 0x7D	; 125
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2058:	84 ec       	ldi	r24, 0xC4	; 196
    205a:	99 e0       	ldi	r25, 0x09	; 9
    205c:	f4 01       	movw	r30, r8
    205e:	31 97       	sbiw	r30, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <APP_vidAddUserFuncation+0x376>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	d9 f7       	brne	.-10     	; 0x205c <APP_vidAddUserFuncation+0x374>
			_delay_ms(250);
			CLCD_voidClearScreen();
    2066:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    206a:	8d ce       	rjmp	.-742    	; 0x1d86 <APP_vidAddUserFuncation+0x9e>
								}
								if (loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
								{
									loc_UserOutValue = 0;
									loc_u8CountPassword = 0;
									CLCD_voidSetPosition(1, loc_u8CountPassword);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	c4 cf       	rjmp	.-120    	; 0x2000 <APP_vidAddUserFuncation+0x318>
				break;
			}

			if(loc_u8PressedKey == '+')
			{
				CLCD_voidSetPosition(1,0);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendData(' ');
    2080:	80 e2       	ldi	r24, 0x20	; 32
    2082:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
				loc_u8IDValue = ' ';
				CLCD_voidSetPosition(1,0);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    208e:	10 e2       	ldi	r17, 0x20	; 32
    2090:	b8 ce       	rjmp	.-656    	; 0x1e02 <APP_vidAddUserFuncation+0x11a>
			}

			if(loc_u8PressedKey == '=')
			{
				if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
    2092:	10 33       	cpi	r17, 0x30	; 48
    2094:	08 f4       	brcc	.+2      	; 0x2098 <APP_vidAddUserFuncation+0x3b0>
    2096:	d8 ce       	rjmp	.-592    	; 0x1e48 <APP_vidAddUserFuncation+0x160>
    2098:	d0 ce       	rjmp	.-608    	; 0x1e3a <APP_vidAddUserFuncation+0x152>

0000209a <APP_voidAdminMenu>:
		CLCD_voidClearScreen();
	}
}

void APP_voidAdminMenu(void)
{
    209a:	1f 93       	push	r17
	u8 loc_u8PressedKey;
	gol_u8Mode_A = 0;
    209c:	10 92 fc 02 	sts	0x02FC, r1
	gol_u8FlagMode_A = 0;
    20a0:	10 92 fb 02 	sts	0x02FB, r1

	CLCD_voidClearScreen();
    20a4:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString("Welcome to Admin");
    20a8:	8c eb       	ldi	r24, 0xBC	; 188
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	CLCD_voidSetPosition(1,0);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
	CLCD_voidSendString("Mode");
    20b8:	8d ec       	ldi	r24, 0xCD	; 205
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    20c0:	84 ec       	ldi	r24, 0xC4	; 196
    20c2:	99 e0       	ldi	r25, 0x09	; 9
    20c4:	28 ec       	ldi	r18, 0xC8	; 200
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	f9 01       	movw	r30, r18
    20ca:	31 97       	sbiw	r30, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <APP_voidAdminMenu+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	d9 f7       	brne	.-10     	; 0x20c8 <APP_voidAdminMenu+0x2e>
	_delay_ms(250);
	CLCD_voidClearScreen();
    20d2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	CLCD_voidSendString(" * for Exit");
    20d6:	82 ed       	ldi	r24, 0xD2	; 210
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    20de:	84 ec       	ldi	r24, 0xC4	; 196
    20e0:	99 e0       	ldi	r25, 0x09	; 9
    20e2:	28 ec       	ldi	r18, 0xC8	; 200
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	f9 01       	movw	r30, r18
    20e8:	31 97       	sbiw	r30, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <APP_voidAdminMenu+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	d9 f7       	brne	.-10     	; 0x20e6 <APP_voidAdminMenu+0x4c>
	_delay_ms(250);
	CLCD_voidClearScreen();
    20f0:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>

	while(1)
	{
		MUART_voidSendData('w');
    20f4:	87 e7       	ldi	r24, 0x77	; 119
    20f6:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

		CLCD_voidSetPosition(0,0);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("1 AddUr 2 DelUr");
    2102:	8e ed       	ldi	r24, 0xDE	; 222
    2104:	91 e0       	ldi	r25, 0x01	; 1
    2106:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("3Change guest PW");
    2112:	8e ee       	ldi	r24, 0xEE	; 238
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>

		loc_u8PressedKey = HKPD_u8GetPressedKey();
    211a:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    211e:	18 2f       	mov	r17, r24

		if (gol_u8FlagMode_A == 0 && loc_u8PressedKey < '4' && loc_u8PressedKey > '0')
    2120:	80 91 fb 02 	lds	r24, 0x02FB
    2124:	88 23       	and	r24, r24
    2126:	51 f4       	brne	.+20     	; 0x213c <APP_voidAdminMenu+0xa2>
    2128:	14 33       	cpi	r17, 0x34	; 52
    212a:	40 f4       	brcc	.+16     	; 0x213c <APP_voidAdminMenu+0xa2>
    212c:	11 33       	cpi	r17, 0x31	; 49
    212e:	30 f0       	brcs	.+12     	; 0x213c <APP_voidAdminMenu+0xa2>
		{
			gol_u8Mode_A = loc_u8PressedKey;
    2130:	10 93 fc 02 	sts	0x02FC, r17
			loc_u8PressedKey = NOT_PRESSED;
			gol_u8FlagMode_A = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	80 93 fb 02 	sts	0x02FB, r24
    213a:	1f ef       	ldi	r17, 0xFF	; 255
		}

		if(gol_u8Mode_A == '1')
    213c:	80 91 fc 02 	lds	r24, 0x02FC
    2140:	81 33       	cpi	r24, 0x31	; 49
    2142:	11 f4       	brne	.+4      	; 0x2148 <APP_voidAdminMenu+0xae>
		{
			APP_vidAddUserFuncation();
    2144:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <APP_vidAddUserFuncation>
		}

		if(gol_u8Mode_A == '2')
    2148:	80 91 fc 02 	lds	r24, 0x02FC
    214c:	82 33       	cpi	r24, 0x32	; 50
    214e:	11 f4       	brne	.+4      	; 0x2154 <APP_voidAdminMenu+0xba>
		{
			APP_vidDeleteUserFuncation();
    2150:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <APP_vidDeleteUserFuncation>
		}

		if(gol_u8Mode_A == '3')
    2154:	80 91 fc 02 	lds	r24, 0x02FC
    2158:	83 33       	cpi	r24, 0x33	; 51
    215a:	11 f4       	brne	.+4      	; 0x2160 <APP_voidAdminMenu+0xc6>
		{
			APP_vidChangeGuestPasswordFuncation();
    215c:	0e 94 bc 09 	call	0x1378	; 0x1378 <APP_vidChangeGuestPasswordFuncation>
		}

		if(loc_u8PressedKey == '*')
    2160:	1a 32       	cpi	r17, 0x2A	; 42
    2162:	41 f6       	brne	.-112    	; 0x20f4 <APP_voidAdminMenu+0x5a>
		{
			gol_u8FlagMode = 0;
    2164:	10 92 fa 02 	sts	0x02FA, r1
			gol_u8Mode = '0';
    2168:	80 e3       	ldi	r24, 0x30	; 48
    216a:	80 93 fe 02 	sts	0x02FE, r24
			CLCD_voidClearScreen();
    216e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			break;
		}
	}
}
    2172:	1f 91       	pop	r17
    2174:	08 95       	ret

00002176 <APP_vidAdminFunction>:
	}
#endif
}

void APP_vidAdminFunction (void)
{
    2176:	6f 92       	push	r6
    2178:	7f 92       	push	r7
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <APP_vidAdminFunction+0x1e>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <APP_vidAdminFunction+0x20>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <APP_vidAdminFunction+0x22>
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
	u8 loc_AdminFlag = 0, loc_AdminTrail = 1, loc_AdminOutValue = 0;

	u8 loc_u8PressedKey, loc_u8CountPassword;

	u8 loc_u8AlarmBuffer;
	MDIO_voidGetPinValue(DIO_PORTC, DIO_PIN2, &loc_u8AlarmBuffer);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	62 e0       	ldi	r22, 0x02	; 2
    21a0:	ae 01       	movw	r20, r28
    21a2:	4f 5f       	subi	r20, 0xFF	; 255
    21a4:	5f 4f       	sbci	r21, 0xFF	; 255
    21a6:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>

	if(loc_u8AlarmBuffer == DIO_PIN_LOW)
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	88 23       	and	r24, r24
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <APP_vidAdminFunction+0x3c>
    21b0:	31 c1       	rjmp	.+610    	; 0x2414 <APP_vidAdminFunction+0x29e>
	{
		CLCD_voidClearScreen();
    21b2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("c in password");
    21b6:	8b eb       	ldi	r24, 0xBB	; 187
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("mode to clear");
    21c6:	89 ec       	ldi	r24, 0xC9	; 201
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    21ce:	84 ec       	ldi	r24, 0xC4	; 196
    21d0:	99 e0       	ldi	r25, 0x09	; 9
    21d2:	28 ec       	ldi	r18, 0xC8	; 200
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	f9 01       	movw	r30, r18
    21d8:	31 97       	sbiw	r30, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <APP_vidAdminFunction+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	d9 f7       	brne	.-10     	; 0x21d6 <APP_vidAdminFunction+0x60>
		_delay_ms(250);
		CLCD_voidClearScreen();
    21e0:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("c to exit");
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    21ec:	84 ec       	ldi	r24, 0xC4	; 196
    21ee:	99 e0       	ldi	r25, 0x09	; 9
    21f0:	28 ec       	ldi	r18, 0xC8	; 200
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	f9 01       	movw	r30, r18
    21f6:	31 97       	sbiw	r30, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <APP_vidAdminFunction+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	d9 f7       	brne	.-10     	; 0x21f4 <APP_vidAdminFunction+0x7e>
		_delay_ms(250);
		CLCD_voidClearScreen();
    21fe:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" = To next step");
    2202:	82 e8       	ldi	r24, 0x82	; 130
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    220a:	84 ec       	ldi	r24, 0xC4	; 196
    220c:	99 e0       	ldi	r25, 0x09	; 9
    220e:	28 ec       	ldi	r18, 0xC8	; 200
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	f9 01       	movw	r30, r18
    2214:	31 97       	sbiw	r30, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <APP_vidAdminFunction+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	d9 f7       	brne	.-10     	; 0x2212 <APP_vidAdminFunction+0x9c>
		_delay_ms(250);
		CLCD_voidClearScreen();
    221c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2220:	aa 24       	eor	r10, r10
    2222:	a3 94       	inc	r10
    2224:	bb 24       	eor	r11, r11
    2226:	92 e0       	ldi	r25, 0x02	; 2
    2228:	c9 2e       	mov	r12, r25
    222a:	d1 2c       	mov	r13, r1
    222c:	e1 2c       	mov	r14, r1
    222e:	f1 2c       	mov	r15, r1
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	88 2e       	mov	r8, r24
    2234:	91 2c       	mov	r9, r1
						CLCD_voidSendData(loc_u8PressedKey);
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
						CLCD_voidSendData('*');
						_delay_ms(200);
						Admin.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    2236:	3e 01       	movw	r6, r28
    2238:	08 94       	sec
    223a:	61 1c       	adc	r6, r1
    223c:	71 1c       	adc	r7, r1
		_delay_ms(250);
		CLCD_voidClearScreen();

		while(loc_AdminFlag == 0)
		{
			MUART_voidSendData('w');
    223e:	87 e7       	ldi	r24, 0x77	; 119
    2240:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

			CLCD_voidSendString("Enter Admin PW");
    2244:	87 ed       	ldi	r24, 0xD7	; 215
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			while(1)
			{
				MUART_voidSendData('w');
    2254:	87 e7       	ldi	r24, 0x77	; 119
    2256:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

				loc_u8PressedKey = HKPD_u8GetPressedKey();
    225a:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    225e:	11 e0       	ldi	r17, 0x01	; 1

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
				{
					MUART_voidSendData('w');
    2260:	87 e7       	ldi	r24, 0x77	; 119
    2262:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

					do
					{
						loc_u8PressedKey = HKPD_u8GetPressedKey();
    2266:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    226a:	08 2f       	mov	r16, r24
					}while(	loc_u8PressedKey == NOT_PRESSED);
    226c:	8f 3f       	cpi	r24, 0xFF	; 255
    226e:	d9 f3       	breq	.-10     	; 0x2266 <APP_vidAdminFunction+0xf0>

					if(loc_u8PressedKey == 'c' && loc_AdminOutValue == 0)
    2270:	83 36       	cpi	r24, 0x63	; 99
    2272:	d1 f4       	brne	.+52     	; 0x22a8 <APP_vidAdminFunction+0x132>
    2274:	bb 20       	and	r11, r11
    2276:	09 f4       	brne	.+2      	; 0x227a <APP_vidAdminFunction+0x104>
    2278:	c3 c0       	rjmp	.+390    	; 0x2400 <APP_vidAdminFunction+0x28a>
						break;
					}

					if (loc_u8PressedKey == 'c')
					{
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    227a:	12 50       	subi	r17, 0x02	; 2
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	61 2f       	mov	r22, r17
    2280:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData(' ');
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    228a:	80 ed       	ldi	r24, 0xD0	; 208
    228c:	97 e0       	ldi	r25, 0x07	; 7
    228e:	f4 01       	movw	r30, r8
    2290:	31 97       	sbiw	r30, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <APP_vidAdminFunction+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	d9 f7       	brne	.-10     	; 0x228e <APP_vidAdminFunction+0x118>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	61 2f       	mov	r22, r17
    229c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						loc_u8CountPassword-=2;
						if(loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    22a0:	12 30       	cpi	r17, 0x02	; 2
    22a2:	28 f5       	brcc	.+74     	; 0x22ee <APP_vidAdminFunction+0x178>
    22a4:	bb 24       	eor	r11, r11
    22a6:	25 c0       	rjmp	.+74     	; 0x22f2 <APP_vidAdminFunction+0x17c>
						{
							loc_AdminOutValue = 0;
						}
					}
					else if (loc_u8CountPassword < 5)
    22a8:	15 30       	cpi	r17, 0x05	; 5
    22aa:	e9 f0       	breq	.+58     	; 0x22e6 <APP_vidAdminFunction+0x170>
					{
						loc_AdminOutValue = 1;
						CLCD_voidSendData(loc_u8PressedKey);
    22ac:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    22b0:	80 ed       	ldi	r24, 0xD0	; 208
    22b2:	97 e0       	ldi	r25, 0x07	; 7
    22b4:	f4 01       	movw	r30, r8
    22b6:	31 97       	sbiw	r30, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <APP_vidAdminFunction+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	d9 f7       	brne	.-10     	; 0x22b4 <APP_vidAdminFunction+0x13e>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    22be:	61 2f       	mov	r22, r17
    22c0:	61 50       	subi	r22, 0x01	; 1
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData('*');
    22c8:	8a e2       	ldi	r24, 0x2A	; 42
    22ca:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    22ce:	80 ed       	ldi	r24, 0xD0	; 208
    22d0:	97 e0       	ldi	r25, 0x07	; 7
    22d2:	f4 01       	movw	r30, r8
    22d4:	31 97       	sbiw	r30, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <APP_vidAdminFunction+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	d9 f7       	brne	.-10     	; 0x22d2 <APP_vidAdminFunction+0x15c>
						_delay_ms(200);
						Admin.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    22dc:	f3 01       	movw	r30, r6
    22de:	e1 0f       	add	r30, r17
    22e0:	f1 1d       	adc	r31, r1
    22e2:	00 83       	st	Z, r16
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <APP_vidAdminFunction+0x178>
					}
					else if (loc_u8PressedKey == '=' && loc_u8CountPassword > 4)
    22e6:	8d 33       	cpi	r24, 0x3D	; 61
    22e8:	59 f0       	breq	.+22     	; 0x2300 <APP_vidAdminFunction+0x18a>
    22ea:	14 e0       	ldi	r17, 0x04	; 4
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <APP_vidAdminFunction+0x17c>
    22ee:	bb 24       	eor	r11, r11
    22f0:	b3 94       	inc	r11
			{
				MUART_voidSendData('w');

				loc_u8PressedKey = HKPD_u8GetPressedKey();

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    22f2:	1f 5f       	subi	r17, 0xFF	; 255
    22f4:	16 30       	cpi	r17, 0x06	; 6
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <APP_vidAdminFunction+0x184>
    22f8:	b3 cf       	rjmp	.-154    	; 0x2260 <APP_vidAdminFunction+0xea>
					{
						loc_u8CountPassword-=1;
					}
				}

				if (loc_u8PressedKey == 'c')
    22fa:	03 36       	cpi	r16, 0x63	; 99
    22fc:	09 f4       	brne	.+2      	; 0x2300 <APP_vidAdminFunction+0x18a>
    22fe:	80 c0       	rjmp	.+256    	; 0x2400 <APP_vidAdminFunction+0x28a>
				{
					loc_AdminFlag = 0;
					break;
				}

				if(Admin.st_arr_u8Password[0] != HEEPROM_u8ReadData(EEPROM_AdminPassword_LOCATION) || Admin.st_arr_u8Password[1] != HEEPROM_u8ReadData(EEPROM_AdminPassword_LOCATION + 1) || Admin.st_arr_u8Password[2] != HEEPROM_u8ReadData(EEPROM_AdminPassword_LOCATION + 2) || Admin.st_arr_u8Password[3] != HEEPROM_u8ReadData(EEPROM_AdminPassword_LOCATION + 3))
    2300:	1a 81       	ldd	r17, Y+2	; 0x02
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    230a:	18 17       	cp	r17, r24
    230c:	b9 f4       	brne	.+46     	; 0x233c <APP_vidAdminFunction+0x1c6>
    230e:	1b 81       	ldd	r17, Y+3	; 0x03
    2310:	84 e0       	ldi	r24, 0x04	; 4
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2318:	18 17       	cp	r17, r24
    231a:	81 f4       	brne	.+32     	; 0x233c <APP_vidAdminFunction+0x1c6>
    231c:	1c 81       	ldd	r17, Y+4	; 0x04
    231e:	85 e0       	ldi	r24, 0x05	; 5
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2326:	18 17       	cp	r17, r24
    2328:	49 f4       	brne	.+18     	; 0x233c <APP_vidAdminFunction+0x1c6>
    232a:	1d 81       	ldd	r17, Y+5	; 0x05
    232c:	86 e0       	ldi	r24, 0x06	; 6
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2334:	18 17       	cp	r17, r24
    2336:	11 f4       	brne	.+4      	; 0x233c <APP_vidAdminFunction+0x1c6>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	01 c0       	rjmp	.+2      	; 0x233e <APP_vidAdminFunction+0x1c8>
    233c:	81 e0       	ldi	r24, 0x01	; 1
					break;
				}

			}

			if(loc_u8PressedKey == 'c' && loc_AdminFlag == 0)
    233e:	03 36       	cpi	r16, 0x63	; 99
    2340:	19 f4       	brne	.+6      	; 0x2348 <APP_vidAdminFunction+0x1d2>
    2342:	88 23       	and	r24, r24
    2344:	21 f4       	brne	.+8      	; 0x234e <APP_vidAdminFunction+0x1d8>
    2346:	5c c0       	rjmp	.+184    	; 0x2400 <APP_vidAdminFunction+0x28a>
			{
				break;
			}

			if(loc_AdminFlag == 1 && loc_AdminTrail < 3)
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	09 f0       	breq	.+2      	; 0x234e <APP_vidAdminFunction+0x1d8>
    234c:	60 c0       	rjmp	.+192    	; 0x240e <APP_vidAdminFunction+0x298>
    234e:	93 e0       	ldi	r25, 0x03	; 3
    2350:	a9 16       	cp	r10, r25
    2352:	11 f1       	breq	.+68     	; 0x2398 <APP_vidAdminFunction+0x222>
			{
				CLCD_voidClearScreen();
    2354:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("Wrong password");
    2358:	89 e0       	ldi	r24, 0x09	; 9
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("Tries left: ");
    2368:	88 e1       	ldi	r24, 0x18	; 24
    236a:	92 e0       	ldi	r25, 0x02	; 2
    236c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSendNumber(3-loc_AdminTrail);
    2370:	c7 01       	movw	r24, r14
    2372:	b6 01       	movw	r22, r12
    2374:	0e 94 e6 08 	call	0x11cc	; 0x11cc <CLCD_voidSendNumber>
    2378:	84 ec       	ldi	r24, 0xC4	; 196
    237a:	99 e0       	ldi	r25, 0x09	; 9
    237c:	f4 01       	movw	r30, r8
    237e:	31 97       	sbiw	r30, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <APP_vidAdminFunction+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2384:	d9 f7       	brne	.-10     	; 0x237c <APP_vidAdminFunction+0x206>
				loc_AdminTrail++;
    2386:	a3 94       	inc	r10
				loc_AdminFlag = 0;
				_delay_ms(250);
				CLCD_voidClearScreen();
    2388:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    238c:	08 94       	sec
    238e:	c1 08       	sbc	r12, r1
    2390:	d1 08       	sbc	r13, r1
    2392:	e1 08       	sbc	r14, r1
    2394:	f1 08       	sbc	r15, r1
    2396:	53 cf       	rjmp	.-346    	; 0x223e <APP_vidAdminFunction+0xc8>
			}
			else
			{
				if(loc_AdminFlag == 0)
    2398:	88 23       	and	r24, r24
    239a:	71 f1       	breq	.+92     	; 0x23f8 <APP_vidAdminFunction+0x282>
				{
					break;
				}
				else if(loc_AdminTrail == 3)
				{
					CLCD_voidClearScreen();
    239c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Wrong password");
    23a0:	89 e0       	ldi	r24, 0x09	; 9
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    23a8:	84 ec       	ldi	r24, 0xC4	; 196
    23aa:	99 e0       	ldi	r25, 0x09	; 9
    23ac:	28 ec       	ldi	r18, 0xC8	; 200
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	f9 01       	movw	r30, r18
    23b2:	31 97       	sbiw	r30, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <APP_vidAdminFunction+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	d9 f7       	brne	.-10     	; 0x23b0 <APP_vidAdminFunction+0x23a>
					_delay_ms(250);
					CLCD_voidClearScreen();
    23ba:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Can not enter");
    23be:	85 e2       	ldi	r24, 0x25	; 37
    23c0:	92 e0       	ldi	r25, 0x02	; 2
    23c2:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					CLCD_voidSetPosition(1,0);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					CLCD_voidSendString("admin mode");
    23ce:	83 e3       	ldi	r24, 0x33	; 51
    23d0:	92 e0       	ldi	r25, 0x02	; 2
    23d2:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					MDIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	62 e0       	ldi	r22, 0x02	; 2
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
    23e0:	84 ec       	ldi	r24, 0xC4	; 196
    23e2:	99 e0       	ldi	r25, 0x09	; 9
    23e4:	28 ec       	ldi	r18, 0xC8	; 200
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	f9 01       	movw	r30, r18
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <APP_vidAdminFunction+0x274>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	d9 f7       	brne	.-10     	; 0x23e8 <APP_vidAdminFunction+0x272>
					_delay_ms(250);
					loc_AdminFlag = 1;
					CLCD_voidClearScreen();
    23f2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    23f6:	81 e0       	ldi	r24, 0x01	; 1
				}

			}
		}

		if(loc_u8PressedKey == 'c' && loc_AdminFlag == 0)
    23f8:	03 36       	cpi	r16, 0x63	; 99
    23fa:	39 f4       	brne	.+14     	; 0x240a <APP_vidAdminFunction+0x294>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f5       	brne	.+66     	; 0x2442 <APP_vidAdminFunction+0x2cc>
		{
			gol_u8Mode = 0;
    2400:	10 92 fe 02 	sts	0x02FE, r1
			gol_u8FlagMode = 0;
    2404:	10 92 fa 02 	sts	0x02FA, r1
    2408:	20 c0       	rjmp	.+64     	; 0x244a <APP_vidAdminFunction+0x2d4>
			CLCD_voidClearScreen();
		}
		else if (loc_AdminFlag == 0)
    240a:	88 23       	and	r24, r24
    240c:	d1 f4       	brne	.+52     	; 0x2442 <APP_vidAdminFunction+0x2cc>
		{
			loc_AdminTrail = 1;
			APP_voidAdminMenu();
    240e:	0e 94 4d 10 	call	0x209a	; 0x209a <APP_voidAdminMenu>
    2412:	1d c0       	rjmp	.+58     	; 0x244e <APP_vidAdminFunction+0x2d8>
			CLCD_voidClearScreen();
		}
	}
	else
	{
		CLCD_voidClearScreen();
    2414:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("Close Alarm");
    2418:	8e e3       	ldi	r24, 0x3E	; 62
    241a:	92 e0       	ldi	r25, 0x02	; 2
    241c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("first");
    2428:	8a e4       	ldi	r24, 0x4A	; 74
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2430:	84 ec       	ldi	r24, 0xC4	; 196
    2432:	99 e0       	ldi	r25, 0x09	; 9
    2434:	28 ec       	ldi	r18, 0xC8	; 200
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	f9 01       	movw	r30, r18
    243a:	31 97       	sbiw	r30, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <APP_vidAdminFunction+0x2c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	d9 f7       	brne	.-10     	; 0x2438 <APP_vidAdminFunction+0x2c2>
		_delay_ms(250);
		gol_u8FlagMode = 0;
    2442:	10 92 fa 02 	sts	0x02FA, r1
		gol_u8Mode = 0;
    2446:	10 92 fe 02 	sts	0x02FE, r1
		CLCD_voidClearScreen();
    244a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	}
}
    244e:	26 96       	adiw	r28, 0x06	; 6
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    2464:	ef 90       	pop	r14
    2466:	df 90       	pop	r13
    2468:	cf 90       	pop	r12
    246a:	bf 90       	pop	r11
    246c:	af 90       	pop	r10
    246e:	9f 90       	pop	r9
    2470:	8f 90       	pop	r8
    2472:	7f 90       	pop	r7
    2474:	6f 90       	pop	r6
    2476:	08 95       	ret

00002478 <APP_vidAlarmFunction>:
	}
#endif
}

void APP_vidAlarmFunction(void)
{
    2478:	6f 92       	push	r6
    247a:	7f 92       	push	r7
    247c:	8f 92       	push	r8
    247e:	9f 92       	push	r9
    2480:	af 92       	push	r10
    2482:	bf 92       	push	r11
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <APP_vidAlarmFunction+0x1e>
    2496:	00 d0       	rcall	.+0      	; 0x2498 <APP_vidAlarmFunction+0x20>
    2498:	00 d0       	rcall	.+0      	; 0x249a <APP_vidAlarmFunction+0x22>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	u8 loc_AlarmFlag = 0, loc_AlarmTrail = 1, loc_AlarmOutValue = 0;

	u8 loc_u8PressedKey, loc_u8CountPassword;
	u8 loc_u8AlarmBuffer;

	MDIO_voidGetPinValue(DIO_PORTC, DIO_PIN2, &loc_u8AlarmBuffer);
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	ae 01       	movw	r20, r28
    24a4:	4f 5f       	subi	r20, 0xFF	; 255
    24a6:	5f 4f       	sbci	r21, 0xFF	; 255
    24a8:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>

	if(loc_u8AlarmBuffer == DIO_PIN_HIGH)
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <APP_vidAlarmFunction+0x3c>
    24b2:	35 c1       	rjmp	.+618    	; 0x271e <APP_vidAlarmFunction+0x2a6>
	{
		CLCD_voidClearScreen();
    24b4:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("c in password");
    24b8:	8b eb       	ldi	r24, 0xBB	; 187
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("mode to clear");
    24c8:	89 ec       	ldi	r24, 0xC9	; 201
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    24d0:	84 ec       	ldi	r24, 0xC4	; 196
    24d2:	99 e0       	ldi	r25, 0x09	; 9
    24d4:	28 ec       	ldi	r18, 0xC8	; 200
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	f9 01       	movw	r30, r18
    24da:	31 97       	sbiw	r30, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <APP_vidAlarmFunction+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	d9 f7       	brne	.-10     	; 0x24d8 <APP_vidAlarmFunction+0x60>
		_delay_ms(250);
		CLCD_voidClearScreen();
    24e2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" c for Exit");
    24e6:	86 e7       	ldi	r24, 0x76	; 118
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    24ee:	84 ec       	ldi	r24, 0xC4	; 196
    24f0:	99 e0       	ldi	r25, 0x09	; 9
    24f2:	28 ec       	ldi	r18, 0xC8	; 200
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	f9 01       	movw	r30, r18
    24f8:	31 97       	sbiw	r30, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <APP_vidAlarmFunction+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	d9 f7       	brne	.-10     	; 0x24f6 <APP_vidAlarmFunction+0x7e>
		_delay_ms(250);
		CLCD_voidClearScreen();
    2500:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" = To next step");
    2504:	82 e8       	ldi	r24, 0x82	; 130
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    250c:	84 ec       	ldi	r24, 0xC4	; 196
    250e:	99 e0       	ldi	r25, 0x09	; 9
    2510:	28 ec       	ldi	r18, 0xC8	; 200
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	f9 01       	movw	r30, r18
    2516:	31 97       	sbiw	r30, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <APP_vidAlarmFunction+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	d9 f7       	brne	.-10     	; 0x2514 <APP_vidAlarmFunction+0x9c>
		_delay_ms(250);
		CLCD_voidClearScreen();
    251e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2522:	aa 24       	eor	r10, r10
    2524:	a3 94       	inc	r10
    2526:	bb 24       	eor	r11, r11
    2528:	32 e0       	ldi	r19, 0x02	; 2
    252a:	c3 2e       	mov	r12, r19
    252c:	d1 2c       	mov	r13, r1
    252e:	e1 2c       	mov	r14, r1
    2530:	f1 2c       	mov	r15, r1
    2532:	28 ec       	ldi	r18, 0xC8	; 200
    2534:	82 2e       	mov	r8, r18
    2536:	91 2c       	mov	r9, r1
						CLCD_voidSendData(loc_u8PressedKey);
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
						CLCD_voidSendData('*');
						_delay_ms(200);
						Alarm.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    2538:	3e 01       	movw	r6, r28
    253a:	08 94       	sec
    253c:	61 1c       	adc	r6, r1
    253e:	71 1c       	adc	r7, r1
		_delay_ms(250);
		CLCD_voidClearScreen();

		while(loc_AlarmFlag == 0)
		{
			MUART_voidSendData('w');
    2540:	87 e7       	ldi	r24, 0x77	; 119
    2542:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

			CLCD_voidSendString("Enter Alarm PW");
    2546:	81 ef       	ldi	r24, 0xF1	; 241
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			while(1)
			{
				MUART_voidSendData('w');
    2556:	87 e7       	ldi	r24, 0x77	; 119
    2558:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

				loc_u8PressedKey = HKPD_u8GetPressedKey();
    255c:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    2560:	11 e0       	ldi	r17, 0x01	; 1

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
				{
					MUART_voidSendData('w');
    2562:	87 e7       	ldi	r24, 0x77	; 119
    2564:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

					do
					{
						loc_u8PressedKey = HKPD_u8GetPressedKey();
    2568:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    256c:	08 2f       	mov	r16, r24
					}while(	loc_u8PressedKey == NOT_PRESSED);
    256e:	8f 3f       	cpi	r24, 0xFF	; 255
    2570:	d9 f3       	breq	.-10     	; 0x2568 <APP_vidAlarmFunction+0xf0>

					if(loc_u8PressedKey == 'c' && loc_AlarmOutValue == 0)
    2572:	83 36       	cpi	r24, 0x63	; 99
    2574:	d1 f4       	brne	.+52     	; 0x25aa <APP_vidAlarmFunction+0x132>
    2576:	bb 20       	and	r11, r11
    2578:	09 f4       	brne	.+2      	; 0x257c <APP_vidAlarmFunction+0x104>
    257a:	c4 c0       	rjmp	.+392    	; 0x2704 <APP_vidAlarmFunction+0x28c>
						break;
					}

					if (loc_u8PressedKey == 'c')
					{
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    257c:	12 50       	subi	r17, 0x02	; 2
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	61 2f       	mov	r22, r17
    2582:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData(' ');
    2586:	80 e2       	ldi	r24, 0x20	; 32
    2588:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    258c:	80 ed       	ldi	r24, 0xD0	; 208
    258e:	97 e0       	ldi	r25, 0x07	; 7
    2590:	f4 01       	movw	r30, r8
    2592:	31 97       	sbiw	r30, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <APP_vidAlarmFunction+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2596:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	d9 f7       	brne	.-10     	; 0x2590 <APP_vidAlarmFunction+0x118>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	61 2f       	mov	r22, r17
    259e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						loc_u8CountPassword-=2;
						if(loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    25a2:	12 30       	cpi	r17, 0x02	; 2
    25a4:	28 f5       	brcc	.+74     	; 0x25f0 <APP_vidAlarmFunction+0x178>
    25a6:	bb 24       	eor	r11, r11
    25a8:	25 c0       	rjmp	.+74     	; 0x25f4 <APP_vidAlarmFunction+0x17c>
						{
							loc_AlarmOutValue = 0;
						}
					}
					else if (loc_u8CountPassword < 5)
    25aa:	15 30       	cpi	r17, 0x05	; 5
    25ac:	e9 f0       	breq	.+58     	; 0x25e8 <APP_vidAlarmFunction+0x170>
					{
						loc_AlarmOutValue = 1;
						CLCD_voidSendData(loc_u8PressedKey);
    25ae:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    25b2:	80 ed       	ldi	r24, 0xD0	; 208
    25b4:	97 e0       	ldi	r25, 0x07	; 7
    25b6:	f4 01       	movw	r30, r8
    25b8:	31 97       	sbiw	r30, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <APP_vidAlarmFunction+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	d9 f7       	brne	.-10     	; 0x25b6 <APP_vidAlarmFunction+0x13e>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    25c0:	61 2f       	mov	r22, r17
    25c2:	61 50       	subi	r22, 0x01	; 1
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData('*');
    25ca:	8a e2       	ldi	r24, 0x2A	; 42
    25cc:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    25d0:	80 ed       	ldi	r24, 0xD0	; 208
    25d2:	97 e0       	ldi	r25, 0x07	; 7
    25d4:	f4 01       	movw	r30, r8
    25d6:	31 97       	sbiw	r30, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <APP_vidAlarmFunction+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	d9 f7       	brne	.-10     	; 0x25d4 <APP_vidAlarmFunction+0x15c>
						_delay_ms(200);
						Alarm.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    25de:	f3 01       	movw	r30, r6
    25e0:	e1 0f       	add	r30, r17
    25e2:	f1 1d       	adc	r31, r1
    25e4:	00 83       	st	Z, r16
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <APP_vidAlarmFunction+0x178>
					}
					else if (loc_u8PressedKey == '=' && loc_u8CountPassword > 4)
    25e8:	8d 33       	cpi	r24, 0x3D	; 61
    25ea:	59 f0       	breq	.+22     	; 0x2602 <APP_vidAlarmFunction+0x18a>
    25ec:	14 e0       	ldi	r17, 0x04	; 4
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <APP_vidAlarmFunction+0x17c>
    25f0:	bb 24       	eor	r11, r11
    25f2:	b3 94       	inc	r11
			{
				MUART_voidSendData('w');

				loc_u8PressedKey = HKPD_u8GetPressedKey();

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    25f4:	1f 5f       	subi	r17, 0xFF	; 255
    25f6:	16 30       	cpi	r17, 0x06	; 6
    25f8:	08 f4       	brcc	.+2      	; 0x25fc <APP_vidAlarmFunction+0x184>
    25fa:	b3 cf       	rjmp	.-154    	; 0x2562 <APP_vidAlarmFunction+0xea>
					{
						loc_u8CountPassword-=1;
					}
				}

				if (loc_u8PressedKey == 'c')
    25fc:	03 36       	cpi	r16, 0x63	; 99
    25fe:	09 f4       	brne	.+2      	; 0x2602 <APP_vidAlarmFunction+0x18a>
    2600:	81 c0       	rjmp	.+258    	; 0x2704 <APP_vidAlarmFunction+0x28c>
				{
					loc_AlarmFlag = 0;
					break;
				}

				if(Alarm.st_arr_u8Password[0] != HEEPROM_u8ReadData(EEPROM_AlarmPassword_LOCATION) || Alarm.st_arr_u8Password[1] != HEEPROM_u8ReadData(EEPROM_AlarmPassword_LOCATION + 1) || Alarm.st_arr_u8Password[2] != HEEPROM_u8ReadData(EEPROM_AlarmPassword_LOCATION + 2) || Alarm.st_arr_u8Password[3] != HEEPROM_u8ReadData(EEPROM_AlarmPassword_LOCATION + 3))
    2602:	1a 81       	ldd	r17, Y+2	; 0x02
    2604:	87 e0       	ldi	r24, 0x07	; 7
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    260c:	18 17       	cp	r17, r24
    260e:	b9 f4       	brne	.+46     	; 0x263e <APP_vidAlarmFunction+0x1c6>
    2610:	1b 81       	ldd	r17, Y+3	; 0x03
    2612:	88 e0       	ldi	r24, 0x08	; 8
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    261a:	18 17       	cp	r17, r24
    261c:	81 f4       	brne	.+32     	; 0x263e <APP_vidAlarmFunction+0x1c6>
    261e:	1c 81       	ldd	r17, Y+4	; 0x04
    2620:	89 e0       	ldi	r24, 0x09	; 9
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2628:	18 17       	cp	r17, r24
    262a:	49 f4       	brne	.+18     	; 0x263e <APP_vidAlarmFunction+0x1c6>
    262c:	1d 81       	ldd	r17, Y+5	; 0x05
    262e:	8a e0       	ldi	r24, 0x0A	; 10
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2636:	18 17       	cp	r17, r24
    2638:	11 f4       	brne	.+4      	; 0x263e <APP_vidAlarmFunction+0x1c6>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <APP_vidAlarmFunction+0x1c8>
    263e:	81 e0       	ldi	r24, 0x01	; 1
				{
					break;
				}
			}

			if(loc_u8PressedKey == 'c' && loc_AlarmFlag == 0)
    2640:	03 36       	cpi	r16, 0x63	; 99
    2642:	19 f4       	brne	.+6      	; 0x264a <APP_vidAlarmFunction+0x1d2>
    2644:	88 23       	and	r24, r24
    2646:	29 f4       	brne	.+10     	; 0x2652 <APP_vidAlarmFunction+0x1da>
    2648:	5d c0       	rjmp	.+186    	; 0x2704 <APP_vidAlarmFunction+0x28c>
			{
				break;
			}

			if(loc_AlarmFlag == 1 && loc_AlarmTrail < 3)
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	11 f0       	breq	.+4      	; 0x2652 <APP_vidAlarmFunction+0x1da>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	55 c0       	rjmp	.+170    	; 0x26fc <APP_vidAlarmFunction+0x284>
    2652:	93 e0       	ldi	r25, 0x03	; 3
    2654:	a9 16       	cp	r10, r25
    2656:	11 f1       	breq	.+68     	; 0x269c <APP_vidAlarmFunction+0x224>
			{
				CLCD_voidClearScreen();
    2658:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("Wrong password");
    265c:	89 e0       	ldi	r24, 0x09	; 9
    265e:	92 e0       	ldi	r25, 0x02	; 2
    2660:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("Tries left: ");
    266c:	88 e1       	ldi	r24, 0x18	; 24
    266e:	92 e0       	ldi	r25, 0x02	; 2
    2670:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSendNumber(3-loc_AlarmTrail);
    2674:	c7 01       	movw	r24, r14
    2676:	b6 01       	movw	r22, r12
    2678:	0e 94 e6 08 	call	0x11cc	; 0x11cc <CLCD_voidSendNumber>
    267c:	84 ec       	ldi	r24, 0xC4	; 196
    267e:	99 e0       	ldi	r25, 0x09	; 9
    2680:	f4 01       	movw	r30, r8
    2682:	31 97       	sbiw	r30, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <APP_vidAlarmFunction+0x20a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	d9 f7       	brne	.-10     	; 0x2680 <APP_vidAlarmFunction+0x208>
				loc_AlarmTrail++;
    268a:	a3 94       	inc	r10
				loc_AlarmFlag = 0;
				_delay_ms(250);
				CLCD_voidClearScreen();
    268c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2690:	08 94       	sec
    2692:	c1 08       	sbc	r12, r1
    2694:	d1 08       	sbc	r13, r1
    2696:	e1 08       	sbc	r14, r1
    2698:	f1 08       	sbc	r15, r1
    269a:	52 cf       	rjmp	.-348    	; 0x2540 <APP_vidAlarmFunction+0xc8>
			}
			else
			{
				if(loc_AlarmFlag == 0)
    269c:	88 23       	and	r24, r24
    269e:	71 f1       	breq	.+92     	; 0x26fc <APP_vidAlarmFunction+0x284>
				{
					break;
				}
				else if(loc_AlarmTrail == 3)
				{
					CLCD_voidClearScreen();
    26a0:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Wrong password");
    26a4:	89 e0       	ldi	r24, 0x09	; 9
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    26ac:	84 ec       	ldi	r24, 0xC4	; 196
    26ae:	99 e0       	ldi	r25, 0x09	; 9
    26b0:	28 ec       	ldi	r18, 0xC8	; 200
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	f9 01       	movw	r30, r18
    26b6:	31 97       	sbiw	r30, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <APP_vidAlarmFunction+0x23e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	d9 f7       	brne	.-10     	; 0x26b4 <APP_vidAlarmFunction+0x23c>
					_delay_ms(250);
					CLCD_voidClearScreen();
    26be:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Can not close ");
    26c2:	80 e5       	ldi	r24, 0x50	; 80
    26c4:	92 e0       	ldi	r25, 0x02	; 2
    26c6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					CLCD_voidSetPosition(1,0);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					CLCD_voidSendString("alarm");
    26d2:	8f e5       	ldi	r24, 0x5F	; 95
    26d4:	92 e0       	ldi	r25, 0x02	; 2
    26d6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					MDIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
    26e4:	84 ec       	ldi	r24, 0xC4	; 196
    26e6:	99 e0       	ldi	r25, 0x09	; 9
    26e8:	28 ec       	ldi	r18, 0xC8	; 200
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	f9 01       	movw	r30, r18
    26ee:	31 97       	sbiw	r30, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <APP_vidAlarmFunction+0x276>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	d9 f7       	brne	.-10     	; 0x26ec <APP_vidAlarmFunction+0x274>
					_delay_ms(250);
					loc_AlarmFlag = 1;
					CLCD_voidClearScreen();
    26f6:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    26fa:	81 e0       	ldi	r24, 0x01	; 1
				}

			}
		}

		if(loc_u8PressedKey == 'c' && loc_AlarmFlag == 0)
    26fc:	03 36       	cpi	r16, 0x63	; 99
    26fe:	39 f4       	brne	.+14     	; 0x270e <APP_vidAlarmFunction+0x296>
    2700:	88 23       	and	r24, r24
    2702:	e1 f4       	brne	.+56     	; 0x273c <APP_vidAlarmFunction+0x2c4>
		{
			gol_u8Mode = 0;
    2704:	10 92 fe 02 	sts	0x02FE, r1
			gol_u8FlagMode = 0;
    2708:	10 92 fa 02 	sts	0x02FA, r1
    270c:	1b c0       	rjmp	.+54     	; 0x2744 <APP_vidAlarmFunction+0x2cc>
			CLCD_voidClearScreen();
		}
		else if (loc_AlarmFlag == 0)
    270e:	88 23       	and	r24, r24
    2710:	a9 f4       	brne	.+42     	; 0x273c <APP_vidAlarmFunction+0x2c4>
		{
			loc_AlarmTrail = 1;
			MDIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_PIN_INPUT);
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	62 e0       	ldi	r22, 0x02	; 2
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
    271c:	0f c0       	rjmp	.+30     	; 0x273c <APP_vidAlarmFunction+0x2c4>

	}

	else
	{
		CLCD_voidClearScreen();
    271e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("No Alarm set");
    2722:	85 e6       	ldi	r24, 0x65	; 101
    2724:	92 e0       	ldi	r25, 0x02	; 2
    2726:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    272a:	84 ec       	ldi	r24, 0xC4	; 196
    272c:	99 e0       	ldi	r25, 0x09	; 9
    272e:	28 ec       	ldi	r18, 0xC8	; 200
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	f9 01       	movw	r30, r18
    2734:	31 97       	sbiw	r30, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <APP_vidAlarmFunction+0x2bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	d9 f7       	brne	.-10     	; 0x2732 <APP_vidAlarmFunction+0x2ba>
		_delay_ms(250);
		gol_u8FlagMode = 0;
    273c:	10 92 fa 02 	sts	0x02FA, r1
		loc_AlarmFlag = 0;
		gol_u8Mode = 0;
    2740:	10 92 fe 02 	sts	0x02FE, r1
		CLCD_voidClearScreen();
    2744:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	}
#endif
}
    2748:	26 96       	adiw	r28, 0x06	; 6
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	ef 90       	pop	r14
    2760:	df 90       	pop	r13
    2762:	cf 90       	pop	r12
    2764:	bf 90       	pop	r11
    2766:	af 90       	pop	r10
    2768:	9f 90       	pop	r9
    276a:	8f 90       	pop	r8
    276c:	7f 90       	pop	r7
    276e:	6f 90       	pop	r6
    2770:	08 95       	ret

00002772 <APP_vidGuestFunction>:
	}
#endif
}

void APP_vidGuestFunction (void)
{
    2772:	6f 92       	push	r6
    2774:	7f 92       	push	r7
    2776:	8f 92       	push	r8
    2778:	9f 92       	push	r9
    277a:	af 92       	push	r10
    277c:	bf 92       	push	r11
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <APP_vidGuestFunction+0x1e>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <APP_vidGuestFunction+0x20>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <APP_vidGuestFunction+0x22>
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
	ST_Data_t Guest;
	u8 loc_u8PressedKey,loc_u8CountPassword;
	u8 loc_GuestFlag = 0, loc_GuestTrail = 1, loc_GuestOutValue = 0;

	u8 loc_u8AlarmBuffer;
	MDIO_voidGetPinValue(DIO_PORTC, DIO_PIN2, &loc_u8AlarmBuffer);
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	62 e0       	ldi	r22, 0x02	; 2
    279c:	ae 01       	movw	r20, r28
    279e:	4f 5f       	subi	r20, 0xFF	; 255
    27a0:	5f 4f       	sbci	r21, 0xFF	; 255
    27a2:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>

	if(loc_u8AlarmBuffer == DIO_PIN_LOW)
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 23       	and	r24, r24
    27aa:	09 f0       	breq	.+2      	; 0x27ae <APP_vidGuestFunction+0x3c>
    27ac:	46 c1       	rjmp	.+652    	; 0x2a3a <APP_vidGuestFunction+0x2c8>
	{
		CLCD_voidClearScreen();
    27ae:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("Welcome to guest");
    27b2:	82 e7       	ldi	r24, 0x72	; 114
    27b4:	92 e0       	ldi	r25, 0x02	; 2
    27b6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("Mode");
    27c2:	8d ec       	ldi	r24, 0xCD	; 205
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    27ca:	84 ec       	ldi	r24, 0xC4	; 196
    27cc:	99 e0       	ldi	r25, 0x09	; 9
    27ce:	28 ec       	ldi	r18, 0xC8	; 200
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	f9 01       	movw	r30, r18
    27d4:	31 97       	sbiw	r30, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <APP_vidGuestFunction+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27da:	d9 f7       	brne	.-10     	; 0x27d2 <APP_vidGuestFunction+0x60>
		_delay_ms(250);
		CLCD_voidClearScreen();
    27dc:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" c for Exit");
    27e0:	86 e7       	ldi	r24, 0x76	; 118
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    27e8:	84 ec       	ldi	r24, 0xC4	; 196
    27ea:	99 e0       	ldi	r25, 0x09	; 9
    27ec:	28 ec       	ldi	r18, 0xC8	; 200
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	f9 01       	movw	r30, r18
    27f2:	31 97       	sbiw	r30, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <APP_vidGuestFunction+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	d9 f7       	brne	.-10     	; 0x27f0 <APP_vidGuestFunction+0x7e>
		_delay_ms(250);
		CLCD_voidClearScreen();
    27fa:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" = To next step");
    27fe:	82 e8       	ldi	r24, 0x82	; 130
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2806:	84 ec       	ldi	r24, 0xC4	; 196
    2808:	99 e0       	ldi	r25, 0x09	; 9
    280a:	28 ec       	ldi	r18, 0xC8	; 200
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	f9 01       	movw	r30, r18
    2810:	31 97       	sbiw	r30, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <APP_vidGuestFunction+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	d9 f7       	brne	.-10     	; 0x280e <APP_vidGuestFunction+0x9c>
		_delay_ms(250);
		CLCD_voidClearScreen();
    2818:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    281c:	aa 24       	eor	r10, r10
    281e:	a3 94       	inc	r10
    2820:	bb 24       	eor	r11, r11
    2822:	52 e0       	ldi	r21, 0x02	; 2
    2824:	c5 2e       	mov	r12, r21
    2826:	d1 2c       	mov	r13, r1
    2828:	e1 2c       	mov	r14, r1
    282a:	f1 2c       	mov	r15, r1
    282c:	48 ec       	ldi	r20, 0xC8	; 200
    282e:	84 2e       	mov	r8, r20
    2830:	91 2c       	mov	r9, r1
						CLCD_voidSendData(loc_u8PressedKey);
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
						CLCD_voidSendData('*');
						_delay_ms(200);
						Guest.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    2832:	3e 01       	movw	r6, r28
    2834:	08 94       	sec
    2836:	61 1c       	adc	r6, r1
    2838:	71 1c       	adc	r7, r1
		_delay_ms(250);
		CLCD_voidClearScreen();

		while(loc_GuestFlag == 0)
		{
			MUART_voidSendData('w');
    283a:	87 e7       	ldi	r24, 0x77	; 119
    283c:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

			CLCD_voidSendString("Enter guest PW");
    2840:	83 e8       	ldi	r24, 0x83	; 131
    2842:	92 e0       	ldi	r25, 0x02	; 2
    2844:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			while(1)
			{
				MUART_voidSendData('w');
    2850:	87 e7       	ldi	r24, 0x77	; 119
    2852:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

				loc_u8PressedKey = HKPD_u8GetPressedKey();
    2856:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    285a:	11 e0       	ldi	r17, 0x01	; 1

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
				{
					MUART_voidSendData('w');
    285c:	87 e7       	ldi	r24, 0x77	; 119
    285e:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
					do
					{
						loc_u8PressedKey = HKPD_u8GetPressedKey();
    2862:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    2866:	08 2f       	mov	r16, r24
					}while(	loc_u8PressedKey == NOT_PRESSED);
    2868:	8f 3f       	cpi	r24, 0xFF	; 255
    286a:	d9 f3       	breq	.-10     	; 0x2862 <APP_vidGuestFunction+0xf0>

					if(loc_u8PressedKey == 'c' && loc_GuestOutValue == 0)
    286c:	83 36       	cpi	r24, 0x63	; 99
    286e:	d1 f4       	brne	.+52     	; 0x28a4 <APP_vidGuestFunction+0x132>
    2870:	bb 20       	and	r11, r11
    2872:	09 f4       	brne	.+2      	; 0x2876 <APP_vidGuestFunction+0x104>
    2874:	bc c0       	rjmp	.+376    	; 0x29ee <APP_vidGuestFunction+0x27c>
						break;
					}

					if (loc_u8PressedKey == 'c')
					{
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    2876:	12 50       	subi	r17, 0x02	; 2
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	61 2f       	mov	r22, r17
    287c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData(' ');
    2880:	80 e2       	ldi	r24, 0x20	; 32
    2882:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    2886:	80 ed       	ldi	r24, 0xD0	; 208
    2888:	97 e0       	ldi	r25, 0x07	; 7
    288a:	f4 01       	movw	r30, r8
    288c:	31 97       	sbiw	r30, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <APP_vidGuestFunction+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	d9 f7       	brne	.-10     	; 0x288a <APP_vidGuestFunction+0x118>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	61 2f       	mov	r22, r17
    2898:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						loc_u8CountPassword-=2;
						if(loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    289c:	12 30       	cpi	r17, 0x02	; 2
    289e:	28 f5       	brcc	.+74     	; 0x28ea <APP_vidGuestFunction+0x178>
    28a0:	bb 24       	eor	r11, r11
    28a2:	25 c0       	rjmp	.+74     	; 0x28ee <APP_vidGuestFunction+0x17c>
						{
							loc_GuestOutValue = 0;
						}
					}
					else if (loc_u8CountPassword < 5)
    28a4:	15 30       	cpi	r17, 0x05	; 5
    28a6:	e9 f0       	breq	.+58     	; 0x28e2 <APP_vidGuestFunction+0x170>
					{
						loc_GuestOutValue = 1;
						CLCD_voidSendData(loc_u8PressedKey);
    28a8:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    28ac:	80 ed       	ldi	r24, 0xD0	; 208
    28ae:	97 e0       	ldi	r25, 0x07	; 7
    28b0:	f4 01       	movw	r30, r8
    28b2:	31 97       	sbiw	r30, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <APP_vidGuestFunction+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	d9 f7       	brne	.-10     	; 0x28b0 <APP_vidGuestFunction+0x13e>
						_delay_ms(200);
						CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    28ba:	61 2f       	mov	r22, r17
    28bc:	61 50       	subi	r22, 0x01	; 1
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData('*');
    28c4:	8a e2       	ldi	r24, 0x2A	; 42
    28c6:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    28ca:	80 ed       	ldi	r24, 0xD0	; 208
    28cc:	97 e0       	ldi	r25, 0x07	; 7
    28ce:	f4 01       	movw	r30, r8
    28d0:	31 97       	sbiw	r30, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <APP_vidGuestFunction+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	d9 f7       	brne	.-10     	; 0x28ce <APP_vidGuestFunction+0x15c>
						_delay_ms(200);
						Guest.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    28d8:	f3 01       	movw	r30, r6
    28da:	e1 0f       	add	r30, r17
    28dc:	f1 1d       	adc	r31, r1
    28de:	00 83       	st	Z, r16
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <APP_vidGuestFunction+0x178>
					}
					else if (loc_u8PressedKey == '=' && loc_u8CountPassword > 4)
    28e2:	8d 33       	cpi	r24, 0x3D	; 61
    28e4:	59 f0       	breq	.+22     	; 0x28fc <APP_vidGuestFunction+0x18a>
    28e6:	14 e0       	ldi	r17, 0x04	; 4
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <APP_vidGuestFunction+0x17c>
    28ea:	bb 24       	eor	r11, r11
    28ec:	b3 94       	inc	r11
			{
				MUART_voidSendData('w');

				loc_u8PressedKey = HKPD_u8GetPressedKey();

				for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    28ee:	1f 5f       	subi	r17, 0xFF	; 255
    28f0:	16 30       	cpi	r17, 0x06	; 6
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <APP_vidGuestFunction+0x184>
    28f4:	b3 cf       	rjmp	.-154    	; 0x285c <APP_vidGuestFunction+0xea>
						loc_u8CountPassword-=1;
					}
				}


				if (loc_u8PressedKey == 'c')
    28f6:	03 36       	cpi	r16, 0x63	; 99
    28f8:	09 f4       	brne	.+2      	; 0x28fc <APP_vidGuestFunction+0x18a>
    28fa:	79 c0       	rjmp	.+242    	; 0x29ee <APP_vidGuestFunction+0x27c>
				{
					loc_GuestFlag = 0;
					break;
				}

				if(Guest.st_arr_u8Password[0] != HEEPROM_u8ReadData(EEPROM_GuestPassword_LOCATION) || Guest.st_arr_u8Password[1] != HEEPROM_u8ReadData(EEPROM_GuestPassword_LOCATION + 1) || Guest.st_arr_u8Password[2] != HEEPROM_u8ReadData(EEPROM_GuestPassword_LOCATION + 2) || Guest.st_arr_u8Password[3] != HEEPROM_u8ReadData(EEPROM_GuestPassword_LOCATION + 3))
    28fc:	1a 81       	ldd	r17, Y+2	; 0x02
    28fe:	8b e0       	ldi	r24, 0x0B	; 11
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2906:	18 17       	cp	r17, r24
    2908:	b9 f4       	brne	.+46     	; 0x2938 <APP_vidGuestFunction+0x1c6>
    290a:	1b 81       	ldd	r17, Y+3	; 0x03
    290c:	8c e0       	ldi	r24, 0x0C	; 12
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2914:	18 17       	cp	r17, r24
    2916:	81 f4       	brne	.+32     	; 0x2938 <APP_vidGuestFunction+0x1c6>
    2918:	1c 81       	ldd	r17, Y+4	; 0x04
    291a:	8d e0       	ldi	r24, 0x0D	; 13
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2922:	18 17       	cp	r17, r24
    2924:	49 f4       	brne	.+18     	; 0x2938 <APP_vidGuestFunction+0x1c6>
    2926:	1d 81       	ldd	r17, Y+5	; 0x05
    2928:	8e e0       	ldi	r24, 0x0E	; 14
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2930:	18 17       	cp	r17, r24
    2932:	11 f4       	brne	.+4      	; 0x2938 <APP_vidGuestFunction+0x1c6>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	01 c0       	rjmp	.+2      	; 0x293a <APP_vidGuestFunction+0x1c8>
    2938:	81 e0       	ldi	r24, 0x01	; 1
				{
					break;
				}
			}

			if(loc_u8PressedKey == 'c' && loc_GuestFlag == 0)
    293a:	03 36       	cpi	r16, 0x63	; 99
    293c:	19 f4       	brne	.+6      	; 0x2944 <APP_vidGuestFunction+0x1d2>
    293e:	88 23       	and	r24, r24
    2940:	21 f4       	brne	.+8      	; 0x294a <APP_vidGuestFunction+0x1d8>
    2942:	55 c0       	rjmp	.+170    	; 0x29ee <APP_vidGuestFunction+0x27c>
			{
				break;
			}

			if(loc_GuestFlag == 1 && loc_GuestTrail < 3)
    2944:	81 30       	cpi	r24, 0x01	; 1
    2946:	09 f0       	breq	.+2      	; 0x294a <APP_vidGuestFunction+0x1d8>
    2948:	59 c0       	rjmp	.+178    	; 0x29fc <APP_vidGuestFunction+0x28a>
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	a9 16       	cp	r10, r25
    294e:	11 f1       	breq	.+68     	; 0x2994 <APP_vidGuestFunction+0x222>
			{
				CLCD_voidClearScreen();
    2950:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				CLCD_voidSendString("Wrong password");
    2954:	89 e0       	ldi	r24, 0x09	; 9
    2956:	92 e0       	ldi	r25, 0x02	; 2
    2958:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSetPosition(1,0);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("Tries left: ");
    2964:	88 e1       	ldi	r24, 0x18	; 24
    2966:	92 e0       	ldi	r25, 0x02	; 2
    2968:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSendNumber(3-loc_GuestTrail);
    296c:	c7 01       	movw	r24, r14
    296e:	b6 01       	movw	r22, r12
    2970:	0e 94 e6 08 	call	0x11cc	; 0x11cc <CLCD_voidSendNumber>
    2974:	84 ec       	ldi	r24, 0xC4	; 196
    2976:	99 e0       	ldi	r25, 0x09	; 9
    2978:	f4 01       	movw	r30, r8
    297a:	31 97       	sbiw	r30, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <APP_vidGuestFunction+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	d9 f7       	brne	.-10     	; 0x2978 <APP_vidGuestFunction+0x206>
				loc_GuestTrail++;
    2982:	a3 94       	inc	r10
				loc_GuestFlag = 0;
				_delay_ms(250);
				CLCD_voidClearScreen();
    2984:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2988:	08 94       	sec
    298a:	c1 08       	sbc	r12, r1
    298c:	d1 08       	sbc	r13, r1
    298e:	e1 08       	sbc	r14, r1
    2990:	f1 08       	sbc	r15, r1
    2992:	53 cf       	rjmp	.-346    	; 0x283a <APP_vidGuestFunction+0xc8>
			}
			else
			{
				if(loc_GuestFlag == 0)
    2994:	88 23       	and	r24, r24
    2996:	31 f1       	breq	.+76     	; 0x29e4 <APP_vidGuestFunction+0x272>
				{
					break;
				}
				else if(loc_GuestTrail == 3)
				{
					CLCD_voidClearScreen();
    2998:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Wrong password");
    299c:	89 e0       	ldi	r24, 0x09	; 9
    299e:	92 e0       	ldi	r25, 0x02	; 2
    29a0:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    29a4:	84 ec       	ldi	r24, 0xC4	; 196
    29a6:	99 e0       	ldi	r25, 0x09	; 9
    29a8:	28 ec       	ldi	r18, 0xC8	; 200
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	f9 01       	movw	r30, r18
    29ae:	31 97       	sbiw	r30, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <APP_vidGuestFunction+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	d9 f7       	brne	.-10     	; 0x29ac <APP_vidGuestFunction+0x23a>
					_delay_ms(250);
					CLCD_voidClearScreen();
    29b6:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Can not sign in");
    29ba:	82 e9       	ldi	r24, 0x92	; 146
    29bc:	92 e0       	ldi	r25, 0x02	; 2
    29be:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					MDIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	62 e0       	ldi	r22, 0x02	; 2
    29c6:	41 e0       	ldi	r20, 0x01	; 1
    29c8:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
    29cc:	84 ec       	ldi	r24, 0xC4	; 196
    29ce:	99 e0       	ldi	r25, 0x09	; 9
    29d0:	28 ec       	ldi	r18, 0xC8	; 200
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	f9 01       	movw	r30, r18
    29d6:	31 97       	sbiw	r30, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <APP_vidGuestFunction+0x264>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	d9 f7       	brne	.-10     	; 0x29d4 <APP_vidGuestFunction+0x262>
					_delay_ms(250);
					loc_GuestFlag = 1;
					CLCD_voidClearScreen();
    29de:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    29e2:	81 e0       	ldi	r24, 0x01	; 1
				}

			}
		}

		if(loc_u8PressedKey == 'c' && loc_GuestFlag == 0)
    29e4:	03 36       	cpi	r16, 0x63	; 99
    29e6:	41 f4       	brne	.+16     	; 0x29f8 <APP_vidGuestFunction+0x286>
    29e8:	88 23       	and	r24, r24
    29ea:	09 f0       	breq	.+2      	; 0x29ee <APP_vidGuestFunction+0x27c>
    29ec:	3d c0       	rjmp	.+122    	; 0x2a68 <APP_vidGuestFunction+0x2f6>
		{
			gol_u8Mode = 0;
    29ee:	10 92 fe 02 	sts	0x02FE, r1
			gol_u8FlagMode = 0;
    29f2:	10 92 fa 02 	sts	0x02FA, r1
    29f6:	3c c0       	rjmp	.+120    	; 0x2a70 <APP_vidGuestFunction+0x2fe>
			CLCD_voidClearScreen();
		}
		else if (loc_GuestFlag == 0)
    29f8:	88 23       	and	r24, r24
    29fa:	b1 f5       	brne	.+108    	; 0x2a68 <APP_vidGuestFunction+0x2f6>
		{
			loc_GuestTrail = 1;
			CLCD_voidClearScreen();
    29fc:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Sign in");
    2a00:	82 ea       	ldi	r24, 0xA2	; 162
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("successfully");
    2a10:	8e ea       	ldi	r24, 0xAE	; 174
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			MUART_voidSendData('s');
    2a18:	83 e7       	ldi	r24, 0x73	; 115
    2a1a:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
    2a1e:	80 e1       	ldi	r24, 0x10	; 16
    2a20:	97 e2       	ldi	r25, 0x27	; 39
    2a22:	28 ec       	ldi	r18, 0xC8	; 200
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	f9 01       	movw	r30, r18
    2a28:	31 97       	sbiw	r30, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <APP_vidGuestFunction+0x2b6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	d9 f7       	brne	.-10     	; 0x2a26 <APP_vidGuestFunction+0x2b4>
			_delay_ms(1000);
			gol_u8FlagMode = 0;
    2a30:	10 92 fa 02 	sts	0x02FA, r1
			gol_u8Mode = 0;
    2a34:	10 92 fe 02 	sts	0x02FE, r1
    2a38:	1d c0       	rjmp	.+58     	; 0x2a74 <APP_vidGuestFunction+0x302>
		}

	}
	else
	{
		CLCD_voidClearScreen();
    2a3a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("Close Alarm");
    2a3e:	8e e3       	ldi	r24, 0x3E	; 62
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("first");
    2a4e:	8a e4       	ldi	r24, 0x4A	; 74
    2a50:	92 e0       	ldi	r25, 0x02	; 2
    2a52:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2a56:	84 ec       	ldi	r24, 0xC4	; 196
    2a58:	99 e0       	ldi	r25, 0x09	; 9
    2a5a:	28 ec       	ldi	r18, 0xC8	; 200
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	f9 01       	movw	r30, r18
    2a60:	31 97       	sbiw	r30, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <APP_vidGuestFunction+0x2ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	d9 f7       	brne	.-10     	; 0x2a5e <APP_vidGuestFunction+0x2ec>
		_delay_ms(250);
		gol_u8FlagMode = 0;
    2a68:	10 92 fa 02 	sts	0x02FA, r1
		gol_u8Mode = 0;
    2a6c:	10 92 fe 02 	sts	0x02FE, r1
		CLCD_voidClearScreen();
    2a70:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
	}
#endif
}
    2a74:	26 96       	adiw	r28, 0x06	; 6
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	df 90       	pop	r13
    2a8e:	cf 90       	pop	r12
    2a90:	bf 90       	pop	r11
    2a92:	af 90       	pop	r10
    2a94:	9f 90       	pop	r9
    2a96:	8f 90       	pop	r8
    2a98:	7f 90       	pop	r7
    2a9a:	6f 90       	pop	r6
    2a9c:	08 95       	ret

00002a9e <APP_vidUserFunction>:
		}
	}
}

void APP_vidUserFunction (void)
{
    2a9e:	5f 92       	push	r5
    2aa0:	6f 92       	push	r6
    2aa2:	7f 92       	push	r7
    2aa4:	8f 92       	push	r8
    2aa6:	9f 92       	push	r9
    2aa8:	af 92       	push	r10
    2aaa:	bf 92       	push	r11
    2aac:	cf 92       	push	r12
    2aae:	df 92       	push	r13
    2ab0:	ef 92       	push	r14
    2ab2:	ff 92       	push	r15
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
#if 1
	ST_Data_t User;
	u8 loc_u8PressedKey = NOT_PRESSED;

	u8 volatile loc_UserFlag = 0, loc_UserTrail = 1, loc_UserOutValue = 0;
    2acc:	19 82       	std	Y+1, r1	; 0x01
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	8a 83       	std	Y+2, r24	; 0x02
    2ad2:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_u8PosistionCount = 0, loc_u8CountPassword = 0,loc_u8IDLocation,loc_u8IDValue = ' ',loc_u8IDCheckFlag = 0;

	u8 loc_u8AlarmBuffer;
	MDIO_voidGetPinValue(DIO_PORTC, DIO_PIN2, &loc_u8AlarmBuffer);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	62 e0       	ldi	r22, 0x02	; 2
    2ad8:	ae 01       	movw	r20, r28
    2ada:	4c 5f       	subi	r20, 0xFC	; 252
    2adc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ade:	0e 94 43 05 	call	0xa86	; 0xa86 <MDIO_voidGetPinValue>

	if(loc_u8AlarmBuffer == DIO_PIN_LOW)
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <APP_vidUserFunction+0x4c>
    2ae8:	31 c2       	rjmp	.+1122   	; 0x2f4c <APP_vidUserFunction+0x4ae>
	{
		CLCD_voidClearScreen();
    2aea:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("Welcome to User");
    2aee:	8a ea       	ldi	r24, 0xAA	; 170
    2af0:	92 e0       	ldi	r25, 0x02	; 2
    2af2:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("Mode");
    2afe:	8d ec       	ldi	r24, 0xCD	; 205
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2b06:	84 ec       	ldi	r24, 0xC4	; 196
    2b08:	99 e0       	ldi	r25, 0x09	; 9
    2b0a:	28 ec       	ldi	r18, 0xC8	; 200
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	f9 01       	movw	r30, r18
    2b10:	31 97       	sbiw	r30, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <APP_vidUserFunction+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b16:	d9 f7       	brne	.-10     	; 0x2b0e <APP_vidUserFunction+0x70>
		_delay_ms(250);
		CLCD_voidClearScreen();
    2b18:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" c for Exit");
    2b1c:	86 e7       	ldi	r24, 0x76	; 118
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2b24:	84 ec       	ldi	r24, 0xC4	; 196
    2b26:	99 e0       	ldi	r25, 0x09	; 9
    2b28:	28 ec       	ldi	r18, 0xC8	; 200
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	31 97       	sbiw	r30, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <APP_vidUserFunction+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b34:	d9 f7       	brne	.-10     	; 0x2b2c <APP_vidUserFunction+0x8e>
		_delay_ms(250);
		CLCD_voidClearScreen();
    2b36:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString(" = To next step");
    2b3a:	82 e8       	ldi	r24, 0x82	; 130
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2b42:	84 ec       	ldi	r24, 0xC4	; 196
    2b44:	99 e0       	ldi	r25, 0x09	; 9
    2b46:	28 ec       	ldi	r18, 0xC8	; 200
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	f9 01       	movw	r30, r18
    2b4c:	31 97       	sbiw	r30, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <APP_vidUserFunction+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	d9 f7       	brne	.-10     	; 0x2b4a <APP_vidUserFunction+0xac>
		_delay_ms(250);
		CLCD_voidClearScreen();
    2b54:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2b58:	dd 24       	eor	r13, r13
    2b5a:	da 94       	dec	r13
    2b5c:	1a 86       	std	Y+10, r1	; 0x0a
    2b5e:	b8 ec       	ldi	r27, 0xC8	; 200
    2b60:	ab 2e       	mov	r10, r27
    2b62:	b1 2c       	mov	r11, r1
								CLCD_voidSendData(loc_u8PressedKey);
								_delay_ms(200);
								CLCD_voidSetPosition(1, loc_u8CountPassword-1);
								CLCD_voidSendData('*');
								_delay_ms(200);
								User.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    2b64:	a4 e0       	ldi	r26, 0x04	; 4
    2b66:	6a 2e       	mov	r6, r26
    2b68:	71 2c       	mov	r7, r1
    2b6a:	6c 0e       	add	r6, r28
    2b6c:	7d 1e       	adc	r7, r29
									CLCD_voidSetPosition(1, loc_u8CountPassword);
								}
							}
							else if (loc_u8CountPassword < 5)
							{
								loc_UserOutValue = 1;
    2b6e:	cc 24       	eor	r12, r12
    2b70:	c3 94       	inc	r12
    2b72:	55 24       	eor	r5, r5
    2b74:	53 94       	inc	r5
    2b76:	be c1       	rjmp	.+892    	; 0x2ef4 <APP_vidUserFunction+0x456>
    2b78:	f0 e4       	ldi	r31, 0x40	; 64
    2b7a:	8f 2e       	mov	r8, r31
    2b7c:	fc e9       	ldi	r31, 0x9C	; 156
    2b7e:	9f 2e       	mov	r9, r31
		while(loc_UserFlag == 0)
		{
#if 1
			while(1)
			{
				MUART_voidSendData('w');
    2b80:	87 e7       	ldi	r24, 0x77	; 119
    2b82:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

				if(loc_u8PressedKey != 'c')
    2b86:	83 e6       	ldi	r24, 0x63	; 99
    2b88:	d8 16       	cp	r13, r24
    2b8a:	29 f1       	breq	.+74     	; 0x2bd6 <APP_vidUserFunction+0x138>
				{
					loc_u8PressedKey = HKPD_u8GetPressedKey();
    2b8c:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    2b90:	18 2f       	mov	r17, r24

					CLCD_voidClearScreen();
    2b92:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("+ in ID mode to ");
    2b96:	80 e2       	ldi	r24, 0x20	; 32
    2b98:	91 e0       	ldi	r25, 0x01	; 1
    2b9a:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					CLCD_voidSetPosition(1,0);
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
					CLCD_voidSendString("clear");
    2ba6:	81 e3       	ldi	r24, 0x31	; 49
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2bae:	84 ec       	ldi	r24, 0xC4	; 196
    2bb0:	99 e0       	ldi	r25, 0x09	; 9
    2bb2:	f5 01       	movw	r30, r10
    2bb4:	31 97       	sbiw	r30, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <APP_vidUserFunction+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	d9 f7       	brne	.-10     	; 0x2bb2 <APP_vidUserFunction+0x114>
					_delay_ms(250);

					CLCD_voidClearScreen();
    2bbc:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Enter user ID");
    2bc0:	87 e3       	ldi	r24, 0x37	; 55
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					CLCD_voidSetPosition(1,0);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				}

				if(loc_u8PressedKey == 'c')
    2bd0:	13 36       	cpi	r17, 0x63	; 99
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <APP_vidUserFunction+0x138>
    2bd4:	ea c1       	rjmp	.+980    	; 0x2faa <APP_vidUserFunction+0x50c>
				{
					loc_u8PressedKey = 'c';
					loc_UserFlag = 0;
    2bd6:	19 82       	std	Y+1, r1	; 0x01
					CLCD_voidClearScreen();
    2bd8:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2bdc:	e3 e6       	ldi	r30, 0x63	; 99
    2bde:	de 2e       	mov	r13, r30
    2be0:	3c c1       	rjmp	.+632    	; 0x2e5a <APP_vidUserFunction+0x3bc>


				loc_u8IDValue = ' ';
				while(1)
				{
					MUART_voidSendData('w');
    2be2:	87 e7       	ldi	r24, 0x77	; 119
    2be4:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
					loc_u8PressedKey = HKPD_u8GetPressedKey();
    2be8:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    2bec:	d8 2e       	mov	r13, r24

					if (loc_u8PressedKey != NOT_PRESSED && loc_u8PressedKey != '+' && loc_u8PressedKey != '=' && loc_u8PressedKey != 'c' && loc_u8IDValue == ' ')
    2bee:	9f ef       	ldi	r25, 0xFF	; 255
    2bf0:	89 17       	cp	r24, r25
    2bf2:	b9 f3       	breq	.-18     	; 0x2be2 <APP_vidUserFunction+0x144>
    2bf4:	8b e2       	ldi	r24, 0x2B	; 43
    2bf6:	d8 16       	cp	r13, r24
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <APP_vidUserFunction+0x15e>
    2bfa:	cc c1       	rjmp	.+920    	; 0x2f94 <APP_vidUserFunction+0x4f6>
    2bfc:	9d e3       	ldi	r25, 0x3D	; 61
    2bfe:	d9 16       	cp	r13, r25
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <APP_vidUserFunction+0x166>
    2c02:	d5 c1       	rjmp	.+938    	; 0x2fae <APP_vidUserFunction+0x510>
    2c04:	83 e6       	ldi	r24, 0x63	; 99
    2c06:	d8 16       	cp	r13, r24
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <APP_vidUserFunction+0x16e>
    2c0a:	ba cf       	rjmp	.-140    	; 0x2b80 <APP_vidUserFunction+0xe2>
    2c0c:	10 32       	cpi	r17, 0x20	; 32
    2c0e:	49 f7       	brne	.-46     	; 0x2be2 <APP_vidUserFunction+0x144>
					{
						loc_u8IDValue = loc_u8PressedKey;
						CLCD_voidSendData(loc_u8IDValue);
    2c10:	8d 2d       	mov	r24, r13
    2c12:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    2c16:	1d 2d       	mov	r17, r13
    2c18:	e4 cf       	rjmp	.-56     	; 0x2be2 <APP_vidUserFunction+0x144>

					if(loc_u8PressedKey == '=')
					{
						if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
						{
							CLCD_voidClearScreen();
    2c1a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
				if(loc_u8PressedKey == 'c')
				{
					continue;
				}

				if(loc_u8IDValue > '0' && loc_u8IDValue < '6')
    2c1e:	81 2f       	mov	r24, r17
    2c20:	81 53       	subi	r24, 0x31	; 49
    2c22:	85 30       	cpi	r24, 0x05	; 5
    2c24:	78 f1       	brcs	.+94     	; 0x2c84 <APP_vidUserFunction+0x1e6>
    2c26:	09 c1       	rjmp	.+530    	; 0x2e3a <APP_vidUserFunction+0x39c>
						if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
						{
							CLCD_voidClearScreen();
							break;
						}
						else if (loc_u8IDValue == ' ')
    2c28:	10 32       	cpi	r17, 0x20	; 32
    2c2a:	c1 f4       	brne	.+48     	; 0x2c5c <APP_vidUserFunction+0x1be>
						{
							CLCD_voidClearScreen();
    2c2c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
							CLCD_voidSendString("Enter ID");
    2c30:	85 e4       	ldi	r24, 0x45	; 69
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2c38:	84 ec       	ldi	r24, 0xC4	; 196
    2c3a:	99 e0       	ldi	r25, 0x09	; 9
    2c3c:	f5 01       	movw	r30, r10
    2c3e:	31 97       	sbiw	r30, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <APP_vidUserFunction+0x1a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	d9 f7       	brne	.-10     	; 0x2c3c <APP_vidUserFunction+0x19e>
							_delay_ms(250);
							CLCD_voidClearScreen();
    2c46:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
							CLCD_voidSendString("Enter user ID");
    2c4a:	87 e3       	ldi	r24, 0x37	; 55
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
							CLCD_voidSetPosition(1,0);
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    2c5a:	c3 cf       	rjmp	.-122    	; 0x2be2 <APP_vidUserFunction+0x144>
						}
						else
						{
							CLCD_voidClearScreen();
    2c5c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
							CLCD_voidSendString("Invalid operator");
    2c60:	8e e4       	ldi	r24, 0x4E	; 78
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2c68:	84 ec       	ldi	r24, 0xC4	; 196
    2c6a:	99 e0       	ldi	r25, 0x09	; 9
    2c6c:	f5 01       	movw	r30, r10
    2c6e:	31 97       	sbiw	r30, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <APP_vidUserFunction+0x1d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c74:	d9 f7       	brne	.-10     	; 0x2c6c <APP_vidUserFunction+0x1ce>
							loc_u8IDValue = ' ';
							_delay_ms(250);
							CLCD_voidClearScreen();
    2c76:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
							CLCD_voidSendString("Enter user ID");
    2c7a:	87 e3       	ldi	r24, 0x37	; 55
    2c7c:	91 e0       	ldi	r25, 0x01	; 1
    2c7e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2c82:	8f c1       	rjmp	.+798    	; 0x2fa2 <APP_vidUserFunction+0x504>
							CLCD_voidSetPosition(1,0);
    2c84:	7f e0       	ldi	r23, 0x0F	; 15
    2c86:	f7 2e       	mov	r15, r23
    2c88:	01 e3       	ldi	r16, 0x31	; 49
					loc_u8IDLocation = EEPROM_ID1_LOCATION;
					u8 loc_u8IDCountPosistion = '1';

					while(1)
					{
						if(loc_u8IDValue != HEEPROM_u8ReadData(loc_u8IDLocation) && loc_u8IDValue == loc_u8IDCountPosistion)
    2c8a:	8f 2d       	mov	r24, r15
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2c92:	18 17       	cp	r17, r24
    2c94:	11 f0       	breq	.+4      	; 0x2c9a <APP_vidUserFunction+0x1fc>
    2c96:	10 17       	cp	r17, r16
    2c98:	81 f0       	breq	.+32     	; 0x2cba <APP_vidUserFunction+0x21c>
						{
							break;
						}
						else if (loc_u8IDValue == HEEPROM_u8ReadData(loc_u8IDLocation))
    2c9a:	8f 2d       	mov	r24, r15
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2ca2:	18 17       	cp	r17, r24
    2ca4:	71 f0       	breq	.+28     	; 0x2cc2 <APP_vidUserFunction+0x224>
							loc_u8IDCheckFlag = 1;
							break;
						}
						else
						{
							loc_u8IDLocation += 5;
    2ca6:	95 e0       	ldi	r25, 0x05	; 5
    2ca8:	f9 0e       	add	r15, r25
							loc_u8IDCountPosistion++;
						}

						if(loc_u8IDLocation == 36)
    2caa:	84 e2       	ldi	r24, 0x24	; 36
    2cac:	f8 16       	cp	r15, r24
    2cae:	29 f0       	breq	.+10     	; 0x2cba <APP_vidUserFunction+0x21c>
							break;
						}
						else
						{
							loc_u8IDLocation += 5;
							loc_u8IDCountPosistion++;
    2cb0:	0f 5f       	subi	r16, 0xFF	; 255
    2cb2:	c4 01       	movw	r24, r8
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <APP_vidUserFunction+0x216>
    2cb8:	e8 cf       	rjmp	.-48     	; 0x2c8a <APP_vidUserFunction+0x1ec>
							break;
						}
						_delay_ms(20);
					}

					if(loc_u8IDCheckFlag == 1)
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	91 30       	cpi	r25, 0x01	; 1
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <APP_vidUserFunction+0x224>
    2cc0:	b7 c0       	rjmp	.+366    	; 0x2e30 <APP_vidUserFunction+0x392>
					{
						CLCD_voidClearScreen();
    2cc2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
						CLCD_voidSendString("c in password");
    2cc6:	8b eb       	ldi	r24, 0xBB	; 187
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
						CLCD_voidSetPosition(1,0);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendString("mode to clear");
    2cd6:	89 ec       	ldi	r24, 0xC9	; 201
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2cde:	84 ec       	ldi	r24, 0xC4	; 196
    2ce0:	99 e0       	ldi	r25, 0x09	; 9
    2ce2:	f5 01       	movw	r30, r10
    2ce4:	31 97       	sbiw	r30, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <APP_vidUserFunction+0x246>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	d9 f7       	brne	.-10     	; 0x2ce2 <APP_vidUserFunction+0x244>
						_delay_ms(250);

						CLCD_voidClearScreen();
    2cec:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
						CLCD_voidSendString("Enter password");
    2cf0:	82 e9       	ldi	r24, 0x92	; 146
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
						CLCD_voidSetPosition(1,0);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    2d00:	11 e0       	ldi	r17, 0x01	; 1
						u8 loc_u8Key = 0;

						for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
						{
							MUART_voidSendData('w');
    2d02:	87 e7       	ldi	r24, 0x77	; 119
    2d04:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
							do
							{
								loc_u8PressedKey = HKPD_u8GetPressedKey();
    2d08:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    2d0c:	d8 2e       	mov	r13, r24
							}while(	loc_u8PressedKey == NOT_PRESSED);
    2d0e:	8f ef       	ldi	r24, 0xFF	; 255
    2d10:	d8 16       	cp	r13, r24
    2d12:	d1 f3       	breq	.-12     	; 0x2d08 <APP_vidUserFunction+0x26a>

							if(loc_u8PressedKey == 'c' && loc_UserOutValue == 0 )
    2d14:	93 e6       	ldi	r25, 0x63	; 99
    2d16:	d9 16       	cp	r13, r25
    2d18:	99 f4       	brne	.+38     	; 0x2d40 <APP_vidUserFunction+0x2a2>
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	88 23       	and	r24, r24
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <APP_vidUserFunction+0x284>
    2d20:	34 c1       	rjmp	.+616    	; 0x2f8a <APP_vidUserFunction+0x4ec>
							{
								loc_u8CountPassword = 0;
								CLCD_voidSetPosition(1, loc_u8CountPassword);
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
								CLCD_voidSendData(' ');
    2d2a:	80 e2       	ldi	r24, 0x20	; 32
    2d2c:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    2d30:	80 ed       	ldi	r24, 0xD0	; 208
    2d32:	97 e0       	ldi	r25, 0x07	; 7
    2d34:	f5 01       	movw	r30, r10
    2d36:	31 97       	sbiw	r30, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <APP_vidUserFunction+0x298>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	d9 f7       	brne	.-10     	; 0x2d34 <APP_vidUserFunction+0x296>
    2d3e:	24 c1       	rjmp	.+584    	; 0x2f88 <APP_vidUserFunction+0x4ea>
									loc_UserOutValue = 0;
									loc_u8CountPassword = 0;
									CLCD_voidSetPosition(1, loc_u8CountPassword);
								}
							}
							else if (loc_u8CountPassword < 5)
    2d40:	15 30       	cpi	r17, 0x05	; 5
    2d42:	08 f0       	brcs	.+2      	; 0x2d46 <APP_vidUserFunction+0x2a8>
    2d44:	3c c0       	rjmp	.+120    	; 0x2dbe <APP_vidUserFunction+0x320>
    2d46:	1c c0       	rjmp	.+56     	; 0x2d80 <APP_vidUserFunction+0x2e2>

							if (loc_u8PressedKey == 'c')
							{
								if (loc_UserOutValue == 1)
								{
									CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    2d48:	12 50       	subi	r17, 0x02	; 2
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	61 2f       	mov	r22, r17
    2d4e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
									CLCD_voidSendData(' ');
    2d52:	80 e2       	ldi	r24, 0x20	; 32
    2d54:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    2d58:	80 ed       	ldi	r24, 0xD0	; 208
    2d5a:	97 e0       	ldi	r25, 0x07	; 7
    2d5c:	f5 01       	movw	r30, r10
    2d5e:	31 97       	sbiw	r30, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <APP_vidUserFunction+0x2c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	d9 f7       	brne	.-10     	; 0x2d5c <APP_vidUserFunction+0x2be>
									_delay_ms(200);
									CLCD_voidSetPosition(1, loc_u8CountPassword-2);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	61 2f       	mov	r22, r17
    2d6a:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
									loc_u8CountPassword-=2;
								}
								if (loc_u8CountPassword == 1 || loc_u8CountPassword == 0)
    2d6e:	12 30       	cpi	r17, 0x02	; 2
    2d70:	50 f5       	brcc	.+84     	; 0x2dc6 <APP_vidUserFunction+0x328>
								{
									loc_UserOutValue = 0;
    2d72:	1b 82       	std	Y+3, r1	; 0x03
									loc_u8CountPassword = 0;
									CLCD_voidSetPosition(1, loc_u8CountPassword);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    2d7c:	10 e0       	ldi	r17, 0x00	; 0
    2d7e:	23 c0       	rjmp	.+70     	; 0x2dc6 <APP_vidUserFunction+0x328>
								}
							}
							else if (loc_u8CountPassword < 5)
							{
								loc_UserOutValue = 1;
    2d80:	5b 82       	std	Y+3, r5	; 0x03
								CLCD_voidSendData(loc_u8PressedKey);
    2d82:	8d 2d       	mov	r24, r13
    2d84:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    2d88:	80 ed       	ldi	r24, 0xD0	; 208
    2d8a:	97 e0       	ldi	r25, 0x07	; 7
    2d8c:	f5 01       	movw	r30, r10
    2d8e:	31 97       	sbiw	r30, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <APP_vidUserFunction+0x2f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d94:	d9 f7       	brne	.-10     	; 0x2d8c <APP_vidUserFunction+0x2ee>
								_delay_ms(200);
								CLCD_voidSetPosition(1, loc_u8CountPassword-1);
    2d96:	61 2f       	mov	r22, r17
    2d98:	61 50       	subi	r22, 0x01	; 1
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
								CLCD_voidSendData('*');
    2da0:	8a e2       	ldi	r24, 0x2A	; 42
    2da2:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
    2da6:	80 ed       	ldi	r24, 0xD0	; 208
    2da8:	97 e0       	ldi	r25, 0x07	; 7
    2daa:	f5 01       	movw	r30, r10
    2dac:	31 97       	sbiw	r30, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <APP_vidUserFunction+0x30e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db2:	d9 f7       	brne	.-10     	; 0x2daa <APP_vidUserFunction+0x30c>
								_delay_ms(200);
								User.st_arr_u8Password[loc_u8CountPassword-1] = loc_u8PressedKey;
    2db4:	f3 01       	movw	r30, r6
    2db6:	e1 0f       	add	r30, r17
    2db8:	f1 1d       	adc	r31, r1
    2dba:	d0 82       	st	Z, r13
    2dbc:	04 c0       	rjmp	.+8      	; 0x2dc6 <APP_vidUserFunction+0x328>
							}
							else if (loc_u8PressedKey == '=' && loc_u8CountPassword >= 5)
    2dbe:	8d e3       	ldi	r24, 0x3D	; 61
    2dc0:	d8 16       	cp	r13, r24
    2dc2:	29 f0       	breq	.+10     	; 0x2dce <APP_vidUserFunction+0x330>
								loc_u8PressedKey = '=';
								break;
							}
							else
							{
								loc_u8CountPassword-=1;
    2dc4:	11 50       	subi	r17, 0x01	; 1
						CLCD_voidClearScreen();
						CLCD_voidSendString("Enter password");
						CLCD_voidSetPosition(1,0);
						u8 loc_u8Key = 0;

						for(loc_u8CountPassword  = 1; loc_u8CountPassword < 6; loc_u8CountPassword++)
    2dc6:	1f 5f       	subi	r17, 0xFF	; 255
    2dc8:	16 30       	cpi	r17, 0x06	; 6
    2dca:	08 f4       	brcc	.+2      	; 0x2dce <APP_vidUserFunction+0x330>
    2dcc:	9a cf       	rjmp	.-204    	; 0x2d02 <APP_vidUserFunction+0x264>
							{
								loc_u8CountPassword-=1;
							}
						}

						if(User.st_arr_u8Password[0] != HEEPROM_u8ReadData(loc_u8IDLocation + 1) || User.st_arr_u8Password[1] != HEEPROM_u8ReadData(loc_u8IDLocation + 2) || User.st_arr_u8Password[2] != HEEPROM_u8ReadData(loc_u8IDLocation + 3) || User.st_arr_u8Password[3] != HEEPROM_u8ReadData(loc_u8IDLocation + 4))
    2dce:	1d 81       	ldd	r17, Y+5	; 0x05
    2dd0:	ef 2c       	mov	r14, r15
    2dd2:	ff 24       	eor	r15, r15
    2dd4:	c7 01       	movw	r24, r14
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2ddc:	18 17       	cp	r17, r24
    2dde:	a9 f4       	brne	.+42     	; 0x2e0a <APP_vidUserFunction+0x36c>
    2de0:	1e 81       	ldd	r17, Y+6	; 0x06
    2de2:	c7 01       	movw	r24, r14
    2de4:	02 96       	adiw	r24, 0x02	; 2
    2de6:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2dea:	18 17       	cp	r17, r24
    2dec:	71 f4       	brne	.+28     	; 0x2e0a <APP_vidUserFunction+0x36c>
    2dee:	1f 81       	ldd	r17, Y+7	; 0x07
    2df0:	c7 01       	movw	r24, r14
    2df2:	03 96       	adiw	r24, 0x03	; 3
    2df4:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2df8:	18 17       	cp	r17, r24
    2dfa:	39 f4       	brne	.+14     	; 0x2e0a <APP_vidUserFunction+0x36c>
    2dfc:	18 85       	ldd	r17, Y+8	; 0x08
    2dfe:	c7 01       	movw	r24, r14
    2e00:	04 96       	adiw	r24, 0x04	; 4
    2e02:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    2e06:	18 17       	cp	r17, r24
    2e08:	49 f0       	breq	.+18     	; 0x2e1c <APP_vidUserFunction+0x37e>
						{
							loc_UserFlag = 1;
    2e0a:	c9 82       	std	Y+1, r12	; 0x01
							CLCD_voidClearScreen();
    2e0c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
							CLCD_voidSendString("Wrong password");
    2e10:	89 e0       	ldi	r24, 0x09	; 9
    2e12:	92 e0       	ldi	r25, 0x02	; 2
    2e14:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2e18:	dd 24       	eor	r13, r13
    2e1a:	1a c0       	rjmp	.+52     	; 0x2e50 <APP_vidUserFunction+0x3b2>
							loc_u8PressedKey = 0;
							break;
						}

						if(loc_UserFlag == 0 || loc_UserFlag == 1 )
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	88 23       	and	r24, r24
    2e20:	a1 f0       	breq	.+40     	; 0x2e4a <APP_vidUserFunction+0x3ac>
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	9a 87       	std	Y+10, r25	; 0x0a
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <APP_vidUserFunction+0x390>
    2e2c:	a9 ce       	rjmp	.-686    	; 0x2b80 <APP_vidUserFunction+0xe2>
    2e2e:	0d c0       	rjmp	.+26     	; 0x2e4a <APP_vidUserFunction+0x3ac>
						}

					}
					else
					{
						CLCD_voidClearScreen();
    2e30:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
						CLCD_voidSendString("ID doesn't exist");
    2e34:	8c e6       	ldi	r24, 0x6C	; 108
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	04 c0       	rjmp	.+8      	; 0x2e42 <APP_vidUserFunction+0x3a4>
						break;
					}
				}
				else
				{
					CLCD_voidClearScreen();
    2e3a:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Invalid ID");
    2e3e:	87 e8       	ldi	r24, 0x87	; 135
    2e40:	91 e0       	ldi	r25, 0x01	; 1
    2e42:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					loc_UserFlag = 1;
    2e46:	c9 82       	std	Y+1, r12	; 0x01
    2e48:	0e c0       	rjmp	.+28     	; 0x2e66 <APP_vidUserFunction+0x3c8>
					break;
				}

			}
#endif
			if(loc_u8PressedKey == 'c' && loc_UserFlag == 0)
    2e4a:	83 e6       	ldi	r24, 0x63	; 99
    2e4c:	d8 16       	cp	r13, r24
    2e4e:	19 f0       	breq	.+6      	; 0x2e56 <APP_vidUserFunction+0x3b8>
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	9a 87       	std	Y+10, r25	; 0x0a
    2e54:	08 c0       	rjmp	.+16     	; 0x2e66 <APP_vidUserFunction+0x3c8>
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	8a 87       	std	Y+10, r24	; 0x0a
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	88 23       	and	r24, r24
    2e5e:	19 f4       	brne	.+6      	; 0x2e66 <APP_vidUserFunction+0x3c8>
    2e60:	63 e6       	ldi	r22, 0x63	; 99
    2e62:	d6 2e       	mov	r13, r22
    2e64:	4b c0       	rjmp	.+150    	; 0x2efc <APP_vidUserFunction+0x45e>
			{
				break;
			}

			if(loc_UserFlag == 1 && loc_UserTrail < 3)
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	11 f5       	brne	.+68     	; 0x2eb0 <APP_vidUserFunction+0x412>
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	83 30       	cpi	r24, 0x03	; 3
    2e70:	f8 f4       	brcc	.+62     	; 0x2eb0 <APP_vidUserFunction+0x412>
			{
				CLCD_voidSetPosition(1,0);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	60 e0       	ldi	r22, 0x00	; 0
    2e76:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
				CLCD_voidSendString("Tries left: ");
    2e7a:	88 e1       	ldi	r24, 0x18	; 24
    2e7c:	92 e0       	ldi	r25, 0x02	; 2
    2e7e:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
				CLCD_voidSendNumber(3-loc_UserTrail);
    2e82:	2a 81       	ldd	r18, Y+2	; 0x02
    2e84:	63 e0       	ldi	r22, 0x03	; 3
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	62 1b       	sub	r22, r18
    2e8a:	71 09       	sbc	r23, r1
    2e8c:	88 27       	eor	r24, r24
    2e8e:	77 fd       	sbrc	r23, 7
    2e90:	80 95       	com	r24
    2e92:	98 2f       	mov	r25, r24
    2e94:	0e 94 e6 08 	call	0x11cc	; 0x11cc <CLCD_voidSendNumber>
				loc_UserTrail++;
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	8f 5f       	subi	r24, 0xFF	; 255
    2e9c:	8a 83       	std	Y+2, r24	; 0x02
				loc_UserFlag = 0;
    2e9e:	19 82       	std	Y+1, r1	; 0x01
    2ea0:	84 ec       	ldi	r24, 0xC4	; 196
    2ea2:	99 e0       	ldi	r25, 0x09	; 9
    2ea4:	f5 01       	movw	r30, r10
    2ea6:	31 97       	sbiw	r30, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <APP_vidUserFunction+0x408>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eac:	d9 f7       	brne	.-10     	; 0x2ea4 <APP_vidUserFunction+0x406>
    2eae:	20 c0       	rjmp	.+64     	; 0x2ef0 <APP_vidUserFunction+0x452>
				_delay_ms(250);
				CLCD_voidClearScreen();
			}
			else
			{
				if(loc_UserFlag == 0)
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	88 23       	and	r24, r24
    2eb4:	19 f1       	breq	.+70     	; 0x2efc <APP_vidUserFunction+0x45e>
				{
					break;
				}
				else if(loc_UserTrail == 3)
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	83 30       	cpi	r24, 0x03	; 3
    2eba:	e1 f4       	brne	.+56     	; 0x2ef4 <APP_vidUserFunction+0x456>
    2ebc:	84 ec       	ldi	r24, 0xC4	; 196
    2ebe:	99 e0       	ldi	r25, 0x09	; 9
    2ec0:	f5 01       	movw	r30, r10
    2ec2:	31 97       	sbiw	r30, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <APP_vidUserFunction+0x424>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec8:	d9 f7       	brne	.-10     	; 0x2ec0 <APP_vidUserFunction+0x422>
				{
					_delay_ms(250);
					CLCD_voidClearScreen();
    2eca:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
					CLCD_voidSendString("Can not sign in");
    2ece:	82 e9       	ldi	r24, 0x92	; 146
    2ed0:	92 e0       	ldi	r25, 0x02	; 2
    2ed2:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
					MDIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	62 e0       	ldi	r22, 0x02	; 2
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 97 04 	call	0x92e	; 0x92e <MDIO_voidSetPinValue>
    2ee0:	84 ec       	ldi	r24, 0xC4	; 196
    2ee2:	99 e0       	ldi	r25, 0x09	; 9
    2ee4:	f5 01       	movw	r30, r10
    2ee6:	31 97       	sbiw	r30, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <APP_vidUserFunction+0x448>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eec:	d9 f7       	brne	.-10     	; 0x2ee4 <APP_vidUserFunction+0x446>
					_delay_ms(250);
					loc_UserFlag = 1;
    2eee:	c9 82       	std	Y+1, r12	; 0x01
					CLCD_voidClearScreen();
    2ef0:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidClearScreen();
		CLCD_voidSendString(" = To next step");
		_delay_ms(250);
		CLCD_voidClearScreen();

		while(loc_UserFlag == 0)
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	88 23       	and	r24, r24
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <APP_vidUserFunction+0x45e>
    2efa:	3e ce       	rjmp	.-900    	; 0x2b78 <APP_vidUserFunction+0xda>
				}

			}
		}

		if (loc_UserFlag == 0 && loc_u8PressedKey != 'c')
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	88 23       	and	r24, r24
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <APP_vidUserFunction+0x466>
    2f02:	3b c0       	rjmp	.+118    	; 0x2f7a <APP_vidUserFunction+0x4dc>
    2f04:	93 e6       	ldi	r25, 0x63	; 99
    2f06:	d9 16       	cp	r13, r25
    2f08:	c1 f1       	breq	.+112    	; 0x2f7a <APP_vidUserFunction+0x4dc>
		{
			loc_UserTrail = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
			CLCD_voidClearScreen();
    2f0e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
			CLCD_voidSendString("Sign in");
    2f12:	82 ea       	ldi	r24, 0xA2	; 162
    2f14:	92 e0       	ldi	r25, 0x02	; 2
    2f16:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			CLCD_voidSetPosition(1,0);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
			CLCD_voidSendString("successfully");
    2f22:	8e ea       	ldi	r24, 0xAE	; 174
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
			MUART_voidSendData('s');
    2f2a:	83 e7       	ldi	r24, 0x73	; 115
    2f2c:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
    2f30:	80 e1       	ldi	r24, 0x10	; 16
    2f32:	97 e2       	ldi	r25, 0x27	; 39
    2f34:	28 ec       	ldi	r18, 0xC8	; 200
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	f9 01       	movw	r30, r18
    2f3a:	31 97       	sbiw	r30, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <APP_vidUserFunction+0x49c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f40:	d9 f7       	brne	.-10     	; 0x2f38 <APP_vidUserFunction+0x49a>
			_delay_ms(1000);
			gol_u8FlagMode = 0;
    2f42:	10 92 fa 02 	sts	0x02FA, r1
			gol_u8Mode = 0;
    2f46:	10 92 fe 02 	sts	0x02FE, r1
    2f4a:	35 c0       	rjmp	.+106    	; 0x2fb6 <APP_vidUserFunction+0x518>
		}

	}
	else
	{
		CLCD_voidClearScreen();
    2f4c:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
		CLCD_voidSendString("Close Alarm");
    2f50:	8e e3       	ldi	r24, 0x3E	; 62
    2f52:	92 e0       	ldi	r25, 0x02	; 2
    2f54:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("first");
    2f60:	8a e4       	ldi	r24, 0x4A	; 74
    2f62:	92 e0       	ldi	r25, 0x02	; 2
    2f64:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
    2f68:	84 ec       	ldi	r24, 0xC4	; 196
    2f6a:	99 e0       	ldi	r25, 0x09	; 9
    2f6c:	28 ec       	ldi	r18, 0xC8	; 200
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	f9 01       	movw	r30, r18
    2f72:	31 97       	sbiw	r30, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <APP_vidUserFunction+0x4d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f78:	d9 f7       	brne	.-10     	; 0x2f70 <APP_vidUserFunction+0x4d2>
		_delay_ms(250);
		gol_u8FlagMode = 0;
    2f7a:	10 92 fa 02 	sts	0x02FA, r1
		gol_u8Mode = 0;
    2f7e:	10 92 fe 02 	sts	0x02FE, r1
		CLCD_voidClearScreen();
    2f82:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>
    2f86:	17 c0       	rjmp	.+46     	; 0x2fb6 <APP_vidUserFunction+0x518>
	}
#endif
}
    2f88:	10 e0       	ldi	r17, 0x00	; 0
								_delay_ms(200);
							}

							if (loc_u8PressedKey == 'c')
							{
								if (loc_UserOutValue == 1)
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	81 30       	cpi	r24, 0x01	; 1
    2f8e:	09 f0       	breq	.+2      	; 0x2f92 <APP_vidUserFunction+0x4f4>
    2f90:	ee ce       	rjmp	.-548    	; 0x2d6e <APP_vidUserFunction+0x2d0>
    2f92:	da ce       	rjmp	.-588    	; 0x2d48 <APP_vidUserFunction+0x2aa>
						break;
					}

					if(loc_u8PressedKey == '+')
					{
						CLCD_voidSetPosition(1,0);
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
						CLCD_voidSendData(' ');
    2f9c:	80 e2       	ldi	r24, 0x20	; 32
    2f9e:	0e 94 fd 07 	call	0xffa	; 0xffa <CLCD_voidSendData>
						loc_u8IDValue = ' ';
						CLCD_voidSetPosition(1,0);
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
    2faa:	10 e2       	ldi	r17, 0x20	; 32
    2fac:	1a ce       	rjmp	.-972    	; 0x2be2 <APP_vidUserFunction+0x144>
					}

					if(loc_u8PressedKey == '=')
					{
						if(loc_u8IDValue >= '0' && loc_u8IDValue < '10')
    2fae:	10 33       	cpi	r17, 0x30	; 48
    2fb0:	08 f4       	brcc	.+2      	; 0x2fb4 <APP_vidUserFunction+0x516>
    2fb2:	3a ce       	rjmp	.-908    	; 0x2c28 <APP_vidUserFunction+0x18a>
    2fb4:	32 ce       	rjmp	.-924    	; 0x2c1a <APP_vidUserFunction+0x17c>
		gol_u8FlagMode = 0;
		gol_u8Mode = 0;
		CLCD_voidClearScreen();
	}
#endif
}
    2fb6:	2a 96       	adiw	r28, 0x0a	; 10
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	1f 91       	pop	r17
    2fc8:	0f 91       	pop	r16
    2fca:	ff 90       	pop	r15
    2fcc:	ef 90       	pop	r14
    2fce:	df 90       	pop	r13
    2fd0:	cf 90       	pop	r12
    2fd2:	bf 90       	pop	r11
    2fd4:	af 90       	pop	r10
    2fd6:	9f 90       	pop	r9
    2fd8:	8f 90       	pop	r8
    2fda:	7f 90       	pop	r7
    2fdc:	6f 90       	pop	r6
    2fde:	5f 90       	pop	r5
    2fe0:	08 95       	ret

00002fe2 <main>:
void APP_vidUserFunction (void);
void APP_vidGuestFunction (void);
void APP_vidAlarmFunction(void);

int main()
{
    2fe2:	1f 93       	push	r17
	MDIO_voidSetPinDirection(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	62 e0       	ldi	r22, 0x02	; 2
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	0e 94 1e 04 	call	0x83c	; 0x83c <MDIO_voidSetPinDirection>

	MUART_voidInitialization();
    2fee:	0e 94 9d 03 	call	0x73a	; 0x73a <MUART_voidInitialization>
	HEEPROM_voidInitialization();
    2ff2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <HEEPROM_voidInitialization>
	CLCD_voidInitialization();
    2ff6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <CLCD_voidInitialization>
	HKPD_voidInitialization();
    2ffa:	0e 94 2d 07 	call	0xe5a	; 0xe5a <HKPD_voidInitialization>

#if 1

	u8 loc_u8PressedKey;

	gol_u8PosistionCount = HEEPROM_u8ReadData(EEPROM_PosistionCount_LOCATION);
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    3006:	80 93 fd 02 	sts	0x02FD, r24

	CLCD_voidSetPosition(0,4);
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	64 e0       	ldi	r22, 0x04	; 4
    300e:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
	CLCD_voidSendString("Welcome");
    3012:	8a eb       	ldi	r24, 0xBA	; 186
    3014:	92 e0       	ldi	r25, 0x02	; 2
    3016:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
	MUART_voidSendData('w');
    301a:	87 e7       	ldi	r24, 0x77	; 119
    301c:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>
    3020:	80 ed       	ldi	r24, 0xD0	; 208
    3022:	97 e0       	ldi	r25, 0x07	; 7
    3024:	28 ec       	ldi	r18, 0xC8	; 200
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	f9 01       	movw	r30, r18
    302a:	31 97       	sbiw	r30, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3030:	d9 f7       	brne	.-10     	; 0x3028 <main+0x46>
	_delay_ms(200);
	CLCD_voidClearScreen();
    3032:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidClearScreen>

	if (HEEPROM_u8ReadData(EEPROM_AdminPasswordStatus_LOCATION) == '0')
    3036:	82 e0       	ldi	r24, 0x02	; 2
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	0e 94 7e 07 	call	0xefc	; 0xefc <HEEPROM_u8ReadData>
    303e:	80 33       	cpi	r24, 0x30	; 48
    3040:	11 f4       	brne	.+4      	; 0x3046 <main+0x64>
	{
		APP_voidInitFuncation();
    3042:	0e 94 8b 0a 	call	0x1516	; 0x1516 <APP_voidInitFuncation>
	}

	gol_u8Mode = 0;
    3046:	10 92 fe 02 	sts	0x02FE, r1
	gol_u8FlagMode = 0;
    304a:	10 92 fa 02 	sts	0x02FA, r1

	while(1)
	{
		loc_u8PressedKey = HKPD_u8GetPressedKey();
    304e:	0e 94 a9 06 	call	0xd52	; 0xd52 <HKPD_u8GetPressedKey>
    3052:	18 2f       	mov	r17, r24

		CLCD_voidSetPosition(0,0);
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("1 Admin 2 User");
    305c:	82 ec       	ldi	r24, 0xC2	; 194
    305e:	92 e0       	ldi	r25, 0x02	; 2
    3060:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>
		CLCD_voidSetPosition(1,0);
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	0e 94 e7 07 	call	0xfce	; 0xfce <CLCD_voidSetPosition>
		CLCD_voidSendString("3 Guest 4 StopAl");
    306c:	81 ed       	ldi	r24, 0xD1	; 209
    306e:	92 e0       	ldi	r25, 0x02	; 2
    3070:	0e 94 67 09 	call	0x12ce	; 0x12ce <CLCD_voidSendString>

		MUART_voidSendData('w');
    3074:	87 e7       	ldi	r24, 0x77	; 119
    3076:	0e 94 a4 03 	call	0x748	; 0x748 <MUART_voidSendData>

		if(loc_u8PressedKey != NOT_PRESSED)
    307a:	1f 3f       	cpi	r17, 0xFF	; 255
    307c:	41 f3       	breq	.-48     	; 0x304e <main+0x6c>
		{
			if (gol_u8FlagMode == 0 && loc_u8PressedKey < '5' && loc_u8PressedKey > '0')
    307e:	80 91 fa 02 	lds	r24, 0x02FA
    3082:	88 23       	and	r24, r24
    3084:	49 f4       	brne	.+18     	; 0x3098 <main+0xb6>
    3086:	15 33       	cpi	r17, 0x35	; 53
    3088:	38 f4       	brcc	.+14     	; 0x3098 <main+0xb6>
    308a:	11 33       	cpi	r17, 0x31	; 49
    308c:	28 f0       	brcs	.+10     	; 0x3098 <main+0xb6>
			{
				gol_u8Mode = loc_u8PressedKey;
    308e:	10 93 fe 02 	sts	0x02FE, r17
				loc_u8PressedKey = NOT_PRESSED;
				gol_u8FlagMode = 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	80 93 fa 02 	sts	0x02FA, r24
			}

			if(gol_u8Mode == '1')
    3098:	80 91 fe 02 	lds	r24, 0x02FE
    309c:	81 33       	cpi	r24, 0x31	; 49
    309e:	11 f4       	brne	.+4      	; 0x30a4 <main+0xc2>
			{
				APP_vidAdminFunction ();
    30a0:	0e 94 bb 10 	call	0x2176	; 0x2176 <APP_vidAdminFunction>
			}

			if(gol_u8Mode == '2')
    30a4:	80 91 fe 02 	lds	r24, 0x02FE
    30a8:	82 33       	cpi	r24, 0x32	; 50
    30aa:	11 f4       	brne	.+4      	; 0x30b0 <main+0xce>
			{
				APP_vidUserFunction ();
    30ac:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <APP_vidUserFunction>
			}

			if(gol_u8Mode == '3')
    30b0:	80 91 fe 02 	lds	r24, 0x02FE
    30b4:	83 33       	cpi	r24, 0x33	; 51
    30b6:	11 f4       	brne	.+4      	; 0x30bc <main+0xda>
			{
				APP_vidGuestFunction ();
    30b8:	0e 94 b9 13 	call	0x2772	; 0x2772 <APP_vidGuestFunction>
			}

			if(gol_u8Mode == '4')
    30bc:	80 91 fe 02 	lds	r24, 0x02FE
    30c0:	84 33       	cpi	r24, 0x34	; 52
    30c2:	29 f6       	brne	.-118    	; 0x304e <main+0x6c>
			{
				APP_vidAlarmFunction();
    30c4:	0e 94 3c 12 	call	0x2478	; 0x2478 <APP_vidAlarmFunction>
    30c8:	c2 cf       	rjmp	.-124    	; 0x304e <main+0x6c>

000030ca <__mulsi3>:
    30ca:	62 9f       	mul	r22, r18
    30cc:	d0 01       	movw	r26, r0
    30ce:	73 9f       	mul	r23, r19
    30d0:	f0 01       	movw	r30, r0
    30d2:	82 9f       	mul	r24, r18
    30d4:	e0 0d       	add	r30, r0
    30d6:	f1 1d       	adc	r31, r1
    30d8:	64 9f       	mul	r22, r20
    30da:	e0 0d       	add	r30, r0
    30dc:	f1 1d       	adc	r31, r1
    30de:	92 9f       	mul	r25, r18
    30e0:	f0 0d       	add	r31, r0
    30e2:	83 9f       	mul	r24, r19
    30e4:	f0 0d       	add	r31, r0
    30e6:	74 9f       	mul	r23, r20
    30e8:	f0 0d       	add	r31, r0
    30ea:	65 9f       	mul	r22, r21
    30ec:	f0 0d       	add	r31, r0
    30ee:	99 27       	eor	r25, r25
    30f0:	72 9f       	mul	r23, r18
    30f2:	b0 0d       	add	r27, r0
    30f4:	e1 1d       	adc	r30, r1
    30f6:	f9 1f       	adc	r31, r25
    30f8:	63 9f       	mul	r22, r19
    30fa:	b0 0d       	add	r27, r0
    30fc:	e1 1d       	adc	r30, r1
    30fe:	f9 1f       	adc	r31, r25
    3100:	bd 01       	movw	r22, r26
    3102:	cf 01       	movw	r24, r30
    3104:	11 24       	eor	r1, r1
    3106:	08 95       	ret

00003108 <__udivmodsi4>:
    3108:	a1 e2       	ldi	r26, 0x21	; 33
    310a:	1a 2e       	mov	r1, r26
    310c:	aa 1b       	sub	r26, r26
    310e:	bb 1b       	sub	r27, r27
    3110:	fd 01       	movw	r30, r26
    3112:	0d c0       	rjmp	.+26     	; 0x312e <__udivmodsi4_ep>

00003114 <__udivmodsi4_loop>:
    3114:	aa 1f       	adc	r26, r26
    3116:	bb 1f       	adc	r27, r27
    3118:	ee 1f       	adc	r30, r30
    311a:	ff 1f       	adc	r31, r31
    311c:	a2 17       	cp	r26, r18
    311e:	b3 07       	cpc	r27, r19
    3120:	e4 07       	cpc	r30, r20
    3122:	f5 07       	cpc	r31, r21
    3124:	20 f0       	brcs	.+8      	; 0x312e <__udivmodsi4_ep>
    3126:	a2 1b       	sub	r26, r18
    3128:	b3 0b       	sbc	r27, r19
    312a:	e4 0b       	sbc	r30, r20
    312c:	f5 0b       	sbc	r31, r21

0000312e <__udivmodsi4_ep>:
    312e:	66 1f       	adc	r22, r22
    3130:	77 1f       	adc	r23, r23
    3132:	88 1f       	adc	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	1a 94       	dec	r1
    3138:	69 f7       	brne	.-38     	; 0x3114 <__udivmodsi4_loop>
    313a:	60 95       	com	r22
    313c:	70 95       	com	r23
    313e:	80 95       	com	r24
    3140:	90 95       	com	r25
    3142:	9b 01       	movw	r18, r22
    3144:	ac 01       	movw	r20, r24
    3146:	bd 01       	movw	r22, r26
    3148:	cf 01       	movw	r24, r30
    314a:	08 95       	ret

0000314c <__divmodsi4>:
    314c:	97 fb       	bst	r25, 7
    314e:	09 2e       	mov	r0, r25
    3150:	05 26       	eor	r0, r21
    3152:	0e d0       	rcall	.+28     	; 0x3170 <__divmodsi4_neg1>
    3154:	57 fd       	sbrc	r21, 7
    3156:	04 d0       	rcall	.+8      	; 0x3160 <__divmodsi4_neg2>
    3158:	d7 df       	rcall	.-82     	; 0x3108 <__udivmodsi4>
    315a:	0a d0       	rcall	.+20     	; 0x3170 <__divmodsi4_neg1>
    315c:	00 1c       	adc	r0, r0
    315e:	38 f4       	brcc	.+14     	; 0x316e <__divmodsi4_exit>

00003160 <__divmodsi4_neg2>:
    3160:	50 95       	com	r21
    3162:	40 95       	com	r20
    3164:	30 95       	com	r19
    3166:	21 95       	neg	r18
    3168:	3f 4f       	sbci	r19, 0xFF	; 255
    316a:	4f 4f       	sbci	r20, 0xFF	; 255
    316c:	5f 4f       	sbci	r21, 0xFF	; 255

0000316e <__divmodsi4_exit>:
    316e:	08 95       	ret

00003170 <__divmodsi4_neg1>:
    3170:	f6 f7       	brtc	.-4      	; 0x316e <__divmodsi4_exit>
    3172:	90 95       	com	r25
    3174:	80 95       	com	r24
    3176:	70 95       	com	r23
    3178:	61 95       	neg	r22
    317a:	7f 4f       	sbci	r23, 0xFF	; 255
    317c:	8f 4f       	sbci	r24, 0xFF	; 255
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	08 95       	ret

00003182 <__prologue_saves__>:
    3182:	2f 92       	push	r2
    3184:	3f 92       	push	r3
    3186:	4f 92       	push	r4
    3188:	5f 92       	push	r5
    318a:	6f 92       	push	r6
    318c:	7f 92       	push	r7
    318e:	8f 92       	push	r8
    3190:	9f 92       	push	r9
    3192:	af 92       	push	r10
    3194:	bf 92       	push	r11
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	ca 1b       	sub	r28, r26
    31ac:	db 0b       	sbc	r29, r27
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	09 94       	ijmp

000031ba <__epilogue_restores__>:
    31ba:	2a 88       	ldd	r2, Y+18	; 0x12
    31bc:	39 88       	ldd	r3, Y+17	; 0x11
    31be:	48 88       	ldd	r4, Y+16	; 0x10
    31c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    31c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    31cc:	b9 84       	ldd	r11, Y+9	; 0x09
    31ce:	c8 84       	ldd	r12, Y+8	; 0x08
    31d0:	df 80       	ldd	r13, Y+7	; 0x07
    31d2:	ee 80       	ldd	r14, Y+6	; 0x06
    31d4:	fd 80       	ldd	r15, Y+5	; 0x05
    31d6:	0c 81       	ldd	r16, Y+4	; 0x04
    31d8:	1b 81       	ldd	r17, Y+3	; 0x03
    31da:	aa 81       	ldd	r26, Y+2	; 0x02
    31dc:	b9 81       	ldd	r27, Y+1	; 0x01
    31de:	ce 0f       	add	r28, r30
    31e0:	d1 1d       	adc	r29, r1
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	ed 01       	movw	r28, r26
    31ee:	08 95       	ret

000031f0 <_exit>:
    31f0:	f8 94       	cli

000031f2 <__stop_program>:
    31f2:	ff cf       	rjmp	.-2      	; 0x31f2 <__stop_program>
